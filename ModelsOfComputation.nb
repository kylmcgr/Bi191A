(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1180409,      22193]
NotebookOptionsPosition[   1159081,      21877]
NotebookOutlinePosition[   1159422,      21892]
CellTagsIndexPosition[   1159379,      21889]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["A brief introduction to models of computation", "Title",
 CellChangeTimes->{
  3.818565174571698*^9, {3.818565208420986*^9, 
   3.8185652354340067`*^9}},ExpressionUUID->"c437c838-c597-456c-bc81-\
a62a98581f24"],

Cell[TextData[{
 "This notebook was prepared by Erik Winfree <winfree@caltech.edu> for \
Caltech BE/CS 191a, Winter 2022.    Please report any suspected bugs that you \
encounter!\n",
 StyleBox["Do not share this with anyone who is not currently taking the \
class unless you have permission from Erik Winfree.",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.820351424938045*^9, 3.820351445782344*^9}, {
   3.820368437453093*^9, 3.8203684819722643`*^9}, 3.820472677966508*^9, {
   3.8207972478187237`*^9, 3.820797249605282*^9}, {3.8209411813285847`*^9, 
   3.820941181418469*^9}, {3.821765265511417*^9, 3.821765275847251*^9}, {
   3.8224426511554527`*^9, 3.822442651472589*^9}, {3.8227729227817373`*^9, 
   3.822772923151351*^9}, {3.822874981028717*^9, 3.822875001880706*^9}, {
   3.823471187852744*^9, 3.823471188143159*^9}, {3.823475014813491*^9, 
   3.823475034418499*^9}, {3.82347517537428*^9, 3.823475204864468*^9}, {
   3.825512650242001*^9, 3.825512661066691*^9}, {3.825513071463574*^9, 
   3.825513071522691*^9}, {3.825513223801775*^9, 3.8255132415902977`*^9}, {
   3.825546794591607*^9, 3.825546799397291*^9}, {3.850391816458729*^9, 
   3.8503918165023413`*^9}, {3.850470682705618*^9, 3.850470695799921*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"d7433995-cfe2-43c2-9e34-730a14762c61"],

Cell[CellGroupData[{

Cell["The purpose of this notebook", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818263922110901*^9, 3.818263928075458*^9}, {3.818296986461046*^9, 
  3.8182969908594646`*^9}, {3.818298062333235*^9, 3.818298065052231*^9}, {
  3.8183051291102753`*^9, 3.81830512947314*^9}, {3.818307835843019*^9, 
  3.818307842102236*^9}, {3.818797491715295*^9, 3.818797504667005*^9}, {
  3.8255133067700577`*^9, 
  3.825513311288341*^9}},ExpressionUUID->"2c3d6281-37c1-4d0b-8df4-\
92b02e31e27a"],

Cell[TextData[{
 "One of the goals here is to see that simple models of computation can be \
defined and implemented and explored with ease.  This why the code for doing \
the simulations is presented.  Although you do not need to decipher and \
understand the inner workings of the code, you will hopefully appreciate that \
it is not small enough to be comprehended if you wanted to.  And if you come \
up with or encounter some other simple model of computation, you ought to \
feel capable of writing your own simulator in a few lines of code.   When \
playing with models of computation, don\[CloseCurlyQuote]t just sit there and \
stew in the juices of your abstract thoughts -- also just ",
 StyleBox["try things out",
  FontSlant->"Italic"],
 "!"
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818305134529746*^9, 3.818305147423658*^9}, {3.818307567804254*^9, 
   3.818307676573565*^9}, {3.818307740241137*^9, 3.818307819315854*^9}, {
   3.818307852278097*^9, 3.8183078887321177`*^9}, {3.818352775966131*^9, 
   3.81835279211265*^9}, {3.818362649134536*^9, 3.818362658917902*^9}, {
   3.8186193840478077`*^9, 3.818619443048718*^9}, {3.818773671382062*^9, 
   3.818773671565988*^9}, {3.818773716690157*^9, 3.81877373405424*^9}, {
   3.818773776007524*^9, 3.81877380475521*^9}, {3.818775031195805*^9, 
   3.818775088877652*^9}, {3.818792382739785*^9, 3.818792382889319*^9}, {
   3.8187972075138063`*^9, 3.818797482381172*^9}, {3.818797514751973*^9, 
   3.8187977201615877`*^9}, {3.818797751377577*^9, 3.818797844184945*^9}, {
   3.818797880356597*^9, 3.8187978971517773`*^9}, {3.818797930069919*^9, 
   3.8187979383019114`*^9}, {3.8187979837449217`*^9, 3.818798372106823*^9}, {
   3.825513318694672*^9, 3.825513506175486*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"5e6f642a-d172-4816-96c1-454c77d985cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Concepts related to models of computation (informally)", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818263922110901*^9, 3.818263928075458*^9}, {3.818296986461046*^9, 
  3.8182969908594646`*^9}, {3.818298062333235*^9, 3.818298065052231*^9}, {
  3.8183051291102753`*^9, 3.81830512947314*^9}, {3.818307835843019*^9, 
  3.818307842102236*^9}, {3.818797491715295*^9, 
  3.818797504667005*^9}},ExpressionUUID->"39382485-c85e-4003-9192-\
da3c21294f26"],

Cell[TextData[{
 "Skip this section unless you are interested.\n\nA model (or machine type) : \
mathematical definition of syntax and semantics.    Example:  Here is how to \
write down a Boolean logic circuit.   Here is what it does.\nA program (or an \
algorithm):  the specification of a particular machine in a given model.  \
Could be high-level or low-level depending on the model.\nA task (or a \
problem): a mathematical description of a desired behavior, e.g. given input \
of a specified form, halt with output that has specified properties.\n\n\
Uniform versus non-uniform models.  \n\tCircuits are non-uniform, as you need \
a larger circuit for larger problem instances.  Turing machines are uniform, \
as single TM can solve all possible (even infinitely many) instances of a \
task.\nComputability and uncomputability.\n\tThere are well-defined \
mathematical functions that are uncomputable!  The halting problem and the \
Busy Beaver problem are well known examples.\nComplexity, in terms of time, \
space, energy, program-size, or other resources.\n\tTypically considered as \
worst-case over all inputs of a given size; could also be average case, \
suitably defined.\n\tComplexity of a specific ",
 StyleBox["algorithm",
  FontSlant->"Italic"],
 " relates to how long that algorithm takes to compute inputs of a given \
size.\n\tComplexity of a specific ",
 StyleBox["problem",
  FontSlant->"Italic"],
 " relates to what is the best possible complexity over all algorithms (known \
or unknown) that solve the problem.\nComputing functions vs behaviors.\n\tIf \
one is only interested in the input/output function computed, one considers \
it to be computed regardless of how long it takes; it just must be correct.\n\
\tIf one is interested in the response of an algorithm to its environment, \
one must consider a real-time sequence of inputs and real-time production of \
outputs.\nSimulation and universality.\n\tOne model can simulate another if, \
for each program in model A, there exists a program in model B that does the \
same thing, say in terms of input/output function.\n\tOne program, U, in \
model X is universal for model X if, for each other program P, there is an \
input p such that U[p,x] = P[x].\n\tSimulations typically will not preserve \
running time, e.g. Turing machines can simulate cellular automata in \
polynomial time, but not in linear time.\n\tReal-time simulation of behavior, \
requiring a correspondence to be maintained throughout time, may also be \
considered... but is conceptually distinct.\nDeterminism and confluence.\n\t\
Local determinism relates to there being exactly one possible next state (or \
none) for each machine state.\n\tNon-deterministic models have multiple \
options; in this class, we will consider semantics where random choices are \
taken in each \[OpenCurlyDoubleQuote]run\[CloseCurlyDoubleQuote]. \n\t\
Confluence describes (and generalizes) the situation where the end state is \
independent of which choices are made.\nReachability and state space.\n\t\
Which machine states can be reached from which other machine states? Perhaps \
more interesting for non-deterministic machines than for deterministic \
machines.\nHigh-level programming languages and compilers.\n\tMake it easier \
to describe desired algorithms!  Translate to a low-level language that is \
closer to physical implementation."
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818305134529746*^9, 3.818305147423658*^9}, {3.818307567804254*^9, 
   3.818307676573565*^9}, {3.818307740241137*^9, 3.818307819315854*^9}, {
   3.818307852278097*^9, 3.8183078887321177`*^9}, {3.818352775966131*^9, 
   3.81835279211265*^9}, {3.818362649134536*^9, 3.818362658917902*^9}, {
   3.8186193840478077`*^9, 3.818619443048718*^9}, {3.818773671382062*^9, 
   3.818773671565988*^9}, {3.818773716690157*^9, 3.81877373405424*^9}, {
   3.818773776007524*^9, 3.81877380475521*^9}, {3.818775031195805*^9, 
   3.818775088877652*^9}, {3.818792382739785*^9, 3.818792382889319*^9}, {
   3.8187972075138063`*^9, 3.818797482381172*^9}, {3.818797514751973*^9, 
   3.8187977201615877`*^9}, {3.818797751377577*^9, 3.818797844184945*^9}, {
   3.818797880356597*^9, 3.8187978971517773`*^9}, {3.818797930069919*^9, 
   3.8187979383019114`*^9}, {3.8187979837449217`*^9, 3.818798372106823*^9}, {
   3.850391899479577*^9, 3.850391955544745*^9}, {3.850391993823833*^9, 
   3.850392029815786*^9}, {3.850392061580453*^9, 3.850392181436204*^9}, {
   3.850392225050418*^9, 3.850392252626371*^9}, {3.850392320740903*^9, 
   3.850392427258629*^9}, {3.850392475294558*^9, 3.8503924780328617`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"62772f6f-62c1-4810-ae8e-c8960d9ef14b"],

Cell["\<\
Models (vaguely) related to Boolean logic circuits:
\tSwitching circuits.  Combinational circuits.  Sequential circuits.  \
Relational networks.  Boolean formulas. Finite state machine. Neural \
networks.
Models (vaguely) related to Turing machines:
\tMulti-tape Turing machine.  Multi-head Turing machine.   Stack machines.  \
Register machines.  Counter machines.
Models (vaguely) related to Random Access Machines (RAM):
\tParallel Random Access Machines (PRAM).  Assembly language.  
Models (vaguely) related to string rewriting systems:\.08
\tSemi-Thue systems.  Post correspondence problem.  L-systems.  Chomsky\
\[CloseCurlyQuote]s hierarchy of grammars. Term rewriting systems.
Models (vaguely) related to cellular automata:
\tIn one dimension, in two dimensions, in three dimensions....  Lattice gas \
automata.  Ising models.  Turmites and Langton\[CloseCurlyQuote]s ant.   
Models (vaguely) related to asynchronous parallel pointer machines:
\tKolmogorov-Uspenskii machines.  Pointer machines.  Graph grammars.  Graph \
rewriting systems.  Parallel pointer machines. Schonhage machines.  Wolfram \
Physics Project.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818305134529746*^9, 3.818305147423658*^9}, {3.818307567804254*^9, 
   3.818307676573565*^9}, {3.818307740241137*^9, 3.818307819315854*^9}, {
   3.818307852278097*^9, 3.8183078887321177`*^9}, {3.818352425875791*^9, 
   3.8183524759723377`*^9}, {3.818352508001577*^9, 3.818352515706285*^9}, {
   3.8183525558965187`*^9, 3.818352622493308*^9}, {3.8183526959361267`*^9, 
   3.8183527236539583`*^9}, {3.818352809028401*^9, 3.818352823768093*^9}, {
   3.8183528895372753`*^9, 3.818352999366865*^9}, {3.818353285214415*^9, 
   3.8183533084223757`*^9}, {3.818370558428495*^9, 3.81837056356036*^9}, {
   3.818394860375634*^9, 3.818394882431966*^9}, {3.818619342805068*^9, 
   3.818619351611161*^9}, {3.818719410172772*^9, 3.818719411295886*^9}, {
   3.8187924523043633`*^9, 3.818792494305023*^9}, {3.818792813605914*^9, 
   3.818793027573783*^9}, {3.818793286398486*^9, 3.8187933740217743`*^9}, {
   3.8187935224689417`*^9, 3.81879355957378*^9}, {3.818802992571331*^9, 
   3.818803103471098*^9}, 3.8255096274243*^9},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"c4c8a92d-6ed1-4442-8e7d-5d06553765db"],

Cell["\<\
You may consider the above to be keywords for guiding an internet search for \
more information.  An excellent textbook is John Savage\[CloseCurlyQuote]s \
\[OpenCurlyDoubleQuote]Models of Computation\[CloseCurlyDoubleQuote].  For \
models not covered there, I will provide references below.  Some of the \
models considered here are somewhat non-standard variants, such as the \
asynchronous gate update semantics for Boolean logic circuits and parallel \
pointer machines -- strictly speaking, that makes them inequivalent to the \
standard models for many questions and properties, and you should think of \
them as having a distinct model name.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818305134529746*^9, 3.818305147423658*^9}, {3.818307567804254*^9, 
   3.818307676573565*^9}, {3.818307740241137*^9, 3.818307819315854*^9}, {
   3.818307852278097*^9, 3.8183078887321177`*^9}, {3.818352425875791*^9, 
   3.8183524759723377`*^9}, {3.818352508001577*^9, 3.818352515706285*^9}, {
   3.8183525558965187`*^9, 3.818352622493308*^9}, {3.8183526959361267`*^9, 
   3.8183527236539583`*^9}, {3.818352809028401*^9, 3.818352823768093*^9}, {
   3.8183528895372753`*^9, 3.818352999366865*^9}, {3.818353285214415*^9, 
   3.8183533084223757`*^9}, {3.818370558428495*^9, 3.81837056356036*^9}, {
   3.818394860375634*^9, 3.818394882431966*^9}, {3.818619342805068*^9, 
   3.818619351611161*^9}, {3.818719410172772*^9, 3.818719411295886*^9}, {
   3.8187924523043633`*^9, 3.818792494305023*^9}, {3.818792813605914*^9, 
   3.818793027573783*^9}, {3.818793286398486*^9, 3.8187933740217743`*^9}, {
   3.8187935224689417`*^9, 3.81879355957378*^9}, {3.818802992571331*^9, 
   3.818803103471098*^9}, 3.8255096274243*^9, {3.825509923167286*^9, 
   3.825509960036962*^9}, {3.825510160262013*^9, 3.8255102608735332`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"683eb8db-3a61-414f-8097-2ee77ed6a517"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Boolean logic circuits", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818566221359252*^9, 
  3.818566222579301*^9}},ExpressionUUID->"28ae2634-02c0-4120-8065-\
8ec0e98cd7da"],

Cell[TextData[{
 "A Boolean circuit is represented as a list of gates, each expressed as an \
update rule for the output wire, in terms of free variables representing the \
values on wires.  The variables must not be defined in Mathematica, so \
pre-defined symbols like \[OpenCurlyDoubleQuote]N\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] are off-limits.  However, we \
make use of Mathematica\[CloseCurlyQuote]s built-in Boolean operators to \
define the symbolic expressions for each gate.\n\nTo represent a circuit, we \
need to provide names for all the intermediate wires.  The order in which the \
gates are listed does not matter, but it\[CloseCurlyQuote]s important to \
appreciate that if circuits are ",
 StyleBox["feedforward",
  FontSlant->"Italic"],
 " (i.e. they have no feedback loops) then they are guaranteed to stabilize \
with final, unchanging values on each wire.  Also note that fanout is an \
essential feature of circuits -- a computed value gets used more than once.  \
If a feedforward circuit has no fanout (other than the inputs) then it is a \
",
 StyleBox["formula",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
  3.818645045892765*^9, 3.8186451026765337`*^9}, {3.8186454476333323`*^9, 
  3.8186454487655354`*^9}, {3.8186454801432*^9, 3.818645629167431*^9}, {
  3.818646049106884*^9, 3.8186461284698687`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"5bd5e971-99c8-40ea-984d-77a48c7f20d4"],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
vvPj3/9nL1q7B/SOcKHG5vZ19g1evnFv8459s+YuLiqvAWrikjNUqhKlsli4
Ji+vaubMxVu2HGhuvtzXZ9DprGKgjX9CMxzp7ByAXBYuXFFTMx2cUakK8vLK
QJuCggrszpq14ODBE3fuPMHHJYQiBtq8ewSd3j0h13NCrKSJoTQomMyO23ce
Ll+xtrikUqnKBVgqKifPapi3es2G481nrly9hdy4ee/8havYXbV6fe2U6YVF
5ZnKHLimelLdvv1HXrd2+Vex8Qy9Wa8z6rX9MRKihqgZTYk6TIgaooaoIWq+
Jmo0Rqnp5OaDrqVr9kIo//CZElpJUVbOmr/++Nn7T18bOjUenNatHe7odyP3
n2kOHL8xe+HGVFXV3/1SgZNx1Zwl609cuAvL6Ky+nkG3aHbBbrCWmlBRE6wF
J1iC3SdcqDE7fT1ah9UtoWbqrCXjE9VpqpL3QI1GY/rBD/7JRx9990//9N8e
OnQS1WngRTRJvHzZ9c1vfg8v3br1CLv4xnn8+NV//a9/9Tu/80c4iJfEq9jF
wX2HT4jmmHuPW/79f/q/vvndH/7mD3/vd37yU0k03/zmj37vJ9/9wW//4R//
S7z0qqNPZ3SFCzXOYenbRGu0v2zvPX/l1rrNOyfXN6hyiyGajIxCiCY1NTct
LQ+7+fnVZWVTDxxovnz5NmwCmIgGGqAGfNuz5whYp1YXZmcXFxdXT506G1hD
qqvrlcr8zMw8FFat2njjxgPx+cB9IcVkcoWUSKMG9cxhrzSspqdXe/DQ8Uk1
U9MVakSdlb+kaeWJk+eePntlMNrgFLPFKWZv1upMd+4+2rlrf+OchVnZBckp
Gbl5xTj5wsVrukGzc2ReaOevOrZFvbY/RkLUEDWjKVGHCVFD1BA1RM3Xb6l5
2Wk92Hyzonbhz8ep4JQJyYXTGtfsO3qttcdhcftMTmliNNhnwCQtwYntoxbd
7kOXJ9U3jU8qAILGJeaX1szeffh8t85lR4XT6dOjJuz2WYeCD6sJESPBupOF
KzpzaHH5fBaXz+n1PX3VP71x2YSkrPjU3InJ2aGiRqez/qt/9eewyW//9h/8
1V/9vfBLf78RW3jnG9/4Lbwkdo8dO5uRkYvd//yf/9vKlRuePWtDUMAuDv7N
P3x67fZD4ZqnLztu3X+qMzn6dObv/fjH/+Y//Ifrd+73avXAzJWb96U+af2m
cKFGb3FZnF7QBgFtHj57ffTk+Y3b9pSUTMnKKgNqkMzMIgEc6AZgmTu36fDh
U0+evIYd8L6s1qFLl25NmzZHpSpAGhoWbtu279y5a/ALjh88eGLhwhW4Ci9N
njyjufm8uCrSiTRq/EtqtrxsX7d+C3iSkpoJqtROmX74yAkxA4B/zU3/ycAL
XLN9x97Kqlqcr1LnobBp846Xrzr8jTWiBhv12v4YCVFD1IymRB0mRA1RQ9QQ
NV8TNcjdJ32rNx5WZNf87cfpn8TlZObWwiy3HnbDMkaH1LDS1uvs1HhER7VB
q6SS24961mw6klsyQ0wpkJFbtezzXdfvv37RoX/0sv/Bi96nrdqXXcaugaHA
0ToDpmfQHTChttSE3LKjDy0vOwYft/Q+ednXfPZmdd1coAaBaEJFjdns/s53
fvijH/3k448n/vCHv5+dXYy6bG+vfmDADMv8xm/86Fvf+r5jZMRNbm7pD37w
T37xiwnHj5/7YvUbuzj4Oz/56ZyFywYMNuEa+8hwfpvb99E3v/kHf/zHXf1a
cRzuwFZv9oQLNYNmp8HqxheKcI3JPgRJtXUP7NhxZO7cFYWFNRCNUik13KCg
UpUkJCjAk6lTZ69btw1mwTttaencs+cI3nhmZt6MGfPOnLnS3a0Tq3CCdVqt
5fr1+7Bbfn45zvn8862PH7/q6tICgyFlcNAWUkIdg2Oze0LK69aurm7Nq9ed
J06emzlrrpi3uaCwDMB59PiFEM2wV3KKWGETBTFbWr9Gf+36nQULl0JA6qx8
uGZ244Lbdx6KiqvV5hareUa9tj9GQtQQNaMpUYcJUUPUEDVEzddBDcDS0e8+
f+3FzHnrxPD/NHV16aR5N+53tnRYxNKcEE17nwuQgWjgEWxNTmkMzpFTd+pm
rUxUlH08Ietnn6XllNQ1Ll63eNW2eUs3zlmyfv6yTYtWbp3WuCZgZs5fHTAz
5q0KS6bPXRkwsxasCZiG+aFlycoti1dsXrp628y5K5S5laKlBnmPiQI++ui7
P/3pn9y+/fjTTxO+973f3bx5Nw4CO263D8yBa4aGpDH1f/u3vwRw8KrR6MQJ
z5+3I6IjFg5+9K3fmpikaO/RwjVmx/CzV52wxsv2XqDmO9///vPX7b1avdZo
7Rkwvpk0IEyogZEsTq/R5hErdTqGfC6vFI3GdvHi3eXLN02aNCsnpyItLQ8B
aiCatLSsjIzcwsLK2bMX7dx5EKJZtGhlaqq6oKBi69a9AIvfa+KdwjWnT1+e
PHlGYmJGdXX9+vXbt2zZs2rVxpCyevWmkLJ06drQsmx1SPl83eZNm3es37AV
JMnJLYpPSIVrgJpTpy9oBgwQDQgjep2ZLU7nyBgcUfV1uX2dXf3btu8pLasG
atIV6sqq2vMXrorRNGLJG46p+WAhaoia0ZSow4SoIWqIGqLm66BGY/S97rYf
Pnm7onbhLydmj08qyC+bVTtj+ctOK7DTrR0Wq9hANzgTrsHBAZPUfIODpy89
aViwIVVV9Yvx6v/3H+I/npgZn16QmFGUoCgUwW6KsjJg0rLKAyZVXRaWpKhK
AyY9uyJgFFmhJU1Vosgqy8yRCnEpOROTsxPS8hLT80NFjd3uFX3PbLbhM2eu
fPvbP/hP/+n/fvq0Fd+bQM1HH/0mXgVqXr7s+rM/+/co37//XEyMptfbEcEf
HPzoG9/93/6Pv+jWGIALmKVXaxJ4+fb3vvfjn/zE7HDb3MNW1/Cg2am3uEw2
b7hQA7/Y3D6xlo3JPiQW7rS5xWRu9jt3Xhw8eGbBgtV5eVUpKTkKRUF2djFQ
k56erVDkKJX5FRVT6usbKyvrcHDSpGknTlwQ7w7v3eF4IzukpaVzyZLVQA00
hJOLiqpwn5CSk1MSUmCu0FJUHlLgl5LSquKSyqzsAnAGyc4pxJHrN+6azA6g
BkIRE5ohovFFDJnBS2DOseOnJ9VMVanzMpU5uNXx5jM4B3VXoEYs4hn12v4Y
CVFD1IymRB0mRA1RQ9QQNV8HNTqL71WXbc/hKwXlDbBJQnppWc38+tmrYRYx
OYBYlxOnYfdFuxmoEYvatPY4Tpx/CNSkqatx4bik7M8Ssz5NUCMTUnIhmri0
fByBkgInOSdgcG3AwEchBT89YIKdn5AWWuJTc/0L00xIykIBET3QQh1T88//
+Z9CK3fvPkWFNS4u7Yc//H3U24VZcByuwfFXr7r/6T/9X7A7PCxdMjBgFrV9
FLCLg0DND37nD9p7tGALLNPapYEytEb7R9/85je++12T3YXarlhPs3/QEsaJ
AsyOYVgGqEEBokHwc3Umh/iKtNt9fX2WkyevTp++UEyGBpgganVhbm5paqoa
EejIzMybPn3upUu3rNYhXGg0OsUim8I42N2+fT8QBPvg5IQEBe4QUrKyikKK
GOATQtR5IUWRkZWRmY1tukKNXcCkonJy9aS6m7fuG012MUWzf4AMgCMabmAW
vIQjZ89drp0yXanKBYVy84oPHzkB1CDgDFAjFvRkPkCIGqJmNCXqMPk6edQt
r0RdPWMcQeFarDPSqAkXdsKFmnBhJ4qoedlp3X/sekXtwk/icsYl5ueXzZrW
uAYH+w3S/ABdA0OADApiKE17nwvGMbukhTJPX3oyfc5aoCYutfgXEzJABtDm
l3HKial54AmOADhJGeUBE59WEjDJysAJFSl4hoAJ1oKTqgyclMySgEnOKPy7
jxOTFAXq/OpfjEv7ZGKGMrfyPbqfodIOtnznOz9sbe1F7f3OnSeogQMvBw40
i55pCOr5Ho/vj/7oX3772z/o6Rm0WDxfXKdGLFj50Uff/29//Yt7j1qlgTMG
t8HiHdC7TDYJO9/77d8XLTh6i8s5LDXiQDehokasyIk7SA09Iy0ygjMoiC8U
7IIzeFUAR4y17+zUnzt3a8WKzVVVM7Kzy0dG1uQBMqKZBnaoqJhSXl6LIyjX
1TWcPXvVMbKKDd6amB4NBey2t/evXr0J1yYnK7HNyMjF5QETrKUmVNSEnOyC
kJKTWwSPCN2kpasAHNhEtNT09ulAGFRELVYXOCOmCBCoAVhQ1husR4+dqps6
E6jJVOYUl1QeO34aFT+gxmxx4pIwVnqjrgaZh6gZ3aiJujKIGqKGqCFqiJp3
D7QCp5y6+Lh+9mqI5ufjVJm5tdVTl9x53NvW6xwwSd3McIJouEEBB1EQ69oc
OXWnZtpSSAQa+iRelV08pWxyY8WUuTXTF1VNnV9aM3vStIVlNfMDpnzygsCp
nRMw1fULAgY/K2DwowMGjxcwlbWBUzVlXsDMmreytHrm9MZlSEJaHlCTqiz+
NC4zVNSg6v6tb33/xz/+w95ePSDQ12dYv377n/7pv/3kk/jz56//3u/9M5AH
LxmNzr/+659973u/u2HDjra2PtTzNRoTggJ2cRCoiUtSt3XpnUO+fp3D6vTp
zcPIR9/6rR/93h9pjXaXVxrUL8byv8eYGjFqxt/BDCzCFt8jYkCN6HuGg+6R
Pm/Y9vVZ7t9/tWdP85w5y0tL634lmiK4IykpMyVFBbtVVtYtXbp27dotjY2L
09Kyiourd+8+LFYg/eJ6MXDN9ev3Z8yYh3Py88tRmDu3qaFhYcBMnz43YKZN
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
aWjqzC6uTz2XtfPgmQVLNsxfvH7eonUoLF71zcaUI/uPX0q7mA3p4BS5Wi8g
UIh6r4lbehhqBgdqqJmGOMPjBfuVyi6VqhtvdXdzBBxIp7m5nebdbe/ooSnC
+FnFGGoGdyyFGlgGV6PVVGEWXR+XcT07ceFSX79gJ2cPmo7bPyB0/YatFZW1
DDUMNUM8DDUMNQw1DDUGA8VI1fppzSqEHTKNvuGGhtVMsg/8epLbqCmeNKxm
w840Wq1moKAGKhE1d1c1tmUVCI6cSl+1ae/MuGU+ITHWM7wn23lNsvXE1sY5
wN0/Omx20tyEVXuPXjifXlhe14wT4RowhKaGZqgZNKjp7B9Z09nfFQ1+6en5
j4VmsEff66zvVpsO3zqjvU00DDWDPpZCDf7SABkUVGot9XsEXr7ZvjsoOAJP
EKHlU8Gc7JzCXh1DDUPNkA5DDUMNQw1DjcGU1KkINWUNGhTAlj3H071C460d
g4eNdx5p7THBzt/WPXLlliNFgjaJasCgpqWDqxGpLmQUbUw5Ej1vuYtPJCAz
erITIDPN0Q+iGT/NDUFhhlsw3g2dtRDwuZRZUidtN+9oGoaaewE1Op1eLp39
3cz4nbgsLT2jVHa1tnZiiz008zO/EMz/73h258qYxWuJ/xmGmv8ulkKNpr0b
kMEFW9vaqQeaSCw/nno6LDwaT83Ty59mDJgzdz4tM2TsOgw1DDVDIfcUagY8
ghhqfhTUlEi5SwXNDWr9AprpRc0NbVydgiuq7RTKe+pk3aUCZVlDB4xQ2tBb
3KCrkPT3MlJoJW1cpajzerFE0MQJFNyNclVzNydUcrXynuKalpvFoqoGjbyN
E8v76sS9xZVtVfWdTW1cuUBTVNEqa+VEck7UwhVWaWulHFJU3SWQcHUyrkTQ
UyvSNcq44qqWkuoWpVbfr6mstqmgQqhQc3mlsvJalbSVq6hTlwmUApE2v6yp
Qdohbelt7+EaZV3FFYp6cbeoqa+mQVsrUkuae2oalXViDYICXup3KnX18s6c
koabRXVdHNem5hpEmubWPlyntLqpplHd1sm1demH6lcIO4AIY6gxFTvgDK2q
KZD1VIm1uPjxC/mR81ZPsg+EaL4c5zR8oquNW0Ts4i1pV4rN2P3MaAtLm+Hc
oZsZDZwBQ2gGZlqSRtPLXc4qXZi8xStoDhQzxtoZouEbaOzdQ2xdAok2E208
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
o2ZRh1GzgFADmMTn9obeyN9z5IaW7TEQ5uPNZn9cpfs/K3X+sEIbQfmv640+
22q1ZpfjRnVXxwNXjl9Ij83szK4TgohRw6iZU9RUtU5ml3WdufhQz9IbnJFT
NpdXsVizVW+HprWTz8nbj/LBmdYB4RQBCHTDqGHUMGoYNZzZDc14Ri+FBp6U
ldccPXaK5j2j9VzwBo8dD25sal9A74uWFqLJtwlutJ/G0fT0DvX1j1CrDQoI
DsMTELXXiOamZtQs7jBqFhBqkoqHo2LLdu+/LKft+cEGY1jmz2v0P9xoskzB
BpABcLATqEFQwP7Pt1kbuYSE3SpMLhkRzerMY2oYNXOEmsqWieSchn3HL25T
s1q5RXu7hg2yYrOWlqmr39HopOza9iFB26BwXU6EUcOoYdQwajizHrIMLS1K
41BS07KdXTy0tA3UNXT1DUwJNWfComiiY5nf8EsGd/t8pzLaKeprR2B5fjFQ
aqkRdVQjBMlwnRpGzRJEzUJH0GzhhWYqw/ZJ2Vh61VRBs7D/WGaNAB9tfc+D
MLDM///Rrj+s0KYWmY3qLspm+9WtDstpu6/YYbNMwepvW0z/tFrno02my7fb
qpgf2n/m0aOCgfIu4ZRouIi0qMmumRKbgkaB2OTWTYmNaDnOv4tIJTnVE/hY
1Sl4XNh3JOwBCAPO/G2DAQLULJc3U9T3Cr6YOv9QIz4LHTWS0tgjnLusrHG4
rnMaNmnoFlS1jmNPacNIyPl4DWPXDTuMtuwyk1exwBax9zh6/tYTHN/SLzQL
DahZQItvzjfUSDp+qaGmf2SKIvrP1tP/qM0xaiYmBJOTwkJPz0h39/Dw8PT0
tICCqsvQ0BRVYAYGJlCemnp68ODgJI7EudgzNvb0sAWNGux5/CSD6pM03mEB
9WVaBCG5fDGoxvf2DXf3DFKnrJbWrojIC0bGFppa+sYmlnr6JqDNHlevh48e
03qU8+3+5/xPM2oWdRg18xA1NFMZUJNSPo5yXqOw/DC//1B4kpLJflDlL2sN
/melzmql3UYuIQ77LgVfzTp3v+zig8qQ6zn+IXHWPpFbdT2BmvfXGSKAj6VX
ZFRsWVrlZG6DcEbovDqB+NSLT36D+GRWTYiNJOxIRETT00JBvaC0RdA4IMgo
HzkRnQzCUEsNUPPZZuNlcqbYE3I5nVEjW9RAJSBJTfskLIOgQE55kFa1NyB6
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
F1qYJiExxd1jr6mZNV4WRKOhqaemroM3FXY2GqKhmQFoxjO8NaCGu58xahZo
GDULDjWwDHgC2qD8IK8PTtlh6PepvOVf1xthC9eYuZ89eSnz0sMaHFPUKoBW
AJxHBQORd0udD11TNN4H0fzPSq0/r9FV0Pf2O33/bkYbwSezckp8qiakSlb1
pNjk1EoX2CSneiK7ajyjfASF0hbBg6x2/6A7IMxyebPPNhvT9GhAjZKB95mr
mYyaV9ZSQ13OmvoFLYMCGOdJQeOthHxjO/8dmrZrturBMhANIq9igT0Hgy5d
jEnNKe9s6n3aTAPUvGCWM0YNo2aBosbBwU1DwwCg8PTcB60MDU29eDHNwcHJ
1NTcAweOmZvb6+iY4Fxsd+3Smp0oa8xpVFS1EFU1bVruBFVloAbMYdTINpNT
QpIMDI5RuaOzD6IJOnUGDsULoqhr6IKfx44Hp6RmUcsOjqTTaRYIGokjkzBq
GDWMmiWIGpRz6oUDZO5ndx+OSFY2O/iJnAX1Q1uttFvf8ZS1T/SZmwWgzeVH
taeuZHuduGvqFrZFy+Mvaw3eX6f/1/UG61WdbH2jz8eVp1cJO6c9KRuZrZaa
gkbxkdSCIynFTU9tklcr7IpW2yNIKR4IDH+kqO9FzTRADWizTM4Ue0IupzNq
XtlEAdUzkwPUdk2XNY88zKw6GXXHyTcIilmnYLB2m/7GncYbdhhtUjTRNHFz
9A56kFaRVdpe3TbR3CcUTU37JFAD4DBqGDWLCTU3btyztnZSUdExNLR0dd17
717iwMDEC1pqkOHh6bS0PF/fw0ZGVnp6Zrq6ptiamNjMTkyt5jSoJKNiLJol
gFCDLaNGtpmafjpRAGzS2zdMQ2ls7ZyoNY2Cd7fX90D8gySQh0bfgDaDQ+N0
Ok7ER1ndP6OGUcOoWSKoodYZEWpyGwT4+Lh0NLlkxNb3/Mqd9kDNu59r/Gm1
HlyzTsV5o7qrqsVhTZuj2/R8sGeZgg0OeG+Z5kebjJdvt1azPHQ4IjGxaKC8
S9hMk1DYn1MjEB8JY2Qkj50RiE1e/bRUIaQg2VXjcEpN91PU7NTzpFVsEOhm
ubwZUBN8MZVR88paairbxitax0qbhtOKWyKuJ1ruObRRyYgss1nJFJxZLa+L
j5bOh4Oj75c3jdR2TEExjT3CoTSVLWNwDbfUMGoWGWpiYxOAGiUlTQMDi927
3WGc3t7RqSmJlZyhoSnk8eMsNzdfHR0TcAYaMja29vY+MDvx2SdVPL38pIqr
mzf8QmNqqAcaAYdRI9tQSw0ePnjS0tp14+ZdJ2d3NXUdCBRvSlNLH+/I3sEl
IvJCRWXdtOBpu0xf/wgyOjMjNM3XLav7Z9QwahY9ahg7L05S8XBUbNnu/Zfl
dbzAlj+u0n1/neHHm82Wb7f9bKvVR5tM8fEvaw3+ut4I5U/kLNYq7zZzPxN2
Kz+peDCrdjqzZiqjehI+khVqaFqA/7WMqMWn/mkbTVblWEmzgLTidzJG2Wjv
833PPtlouF3HPfRKxkJZfHO+oaakcaSidaKmU4BUtk2ijJ21XcJlaFAoax5D
aNKzmQkBBHRAfk3/jYf5e4+e07H02qputUHReO02QMZws5Ixoqht67w36EZ8
TkXz6D82gfP8R420eJlr1HT2Swqj5kWR9j/6ko6/fz8pMDAYNtmxQw02OXPm
XE1NC+qIyMSEkDAwTk/PyMDAxOjMgBrsb2zsvHIlxsHBTVFRQ0VFB7qJjLyc
mporPmnZ8ypV1Q3nL1y1s3emyYE1NPW0tA14ooBXFlqPprOrHwChUTB42njm
+EgDZIqKK0LPROJ10AqbRsYW4MxORVUzc5srV2/V1bf0D4zK/Fd8MYwaRg2j
ZomjJrdBOLgm7FahW+AtXYeTmzXdYRlA5r1lmu9+roH8YYU2PmLnOhXnLVoe
boE3gi5n3MvqgGhy6gUQTVrluLATGqNmSaJGpJjnUYNy88BT19C3z4smvaT9
fEya+8GzWuYeW1TM1243WL1Nb5Oi0frt+ht2GCjp2Dl4Hgu/8iijuLWxZ3ZE
w6hh1Mxz1MAdoaHRpqa227eramoa+vsHJCamt7f3j40JxseFrgFksEV5bOYi
AE52dnFwcISZmZ2SkiY0dORIUGxsgsR6kaxrm3+XpuaOa9djHJ3c9A1MGTUy
CR4snjN1GKMuZ3jmEA22tXXN12/c8fL2NzaxpLnpELwpvCCfvfuTktO6ugdG
Z0bQyPxX/F0YNYwaRs0SR01+k7AfWkr5eGxmZ3hMsU/QPUPn0zuN/Jdvt12x
w27NLkdARsX8kKlbmPOha94nY+Nyuh6XDtPkACLUIIyapYkaUAVmQWZmNvvf
lhp8FImmoVeImrLmsYLagfupFcHn46xcAxQ0bdYo6IMz2MI1EA2iqG3r5HPy
YkxqXmU3JMKoYdQsEdTU1rbeufPQ3d1PVVVXUVHD3Nz+5MkwIKW1tbe3d5Sa
ZpCpKUFf31hbW9/jx1lRUVecnb3U1fVVVHQcHNwuX75dUlKzUFDT2zd85278
HlcvA0MzRs2rT1//CEgCwkxO/e9qm9iDx15T23Tj5l1PLz+8GuIMorRL3dzC
FqK5eOl6dU0jzXLGqGHULLIwahYBap6UjdEQm4Jm4WqbD/L6LsRXBV/N8Tsd
j+w/8ygwOuXMzYJrSQ0P8/tTKyZgmbxGIWeo7xkFtGHULFnUICLCoEDtMoV1
gyWNI2AOythTVD+UnNcYk1Ts5Busa+W9RcUcllm/02jTLlPK2m26Kvq73feH
Xr2XWVTb39wnXGSzqnWcUcOoWQqoGRsTFBRUhIZG03QBoI2VlaOv7+GEhLTs
7OL6+nbQBmls7MzLK0tOzjxyJMjR0QOi2blTXV/f/PDhkykpOfAOjbURk+GJ
+ZZ79x+57PGkMTWaWvqMmlcZPH9wBirpHxhFSCgDg2P5BaXURkOznInGOqmp
64A55y9czc4ppC5qdBGZ/5C/C6OGUcOoWeKoSS4ZeVw6mlY5KVqSBsCBblLK
x7E/qXgYgWUAmfIuQe3A09aZlPJRhEbTzMw/MMWoWZqoAVuogQZbkWiosxlh
p6x5LKO04/qDvCOhN5z9TsupWqzdbrBqqy6JBtsNisYwjo65+96AyJiEgpL6
QZoHoK5zGmHUMGqWAmqmpwWtrb0PH6YEBgZbWDgANWpqetCKj89B7Dl37lpM
zIM7dx5euHDj+PFQP78jxsbWOIb6qrm7+125ElNV1URNOeIzPb+C+vOdu/GO
Tm6oMIMzNALdyNiCUfPKQuvR0JgaIKW7Z7CwqDzo1BkPT18DQzMohrqcQTco
gJ/R5y5DNO0dvbR+Dc6lmZ/nVRg1jBpGzRJHDQiTUT1NfnlSNoYy2ALCFLYI
t5k1AngHqMEWZXwFv6RVjkM0qRVjQsvMNNlwS82SRU15yzhF1BWNBtc0DwhP
ySrvin1SFnLxgYt/iKqRCzizUclkjYI+NdNgC93Iq1lqW3iGXoi797ikrHG4
qVc4yxkKEE3nCHc/Y9QsFdT09Y1VVDTExSUfOxZiZeWopWWkoWGgrKytrW1s
bm7v4OCGwDu6uqYqKjr4CqiBery89l+6dCsnp6SrawgXGR6eFp+ZLkbzJ/0D
o7dj7ts7uFAbDa3CyYtvvrLQg6UxNRBKV/dASmpWROQFC0s7QEZDU4/WD0LZ
xNTK0sr+8pWb+QWlOIwERKiR+a/4Yhg1jBpGzRJHDeSSVStcswaiSSkfRwFB
ATsBHNqfXDJCDTooi2Y8w1bUTMNjapYsaipaJyjUTENNM4V1gymFLbcSCk9E
3nXyDdaz9tmuZQvRfLZRXU7VYt0OQ3CGGmiUDZyc/U6HXnpYUN0LyNS0T9Z2
TFW1jsM1Dd3C1TYZNYyapYCa/v7xoaGpwcHJpqauxMT0EyfOODl5Wlrupq5o
amp6FJTBnF27tExNba2tnfz9A27digOFentHUfOhaQTEZ3x+ZWBwLOZOnMPu
PTSfM7XX8Do1ryz0VCenhO+iobHtflzC4SPH8TrImKJeZ4ZG5u4ee08Fh5WV
1+CV0cRoyOhM3zPqhDavwqhh1DBqljhqCDKZNcImGxovA8tgJ/YgoA0CueBb
fEWzCsA1zwfA4dnPlixqqAeaqJkGZYgmq7wLnHE7EKZu4rp6m96nG9RWyGlv
2mW6TcMalkF5pbyOvJqllrnHnn2hV+NycFbniLC/WUn9IGgj4gzKjBpGzVJA
TUfHwMjI09kAGho6YmIeBAYGe3sfsLJyNDOz09c319Y21tIy0tU1NTa2Nje3
d3Hx9vU9fO7cteLialiGThwenl4oqAFY7sY+cHRyo2U3UX+muQIYNa8motp+
Z1d/QmKK/77D8AvREq/DyNhC38AUZXMLW4gGb6S3b5gaaHDu4NB4X/+IaGTN
vAqjhlEzb1GTUjY7WazYmS3USJ0a8SH+fDHSYme2Ft+UhBolA+9VCpa0/ubK
bRYoyGu4hN/IkYiRJukiCUeS8FLUNC02kvBS3DwlNpKQUt48LTaS8FLdLj6i
uZrrewRN/YLWIUE7amKjwjnNaExNTmXPneSSk1GxLv4hZk4HFXUdFDRtAJlV
W3WXbdZcvkVr7XaDzcpmK+W11ijo7tSx3e1zIupmclpxS3nLaHXHJI3B+WJo
hM4XM99QI+0im7JafFNSFi1qRqbEZ5ZQI+1/NCVVEuCR3t7R7u5hFKamBIOD
k+Xl9UlJGZGRl4OCzvr7B7i67gVk9u49dPTo6dDQ6Fu37+XkFnX3DE5NC2h5
ERBgUvJinVJnjiufojE1okYBBBVp7EEVmnpGibbsmv8z+AdAGRqeED0uFGg1
zP6B0Z7eIWxpYU1aH7Ohse1JSmZ4xHlPLz9TM2tNLX1VNW3QBrpU2qWOj65u
3pev3Cwtq56HY2fmPDLCy0JBzULHzpzihVHDqHnFqFmx1fzj9fofrdNbLm/2
+RaT7TruZ69n0wFfjCSkSJ3GKbGR3FgjHi8lLdNiU9Y0JVUqWgRiIwlB5S3j
8Etp02hR/VBB7UBedR8Uk13RfT4mLfLG4+DzcQdOXXHyDTaw9VXS2y2vZrlC
Tpv6mG1UMsF23Q5DoAbbHdo2+jbePoGRF+6kphY1lzWPVLVPVLaNM2oYNUsZ
NdPTws5jEA3KtB7NwMBEZ+dgc3N3dXVzfn55WlpeampuTk5JWVldXV1bR2cf
qpqonQohM1OnpVl5GTVLM9T+JRrwQnM1wy+9fcMInja+pf1E4Ny8Yjz/wKNB
tnZOeP7U9w/PX1FJDaixtLL333f44qXrmVn5be09s9nSsVAia8Uwahg1jBpG
zcugZpehDyAD0XywRuezzcZwDVBzLDJRYguLlC01EiMBL6Wt0kVSC44kpEjb
/UzSdeLSKmOflN1KKLwUmxlxPfn0hfjjEXcCw25ZuwUa2furGe/Zqm4FvEAu
tPoMLUADxdD8ZpuVzRQ0bRR1HfYejQq9FP8wswqcaewTLmFT2zUN1zBqGDVL
GTVQDAXloaEp6Ea0Ng2CWg2M098//r/7BU/XTEQFlSr/qHkyapZs6EENDU+I
xu/TR4hGNL8Z0j8wWlXdkJVdcPzEaZrlTGmXOgLI0NqaW7cpmppZnzgZkpCY
Ul3T2NM7RJMJyPwHvurIWjGMGkYNo4ZR8zKoEY2pgWs+2WgI4GxUdtjtG3Uk
7IHYBJx9KFUkXic8Tqoci4oXm8CI+2JzMjJebE5FPxSboKgHYiPpOh6Hwl33
n9ntE2S554iBra+mmbuygdNOHfsd2nZbVMxplmZqmoFfsAcBZ7CT5jcztPPz
Dog6GRWbWtScX9Nb3TEJ0SAzq9hMi6aAZtQwapYmagCWkZk2GkRYNxicRECY
8RmnoEB7aKfwgKFxVFD7+kdQcQVnaMS3cN0QRs2SDCEXD4oa7PDvgVpqyDLY
090zWFlVn5iUGhF54dDhY/ALrXkqmuVMT98EBQtLuyMBJyCa1rZuotA8XGHz
VUTWimHUMGoYNYyal0GNqokfTREgmi4A2aHrsUrBUmzW7LCWKqu3W4nNmp0W
UmWdkvisVTQXm42KFmKzRdlabDYpWYrN5l1WYqOgabNV3QpU2ahkAsKslNdZ
tlnzs43q1K+MupZBNAgsgzJ9xCla5h4u/iFnryY+KWiu7phuHxEOyanpnKpo
HUOq2ieAmvoeRg2jZkmjBlRB1QWioWVlxsaE7TWQDg3zF7XjoPy0hjNT4afu
Z1TthGiEYx8YNUsyeJ5ALqgr6maGh9bTO4RtW3tPQWHZ/biE8Ijz/vsOW9vs
xjNXVdMmzuDhIwaGZuYWtrZ2Tlev3X6SktnU3EEgmpoWXgeXlfkPfNWRtWIY
NYwaRg2j5mVQo2bq/8lGw+XyZghQA9p8sEaH5g0QGxwsVXBBsflkk57YfC5n
KDafbdETm+VbDcVns57YrJI3FJuVcgZiI+l4UY8yRKQYZIWcNvZTmfqeUZcz
NeM9po4HvAOiwq4k3Espz63qhUQgmuYBQXXHZEnjEFLZNv5spc4pRg2jZimj
hgbUQDEDAxMjz3qjUWUGW5FrRKgZfTbR0+izQeKofAp1w6hZkunrH/m7gTMt
rV2lZdUPHiZfuXqLOpvZ2DoaGVtoaRtANHr6JjSUhhbZxFdHAk6cO3+luaWT
upzRqJzRGSwLWwBl/QNfdWStGEYNo4ZRw6h5SdR8tE5vmZwpUPPxev1VCpaQ
yF9Xa3++xURscKRUWbHVXGyWyRuJzartZmKzYpuR2KzeYSo+W43EZq2CyayE
LEPtL5t2mW5RMZdXs6RxNChv07BW0LTZqWOvbeFp73XCJzA65OKDS7GZCdl1
BbUDNG1adcf0zDxpY2XNI6VNwxBNfc/THmg8UQCjZomjBvWWwcHJ3t5RhMbO
UBsNjIOI+p6J0j8wikqsaM6r4ZFJ1GOnphk1SzSi1hnopq29p6y8Jik57cbN
u17e/nikJqZWNF2zaFUgA0MzPG3EzNzG3WNvROSF9IzcxqZ2uBih8Vn05Jfo
85e1Yhg1jBpGDaPmJVEDwny22RgAAWrWK9nBNShIamGRFjUScSQBNcu3GouN
JNRIxI4E1KzZZixVJF1n1VZd0dh/mtMMtNmsbKakt1vVyEXL3EPP2sfaLfBw
yPW7j0uL6ofya/pLGkfAGTJIbZfg2UI240h1xyR28kQBjBpGjSggDM17Njoz
iEY0ExrtpKA8OSmMaLarqWeTBgwNT6BCy6hZmsE/gOaWzrT0nGvXY06HhPvv
O2zv4GJkbIHg8apr6FKLjJ6+CY2dwR7st7F1PHjoKOxTWlY9OiOj0ZmmGZAZ
WYoNNKLIWjGMmsWHmuRy6TLfsLNYUZNeNYVkVE8jz3NGEnZmCzXSYie7ary4
Seia9LJhFGp7BAm5XUfCHmzTct2i5gTL0BCYtTttkBeMhaEDxETRUmzWKVlJ
lfW7rCXEUmw2KFuJjaSxMJIip2IjXVQtaPj/VnWrnTr26iauBra+po4HfI+d
P3Xu/p3kkrzqPnJKdcd0WfMYtlKFUcOoWcqokXmt6RWjZnBonFCDOjYsQ4PW
Uev28z8Ue+8h6udQD01HjHR1D3R29YsNvpqViP7WS6and0iqSHs/HZ19YlNb
1wyAZGUXJD9Oj4tPvHX73sVL1yMiLwQeDQJP9voecNnjCaoYm1hS7zJNLX1o
kQbOkB9pljMrawfA5/qNO0XFFXiMtM6paOY0juz/B8ioYdQwahg1zyW3ZpKW
wsyqHCuoF5S3CVJLBi/dL3X0i7bzDrd0CzHfE2zhehoFBAVJsXIPFR+PYLGx
9jwtVWy8QiQkWGxsvU+LjYOXdHH0CZUq+05eOhh8NTDsFggTfi3pwp30a/G5
Nx8VZJZ15lb1FjcMV7ZNUh+zitYJRg2jhlHDqHlB+vpHUCG3d3ChPlFU/aYR
63ANaumRURdPh4SHhEaEnomkgtjgW5nkTFiUVJH2+vjJYnMyKPTosVMHDgbi
Kfns3e/h6evs4uGwe4+RsQWoQpOY0XgZKtCDRVDAt5ZW9ntcvWCfmDtxj59k
lFfUAlDUIoaXwqhh1DBqGDWMmvmJGkCmqFGY/LrpvNopfARz0suGL8eVXYgt
jo4piLqdj+25O4Uvzvm7RWJz4V6B2Fy8XyhVLsUVSUiB2FyOLxSba3HS5Xp8
kVR5lFX7OL8pq7wLfqFOZfU9ws5jTf1Px8XQkBkE30orGkYNo4ZRM78yx5VG
aqnZ7ehKozyoEQE1813KGqicm1vYokKuqqatoalHY0DomLkL6vxSRVb3Q09D
NDoGAVjU1HWej7qGLikGx1AZD9PC0g4COhUcdjvmPjjz/GTgEzO9GWXviHkV
mf8PkFHDqGHUMGqei2gcTWGDgMbXYFvWKqRNVuUYdIOgkF01jqCQWTEqNnTA
F5NTMzorya0dk5ARscmrGxWbwlrpUlw/LlUKagfAmYrWidouIWcQGilT0jhS
2jSK/TQbAIVRw6hh1DBqXhDUouPiE/e4etEQD6qi0wAQbA0MzVAbV1HVommH
acTNnIaaM14+0iJI2vt5MaaoIYbaZWhEkqmZtbGJJZ4b9ToDBmkcDXba2jn5
7N0fEhoRe+9hUXFFd8/g1LRwKgCaEGB0poGG2miW6JI0jBpGDaOGUTPvUQO/
ADI51RNFjQIAh9pripuErsFH7ES5tEXYLQ17UMBHscHBYlPWJj6lrdKlvF26
VHSIT3W7dKnpkC5gy/MpbxmnEGegG9GEAPiInYwaRg2jhlEjKf0Do3djHzi7
eNBoGmUVTYTaZWj0B40EMTQyR0WdVoec01BnrZcPjVJ5+czi/dABZBnwCg8N
IebgWUExFpZ2NraODrv3ODq5BZ06c/7C1UcJT0rLqjs6+0afzZM2MDhGczUj
g0PjNCcAo4ZRw6hh1DBq5idq4A5CTUG90CCFDcKPuTWT4Ay13WBLZsEefIR6
xAaHiU1xs/gUNU1LFUnXKW6eEpuSlmmxKW+WLpWtAqny3JzME6J2GRCmsU9A
S2diD/U9I4kwahg1jBpGjaS0tffcvBXrssfTyNgCtXFUy9XUdVBLx1ZVTRtb
EXCIPJJaTKhK/+UjbUuNuoauVJnF+6QmG2qLod5lhD5TM2tAxtfvICBz4eK1
O3fjHzxMLi6prG9oBSFFs+SBMD29Q6Mz6xyJ+p7xFHOMGkYNo4ZRM59RQx6h
jmcok2WoExq12mBL/dPIPtiKjSTsSEJKYeOUVJHsnUmxkYSdsibpIi2C4A5i
CwUfqXWGpFPeMl7WPIYtPormQGPUMGoYNYwasUG9+uGjx0cCTnj77PPZu9/d
Y6+rm7enlx+2zi4eux1dnZzd97h6QT0o4CN2ig2+nZVIuv5sZbbukx4LHpeX
t/9e3wMHDx09GRR6Jiwq+tzly1duAjLJj9MLCssAme6eQdECRtQ6A9fgY1//
CC2vSfOBwzXPL0kje03Mk8j8f4CMGkYNo4ZR84UpnUuaBQBLVuUYRFPaIhA1
05BoqM0FcsHBklpkaLaBL6akRXwkt7yIj6TrSGqRkdTtTdqWl6o2KdM+JQq5
hjqhiVpnyDiiBh1GDaOGUcOokRTUsfMLSi9dvhEVfenCxWuok1Ph5q1YVM7P
nb+CnL9wFXtwzNVrt69cvSU2OFgmkXQ/c32feCC42u2Y+3HxiY+fZOAZwi9d
3QO0BuvQ8ARNZQaqiJbjpLmaqafZ6LPuZ719w9QDTfQVT33GqGHUzCvUSIud
uUaNtNhJqRafeYcdCXiZb6iRhJTZiiTsSMoXm2b+MezMFmqkRtBzqHk+/8Cc
AIyaJYianoFpRGSWvqGnYdS8OAsdLxzK+IRAbGR+Y5zZCWNnQaFmeFi6MGoY
NYwaRg2jhlHDqGHUcEYZNYs+jBpGDaOGUcOoYdQwahg1jBpGzWIPo2aRh1HD
qGHUMGoYNYwaRg2jhlHDqFnsYdQs8jBqGDWMGkYNo4ZRw6hh1DBqGDWLPYya
RR5GDaOGUcOoYdQwahg1jBpGDaNmsYdRs8jDqGHUMGoYNYwaRg2jhlHDqGHU
LPYwahZ5GDWMGkYNo4ZRw6hh1DBqGDWMmsUeRs0iD6OGUcOoYdQsJdTM1qKc
c42al1l8k1HDqJEWNZLwwqhh1HA4Cz4yQs18w47MtcKoYdQwahg1jBpGDaOG
UcPhcP7ByFoxjBpGDaOGUcOoYdQwahg1jBoOh/OlImvFMGoYNYwaRg2jhlHD
qGHUMGo4HM6XiqwVw6hh1DBqGDWMGkYNo4ZRw6jhcDhfKrJWDKOGUcOoYdQw
ahg1jBpGDaOGw+F8qchaMYwaRg2jhlHDqGHUMGoYNYwaDofzpSJrxTBqGDWM
GkYNo4ZRw6hh1DBqOBzOl4qsFcOoYdTMNWqkxch8Q43E60uJmqxa8VkoqJEW
LwsdNRKxM8eoqe0QiI20eJlr1MwWXqRFTXufhDBq5iVq5rrywKjhcOZRZK2Y
V4waSf//Xr+EyAovku6fUcOoYdQwahg1jBpGDaOGw+H8fWStGEYNo4ZRw6hh
1DBqGDWMGkYNh8P5UpG1Yhg1jBpGDaOGUcOoYdQwahg1HA7nS0XWimHUMGoY
NYwaRg2jhlHDqGHUcDicLxVZK4ZRw6hh1DBqGDWMGkYNo4ZRw+FwvlRkrRhG
DaOGUcOoYdQwahg1jBpGDYfD+VKRtWIYNYwaRg2jhlHDqGHUMGoYNRwO50tF
1oph1DBqGDWMmleJnYWCmvLmaaSiRYA85cwrWXyTUcOoWcqokbZywqjhLKaM
TwjERuY39rKRtWIYNWIjLV4YNYwaRg2jhlHDqGHUMGo4nH84jBpGDaOGUcOo
YdQwahg1jBpGDaOGs6DDqGHUMGoYNYwaRg2jhlHDqGHUMGo4CzqMGkYNo4ZR
w6hh1DBqGDWMGkYNo4azoMOoYdQwahg1jBpGDaOGUcOoYdQwajgLOowaRg2j
hlHDqGHUMGoYNYwaRg2jhrOgw6hh1DBqGDWMGkYNo4ZRw6hh1DBqOAs6jBpG
DaPmJfGyUFAzW5kt1EjETtUUklE9jTzPFkbNq0HNbOFFUp4S5ouREjU17dKF
UcOomc+okfQfO2n/oz+7VQtRHWZs7GkYO4s7C77yv1izSPEi7f//JqtIuk9G
DaOGUcOoYdQwahg1jBrOPAyjZp6GUcOoYdQwahg1jBpGDaOGUcOo4bxcGDXz
NIwaRg2jhlHDqGHUMGoYNYwaRg3n5cKomadh1DBqGDWMGkYNo4ZRw6hh1DBq
OC8XRs08DaOGUcOoYdQwahg1jBpGDaOGUcN5uTBq5mkYNYwaRg2jhlHDqGHU
MGoYNYwazsuFUTNPw6hh1DBqGDWMGkYNo4ZRw6hh1HBeLoyaeRpGDaPm/4r0
SJGUucXLUkONrBbflIQXScmuGs+vm86tmSyoF+TVTt1MrAkMf3Qw5D7FP+iO
V+B198NXPAOueR+94XPs5oHT9yh0wKHQOMre47d8T9ym+J2MQXAugrNwBQou
gngcuYrgmgiVaT9lX/Bt5EDInYOhdw+H3QsIjwuMiD8a+eDEuYSgC0mnLz8J
u54eFZNz4V7B5fjiqw9L4RfQpqhpurBxCluUS1sF5e2Csqap0sbJkoYJBGVw
o7ZT0NAjKKobK64fp520bia+qm4XbvERpyDlzdO0s6bj6X7RUps4nhbcZNQw
ahg18x81c15fmqXK3vDIZF//yMjoFCreQ8MT2E4LBIND49gvNgODY2KDc8Xm
/zxedGXcAyLpeBxAx+PeEOzpHxhF6CP249zRGVNMTAojujj2j40LRPvx6yan
BNiDr54/l06nB0L76ZnM1nNm7Mg4jBqZZrbwwqhh1Mxb1JQ0C9tT4BoU0suG
T0QnmzoHGTocUzfbp2bqv8vQZ4euh4K2G7Y79TwV9b2wX8N8P0XT4gCiZXkQ
wcEIvv27A1RN/BAVY19E2WgvBZdVMvDGlkI76Rg1s72IurmvpqW/tvV+HZsD
urYH9ewO0dZwd4CJ8zELtyBrz9N2Pmfs94b5n7oFBO0/HQMEQUDHox+dupgc
ciUl8nrauVuZl2PzbieUPcpszCjpAWeAkcZeIW0AHPAErsHO/OrhvKohSIdC
qCG5IHVdwoOhGxhHZB9SEqOGUcOoYdTMSqamBQQZhD6iINoz/wORgTYwDkGM
bEJm+aKDCEcUHAbjADjYki9IPQQNXEd02KyEUSPjMGoYNYwaRs1coqa8TZBb
M4lUdwlSSwZd9l9Ys8MaWbnNYpmc6aebjD7ZaIitKH/bYEDBfsrz33622Zjy
+RYTCn0UHSA666N1esjH6/Upost+vEEH+dtG3U826X22xeBzOcNl8kYIFZZv
NV6pYLp6h/laRcv1u6w3KNtgz4ptJqu2m61TstqsZr9N21nRwH2Xkaex/SEz
xwAbt5N7/MP9jl05dvZe6MUkSAe6ySrrI8XANTBLU5+gZUBArTDPt86UNEyA
PKKeZiQahLufMWoYNYyaWUcNtV+g8t/Y1N7c0tnZ1Y9Ca1u32OBbsWnv6BUb
XEpSmpo7KPijSEtrFyLp+l3dA909g719w9Q6Q9wAXiRhh7QicgqCgynUfoSL
oEzfipppRp+19WBLTTaz9ZwZNTIOo4ZRw6hh1MwlaooahZbJqhyr7xNklI/Y
eYeTNZbLmxFDQBuUARPyy4drdckjIpI8xchzMHkeO18UDR3zdxcRnf7Rem2E
XEO0QT7drA/gUKAbkXQQQhCOwU4AB7qBdwAcORUbRF7Vdqua3XbN3Uq6LioG
bmpGHuZOgXYepzwPnTsaFht9M+NucuXjvLbM0l74paxpCnIBc+AaasehDmzU
diPqfoZvcQyjhlHDqGHUzFZlj6ruwEJxSeXtmPtXrt66cfPuhYvXzoafE5vo
c5fFJiLygticOBkiNqeCw4JPn6WcDglHQkIjEEnXx73F3ImLvfcwLj7xUcKT
pOS0JymZKalZRK229p6Ozj6RfXp6h/CL+vpHSCUAzvPeASWo9xp+O1wD0VAn
NGrNQWF0xiD01Ww9Z0aNjMOoYdQwahg1c4ya9LLh7Krx2h4BaLPnwMXPt5iQ
Mj5Yo4MtNbiAG1DJym0WqxQsKau3WyHUrIOs2GqO4IC/O2btThuEjqFTEHxF
+5F1irbIeiU7ypqdFn8XIAWBVlYqmCIrtpkAL9R2g6zeYf78YeAMZaWcAbJi
i/7yzXrP55N1mthuVLRQ1HHWs/K32nPc2TfM/UBU+NWUS3dzYx9XwThZZX2F
taNQDLXaYEs90GhADQ3PYdQwahg1jJrZquxRHy24AFjw9Tto7+DisHuPhaWd
kbGF2JiZ24iNqZm12GjrGIqNnr4Jom9gSjEwNKNIur6jk5uTs7vLHk93j71e
3v64Vf99h/cfCBCB6ExYVNjZaLArPOI8MBX/ICkhMSU1LTsvv6Sisq6xqb29
oxfeIfVANM+38oh8QbShZqDZRQejRsZh1DBqGDWMmrlETVmroLhJOKamtEWQ
WTEacPahkoE33AHFfLhWV4QaZJPKbg3z/TR2RjR8RjSCRuwAGYSOoVNofA0N
sdGxPozo2hxB9GwDKPp2gZqW/oiGhZ8o6ua+yA49V0RBx2WbtrO8pqOcxu7N
avYI0Qb5bIvBJ5v0Pt6g88Fazb+u0fhsgzaybJMuXLN6q9FaBZN1203X7zBb
JW9IH1HepGS5RdmaWnNUDNwMbPY7+oQeCLoRejHpenxRYnZzdnk/9UBr6BH2
UqvretqCQzMJMGoYNYwaRs2shAbRoKp/O+a+ja2jmrqOhqae0i51TS19sdHS
NhAbSXiRlOevJtqpo2sk6frqGrq4MRRwDDQE/kBYxiaWBCJDI3P6CEYRgog/
sE9A4EmoJyr60uUrN6/fuHPv/qMnKZmlZdUwDvBCLTIo4DlQqOOZaNDNbD1n
Ro2Mw6hh1DBqGDVziRqIprJDOJdyTvVEbs3k3ZTGvcdvGdgfXaVgSSNilsub
LZMzXa9kZ+hwbN+pu8ejkpAT0cnIyXOPKUHnnxyNSKAci0xE6DAEX4kOo7No
f8jldErolQzkzNVMyqmLyZT/x959gMV1nXkDx3bc7cSxHScuySbZzfZvN4nj
JO6yLcnqHXVE77333pFASKiAhACBGqpIAnWJJnrvMMDAFGbozFCHer//5ZUn
rAyKcZAovnn+z33O3LkzzFzY1fn5nPOeI2fTI+LTkPAzqUhY3J39sbf3Hb+1
N/pG8LFru48mBh25GhhxxdY3ysbnmKXnEWPnA7q2IbvM/LcaeAI+Ow08dui7
b9dz26LtvEnDYb2aLQizepsljKPMQyM4wA6AgxfqW++28zriH3YuLPp67MXM
q8lVeVVd4ExjO7uyBqKpFo9wqOFQw6GGQ81MdfaoJkCXrO9q4k0LS7udalqA
A2hDIynfPcoxl4cCbkyaia9SDtMoz387EA3lIQ3RGWrr6ZvQe+Kt6CQe0uiS
tY2jnb2Lg6Obt09gyN4D0TEnYZwbN++lpWcXFpVXVNaCdX39w+QampAG13Co
WTjhUMOhhkMNh5rHiZqCukGgpkzI5FT3VUuZmmYmMb0x5NitZVtsIBrlgpdV
OxwcA06eSiotFYxR8BJEuR/NVOeBJgptQ/Pt/Wvo2SrJgyg3oKEqzWWikVLh
MEK7z+AkzpQIhooaFAX1/Uh1M3sSDzMqOm/lii7eqzqRWBB1MWtPeAJU4hYU
a+l6UNvcf7OW08ot5kvWG0IuyzaZKAduVm21gHQQGr5BcM0Xq3VBHiBoq44L
gOO99/S560X51TKla7hCARxqONRwqJlB1Mjk/ejDt7bJLiUkmZpZq+3Shgjg
gumOvEwVJUYeioamHg2+KJ2itMkjpquBLbp6xgidxPUTXzgRNcqL8RT9OEht
l7oOLsMFNKxjaWXv5R1wNPL4xUuJ1TV8aXMHbsXIKEOVpYEatGfqPnOomeVw
qOFQ8/cyXYxweJldvBRNlce8yeZUUWLkoew5ekPbau9SVauvNph/ttrow2W6
6zVc7f3i8msVJY2jxBMqm4Y2r2Xam2w+7s03U4qlN7IbLt6riL9ZfOZG0cmk
/OhLmRHxKQeP3wR2bD0joBU1Q89NGg7QzZdr9MAZuAaiWbrBiNSDI9p4du0O
6y3azrqWgc7+0REn7964X1dQIy9r7KkSD9S1jDS0M0hjByPoZEQyhicdUp6E
WdBGFgBqpsLLnEPNFBhpk49OmvmFGnkfm4msmDHUTDNzDTWz1Vmaqc7e4BBb
KKy7R1FSWnU89rSjkzsgAAIoBztsbJ2CdodGHIlG5//I0ZjYuDO47MTJs6dO
n8cxKvoEToZHRE266h/BxZMGjgCjEi5fQ9A4d/7y6TMXTp46Ry9H6N3wQyl7
Qw8Gh4QFBu318Q1y9/B1cvaws3fBZ6NxH4IYQYYsQ4M+xB8clcBR8odGkUAb
UM7M3MbZxRPvfPDQ0fMXrmRk5tXzRXLQeoyhYgITZ6ZRPQFlOTVltTTF+JIc
OqM8iYeK8QLRU6FmUDE2aWZfAfM0PzC8LFTUzAhSONRwqJkLqIm/UeEWfHaj
lvsX60yBmkVrTdbuctayDDl3q+pOXnMRf5g2uAFqaI+buYYagZypbWPKxcNl
oqFKyWiVdAyNoob+5DxRUmrNmcT8Y/GpB2JuBB266Bp43MYjHMDZrOW0epsl
ILN4nQHpBqFxHFp9gwt0LAIAIrawQEL65Xsl90vE5YJeYgs4U92kqJEMUqiN
p4RdjLSX4VDDoYZDDYeaqUJjE+iBN7d03s/IhVAcHN3Q54dryALo84MSoEdu
XjHgk19QmpdfgmNBYVlhUTkaOblF2TmFeJaCZ+kCCj38diqr6qqq66tr+DW8
BjTKK3h486LiCrwVJSu7gJKZlY+kpWenpmUlp2TcuZt281bytet3EpNuXU28
CRCBIRBWdMzJw+HHYB8QzD8g2NXNG0CztXO2tLKHWeAXfB1NLX2lbmiIRzm+
Q4NB+LKwkrdPIHQDZOH9qciATN6vGB9tUYzLBahRjNdYUG4kSjYcY5iJ+3gq
i0grpcOh5rGHQw2HGg41HGrmEmryaxUnE0tMXSKWbLL8ZKXB4o0Wy7faLlW1
cgw4eSQ+M720i9fCzlXDlXBNmXDOoaaunRmfmTYC0fBamfoO1jg146XMaqVM
pXColN9fUCO/X9x8437dpdtlMefvwzjQipnTfgAHivlyjd7HX6tDNCu3mH+9
0RgPF63S+WqtPo3d6Fj6WHuE7Yk4f/JKxq0sXl51W6WoH7Rp7GDHaNAg10A6
eCiWc6jhUMOhhkPNlKHtWqgIWFu7PCMzDzSwd3BV19A1NrGEBdDbd3P3uX7j
bktrF/rtVAwZnXyqmUwbvlDfXhna7JI2vsTFk0a5S6ZyOIMqj+EpvC2FfkqX
rA/59hnl+Y7OHom0va5eWFpWDWGBP/eS75N3zp5LOHHy7LGoOCBlT/B+P/89
VtYO5ha2hkbmNDUOdqMBKVrRgyON9ZiYWkE3+OK4G3iHW7dTiksqoRt8QmXN
NEiQVt/QXDVyDaGGtgFFJg7lcKh5EuFQw6GGQw2HmrmEmro2JqNcHhp9Z7Ou
F9VA+3K92V+Waq/a4eDgfyIhua5cxNS2PhisoQlpcwo1IAxQA9EgsAxCD4Ea
2mGzsZ2tZoZ2tXikrGGgQjBYyOtOLWhKuFN+9HSyT+gZ6EbDxGfDLjsQBpBR
juAsVzVdtdXi6036K7cab9K00bbwdvI/EnHq5vX7VblVreQaKEYkY+ek1TYP
k2441HCo4VDDoWaqEEDQoI66tLnjzt20I0djqJKYvoEpdGNqZo0zJaVVcAf6
7bRfJ3Xd0S3HGWUXnTa7xBkKXTlplL195cXU85/4cOLWmcoraSbYt3fbpLlh
MBGkQ0Wb0QDT8I2EomZebSM+f25e8bnzl0+eOoevA+O4e/ja2Drh28EypBta
p0MrfXT1jGlKGxCEK8Gii5cS8Q4icQuhDD+RPgnVEyCUTZxypvhGbRxqnlw4
1HCo4VDDoWYuoaZayhLjalqDvV/cyu32n68x/nSVIVDzwWLNncYBB+JSUora
IZoqCVsWYA6ihoZmeK1s0KBhmiopW7iMwpOM1TWzqKlveVComXbbrBQOldT3
ZZe3380RJKXW2HsftXA5oGsZuF3Pbb2aLThDq2+WqRos2aD7xRrNL9dqrdpm
omHqYe9z2P/A6SvJpcn5DSV8OQ3QgDaQC2jDoYZDDYcaDjVThXailMn7abwG
x0aBJDun0Ms7AJ15Zffe1s75eOzpouIKefcAdebRaUffnqqEKcdlqBiycpyC
4DNplKM5D52nT/XQax+6TPnmyrUqSkxNRR6iB/1ckEcglBYWld+8lQzgHDh4
ZPeefRaWdkCcsYklIKMsREBFCeAaI2ML3A1HJ/eAwJDwiKi4E/HQTVV1fWub
TDnORZPT8NOVQOOmn81CONRwqOFQw6FmLqGmuGGksonJ4w3EXi40cz1Crvls
tdH7X6ov32pr6XEs+mLe/TIZ1S6bg6gpFQ6WiYbKxcO0oAZBo6JphAhDZZkR
QKZWyp4Rdj6YmUYPqZQZGtfTay/cLIk8kxJw4LytZ4SWmd9GdfsVm82WbzZc
scUIQQPAwRG0WbvT3Mp9v3doXNS5ezczawp4HTzpkLCLaermpp9xqOFQw6Fm
ytAyEFAFvX3lqhB0+2Pjzri4emnrGNJ0LPTw3T18z8RfrOeLYBlcht47WUMx
vrpk4loSxYTlJFOh5qGPobxe8Y1olKghLj3kIzpJ5yeNkkJ4T/IOBIHzSuPQ
lqO82kboJiu7AMA5d/4ywOIfEOzs4mll7WBoZE6jNrQ5Di29Id3g2cCgvZHH
Ym/cvFdSWiUSt3TJ+mh10kRkKQsIcIUCnlw41HCo4VDDoWYuoQZOwRHKyKnu
O3Y+R9dm31JVq8UbLUAbZJ26i3PQ6YTkujIhUy1lqAbanEINCFPdzA7Q1LX/
nzS2MzQDDXgBbWgnTeCluZfdYROQofEapEo0XCEYxMU4QzPTLt+tOBafCt04
+0fvMnZDdhg4b9a2g2WgG9AGAW1wxsA2wH1PdPjJG1dTynKrWmskgxxqONRw
qOFQM1WUlFA+JAIUFVdERZ+wsXWiZSbo2KMz7+u3++699EaBhEZDiA/K6WQT
hySUvfqpfu7EKWcTX/Kgq/9/P9VELk31+ZWQoTEgMI0W3cjk/bSWnxbs0PAQ
rXahV9HCfziO3yDOzSu+dTvl4qVEgAVf1trGkbb1pOVFtKsO2mbmNmAOVYQ+
cPDI6TMXcFvKK3jQDf04UowSNTRPj0PNkwiHGg41HGo41Mwl1FRJmML6ocom
prGLSS5sA2FW73Rcssly+Vbbj5brfbxCX9tqb+zlwiL+MFCDK+caasrFw1XS
MVpNg0ZF0wjOICAMOEMDMeQaGp0p5feXNQxUCofQbhy3Dy7As7QAR9jJNMnZ
NThgzv3i5uvptYGH4t12Rxk77N6q67ByKzsbbc0Os02aNjRwA+OgbWgXGHDw
TPy1nOT8Bg41HGo41HComSq0Tw1NmqI1Kejko7ONzn9qWpZ/QDCtqacFJujP
R8eczMsvQb8dKMDF1EDv/dtzzx79c5VrTx561cQhG8WEUZtHv/+3Z3kpp5wp
1+NQ+6F3UD5L88eUQz/S5o7snMJLCUl7Qw8GBu11cfUCZGhbUi1tA+X8NCqe
Bt0E7Q49E3/xXvL95pbO9o5u3Bm8OYeaWQiHGg41s42amcLLgkVNA1MoYJPH
H8viDSFoFIuYMglTImaKhOwFufWj2bXD9Gx1G1PVypRL2Zfk1I3gPK7HZXMN
NcrdMB8K0YZWzRQ3jFy6V2vlGUUz0D5dZQjdrNrhYOIcfjO7SdLHTj8rF4+C
EmUi2GG0rv3Bhphs/bFZQg1x5tupa56Z1DYPV4r675eI4xLSnQOO7jR0WbXN
hEZq4Jqv1ml/uVYLD7fo2BvZBzn4hl9Lr8ypbGloZ5r72LU2dS0jeIf61tE6
6bCgnRF1sjCplQwhaLf2MRxqONQsJNT09Y1S+vvHKN8PNbTmHd1mZW2rB73u
AWZwkBkZYcbG2KAxOP4m1GlXVsdSTnyaa6iZKvioLa1dt++k+vgGUaEwqoRs
beMYc/wUv0GsnMSFDvwjRmTmeyCU8gre5SvX94eFu7n70LQ02sGTiqfpG5jC
elQ8zdzCNjbuzJ27aQKhFPeEbhHEROtu6E9IyRn62+BQM8PhUMOhhkPNnEcN
zAKtgCdoFDQ+MA4aaRV9VzKa4q5VHrlQEH4uL/JSUczVsquZkpv57emV/Q8s
84165hdqyoTskhk8vJ0rDQxPUjMJXLbFBqhZtNbkqw3mGzTd9hy9kV3Vy+5Z
I2ane5UKh0sEQ7ADuEGNBYwannSoQtiXXdF8Jbn0UNw116BjZs4hqlq263dZ
0tjNii1Ga3eab9a2267vZOt1MPBQ/OnErNRCQVljDzgjkjGSHobfMgrUiLuY
JhlLG7AFrqkRKzjUcKjhUPPttLXL5d0DVLaXuqkPFqoPsYr5dq9m4t6LivH/
Vv9gf5N5ghp8R3zf4pLK6JiTtnbO6MBraRvQtjUhew+kpWd3dvUqa47Nflf2
sQXfEfQQN7WWldekpmWdO3/54KGjvn677R1cYZmHikKDPDa2TgGBIadOn8ct
qq7ht7bJSDcT58jRHcN5MIdDzQyHQw2HGg41cx41mTWDQApcQ5xB+0ZeW9Cx
u277Lhu7Re0wC9mo56dqELDTfK+W7UGH3ef8Im4eSyi+ntuaUzdSLHowyjNf
UAPOkGsAjWopWzEg/kZFwOFEVR1PoObjFfpADWiz3dDvSHxmQd0gfFHbxo7U
FPIHyBpo81oXLGpow82Gdra+maCTKeHLb2bWnLqa6bU31sbzgKaZ5wZ1K1po
s3Sj3pINujhu1LA2cdyzJ+L8hVsFoBBY1NTNegSuqZMOk27ACpypbx7hUMOh
hkPNt9Pdo1BOIlLOhmL/C/z4AA1c09s7guBKGrWhlR1UHEwxPj+K+rTzBTX0
gUG5zKz8ffsP6xuY7lLXwRGxs3eJOBKdk1skk/fTAMTfnWw2r6Ms3Yy2tLmj
pLQKugFbDhw84ubuY25hq6NrpK6hSzt7bt+hAeNYWtkDPvBgckpGo0BCK3po
oQ1u7P95yKFmZsOhhkMNh5q5jRrlrDPopqCRuVssi7pc4ht+A4pZq+W1dJvj
Z+stP1pt+vEas883WH2part4i/16HR9Dl8jAyDvxd+pSy3uBmtKmeTP9jFxT
0jhKpQDAjfTSrkv3ag3sD3y53uzDZborttkt2WQJ15i5HrlwpwaE4XeymgBq
KprYxSw4LuDpZ+AMXEN7a8ImYjk7dlPa0J1ZJoFZgg6fNXUK3q7vtE7NYvlm
w8XrdahC2tqd5ruM3Rx8w8NP3riWXgnaSLtZSgA11aIBXtMg2CJG57yHm37G
oYZDzSSheUS0iTxt7EILMcCZ7u6h1tZusbgdaWvrAW2Gx9ekUFdfKSD6L/bz
BTXKpe4SafvlK9cdndyVdcDQh4drTp46V88X0QyriYv6F1gAN1pnRL8++huQ
dw+IxC2lZdU3byVDLrSnJ27OTjUtmqRHwLG1cw7Ze+BM/MVbt1MaGpvaO7pp
sY9y+RLCoWaGw6GGQw2HmjmPGlpWQ6KJOJ9v7Ba1Qs3103UWn6w1/3CVyZ+X
G76/VO/3X2n/zxea//25Oo5/XKKLZ6Eeh93noq+UwjXl0nmDGvgCR6CGKpvB
NWhnVnQHHE7crOv11691lqpaUdGA9RqufgevZFR0UqmxEsEQOMNrZcWBxsJG
TXWToko8UCMZrG8dFXSyozYt/QxO3svjn7ySsSfivLVHGGgDzqzebrpii9GS
DboADtraFt4ewTEHY5NK6mQ1YoWok5HIH0w/47eMAikcajjUcKiZJOMrIGgR
PfVL0d1tkrSlpeXeuXP/6tXbFy9eS0i4cfNm6v37+Xl5ZR2dPRN3MKE19fNo
pIbWDeFr4isXl1RGHImmbWsMDM3UNXTRbw8IDElLz0b3/sFaoVnvzT6eTNzg
BrdCMT5woywsgN9yDa8hJTUTxAvaHerg6GZhaUdbeart0sbtMjG1sndwdXP3
iT97CZeBNngrGt56UOSNQ83MhkMNhxoONXMeNUVCFjV3irogGhP36MVb7JV4
+etKY/hl0UZrBI2P15h9tt7yLyuMYJw/fa2/St3dNuBM3LVKuGa+oKZM+GBl
TRF/GMfKJlYcaF+4U+MUeGrxRgtw5qsN5h+v0Edb3y7s7K2y4sZBfie7uIZQ
g2OZaNqlnucLamg/TdAGnOFJh8g1jR3sVDRhF6sbkCerXHri8n2XwEhNM09A
ZtU2k6836S9arfHZyl1obNGx17H02XP43OkrmXmVrU0ypn2AkY5PSKuTDnOo
4VDDoebbQe8dfVrqzaLvVM8XXb9xN/JYrKurr6Ojp7W1s4WFg5WVE9peXkEB
AaF376WXldd0yfqUYxkPFlPME9TQABOVI2tp7UpOydi9Zx8th4do0Gm3sXU6
Hnu6vIKHyxY2atiVL9/MGSPX0IoqmpMG8oC30EpWdsHVxJvwC+4MlRGYOLZl
Zm7j57/n7LmEgsIyWBhvRS/nUDPD4VDDoYZDzdxGDVUGSKvoO5ZQbOwWBdF8
sMwA+Wqz3UY9P5zxOpgUcjwV8T9yyyPsqrbdoc2GgV+q2oI8cM16HR/nkItH
LxbOF9TAL+Sa4oYRhMZuoJvsqt5TSaU61qHgzOdrjL9YZ4ps0HQLCL98r1BK
llGiplQ4vFBRA8gANfALQqM2lEpRP85Le5nWAQbGya1qvZJcGnspzdojzMg+
aKehy9qd5hDNkg26y1QNVm413qRubWK/e19kQmJyWUF1O69pEEKhIRsONRxq
ONQ8FOrKok+LHim6rzHHTzm7eKK/qqlpqK6uv3Onzo4d2jiira1trKdn5u7h
e/DQUcCnuoYP2lCFAbZK2DxBDUK7W9IkNIFQeu78ZXxluAbBF9c3MPXw9Lt8
5bpQ1Iz++ez3Zh9PCDITq0BT4ej2jm4lcok2+C3jLiVdux13Ih4AdHB0M7ew
NTaxxI2imWl6+iaOTu77w8IvXkrMzSvGxexwHoeamQ2HGg41HGrmNmogmvwG
5lpOi/ehayt3uf2/RRp/Xm64fKfLTvO99kFnY66WpVf2lzaxAzo389vP3q33
PJBo7Xdqq/Huj9eY/c8Xmp+us1C32g/XzBfU5NcqqEoAjkANgIM2VQ+4Xybz
CUtYtsXmqw3mX2+2BmqWqlpZeh5JSKmpHC+DhlABtAWMmtrmYarJTOM1OLL1
mcdX2eA8VWxGGw1BJ7viJv5azsHYJAffcE0zz02aNqu3mwI1oM3a7WZwjZap
p7PfkaOnbt3O5JU39AAXHGo41HCo+XbQa+3pHazni27cvBe675CVtQP6qDq6
RkZGVoihoaWBgcXE0G6VgUF7L1y8WlpWTX3geTRSo9xEhtaS4MOnpGair25g
aGZmbmNkbKGhqYcee3hEVFl5De3GslCj3EaT7gmhRibvp5EsWjwF3eAp0iv+
SEAbZQlo3CX8qVAhaNw03ECcPxYVd/tOakFhGYeaGQ6HGg413zePGyNzDSmP
Gy9TpVzKDtPsP5mxy3LfJ2vNgRpyyqH4rOu5zSVidrea3PrhPP5IQeMYGtm1
w9dzW0Pj0neYhfxxiS6uX6HmaugSeeFeXWqprLyJqWpmSkUTMTJ5posavOe0
AqdMmpLG0UlTJWEroR1PKNCxDv1oud4HizU/X2O8ZJPlJh3X0JibBfX9jTKm
upldWcPOPXv8a2oee5WzKQLCTJqpNtlEyhp7bmfXHj5x3cp9/1ZdB7hm5Vbj
lZuNlm8yWLPNdJuOg465t2tAZMLtIkE7I2gf47cM10oUddLBhtYRcEPUyaJj
plDT2DaK4KcgdAbvj8w11EyFl+miZqbyQ0PNdP89muofx+n+oz/V9WNjjFjc
fvXqbR+fPbq6pjt36mhqGsIyJiY29vbuXl5Bfn4hvr7B7u7+1tbOenpmOjom
GhoGpqa2rq6+x46dFApb8Q5DQ/NmpGbiXpx4iIZAKIXO0CGHaNQ1dE1MraA2
AOfsuQSoh6Zj0Uuo6jUMSK/9oQU3AeRpFEgyMvOOx57GHQNk9A1MtbQN1HZp
71TTgm5sbJ38A4IPHjqKa5okbTTcg3so7x7AfVNWzHuwQecETM36t/sHM9Um
pNN+q1nCy3xBzVxD0FQ/l0PNDxA1MAuQ4nUwab2Oz4erTD5YZkAzyu6VdEEx
IE9+w2hO3VCxiOUPjvkNTEpZT8zVMjPP419ssnl/qd6SrQ5qFqFnblbdzm/N
rx8ubBjNrR1E8uqG8BDHSTPVCM6USBFPL49YUzNp4A7Q5koq33VP/Dp1F4iG
Kjyv2G7tERp/t0DCa2VNAdEgT6D62XxBTWMHO5pTIxnMrWq9dKco6PBZXSvf
NTvM1m43+3qDHoLGZk1bDWN3Z78j4XHX86tayhvk9c3sXpziLhYdBBAONRxq
fsiokckURUVV4ImVldOuXXpaWkZoeHgEnD175f79fJGorbt7qK2tB9ecPn0p
ICDU0tIR14A2FhYOgYH7cM3AeLVnuGZmMkXncKZCU6oU49upKLvcnV29NEqF
njm66Oio6+mbhEdEtbR2oStOoxW0WoSAs4Croj26006sg+9qeA03bt6LOX7K
2sbRwtIOHsQd09UzRsPSyt7O3mV/WPiVqzdwGS6mVTZ4OWhD78ZWEvgms/7V
ZvD+cKiZa+FQw6HmiaEGSDl9i2fsFvX5Bqs/Lzf8UtXW1CMmNqkC2CmTMHBN
RnV/Fk+hHLIh1yRlNwccvb3FKIhKB6zc5eZz8OqBk+mxV0viEktjLhcdv1J8
Iqns5LXyU9crJg2umTR44aSJuVwwrRxPmDyxlwsnzYmrxeduVeECj73n1UwC
V263X7zRArT5fK2BoeP+E4kFRQ2K2jZ2QQ1NQuNQQ+FJh/CsWM6WRxPJmOyK
5pgLKV57Y/Wt/FQ1bICapet1l23UX77JYIOa5S5D16Onbly5W1Rc20EVnsEN
fstwnXSQQw2Hmh8yaqqrG69eve3pGQjR7NihbWPjcvDgsfPnE8vKaqXSLtqt
BunpGa6qakhJyT5wIBLq0dAwgGusrZ1jYs7U1opGR/82He4fzfiCl8cXmlhF
ZYeVq+ORhMvX/AOCNTT1duzUpK0nvX0Ck1Mymls6Fd8sO6IuPRWFnvVe9JMP
fXGSINLaJquu4cediIf+fP12g4RAjbqGLoK7Z2hk7ubuEx1zMv1+TpOkjV6o
+GabzgdTFr+ZDbgAwqFmboZDDYeaJ4aaLN5QxPn8rca7P1hmANSsUnf3OpiU
UtYDyIAwOXVD2bWD+Q2jEA2OaRU9RUJWNxnViqjLJUaux77abPfXlcagzfLt
Dpv1fTUs9+4yD95uHLjTdDfamlah6hYhkwbPThot631TZO+0om01vWzV99Gx
DtWz3b9Fz3vJJstPVxl+stIA+WiFtqquW9CRqynFLTBFlZThUDMxVCQNEaCv
3su6plzQm1HaFB533TUgUt3Ibc02U6LNqi3GYI6Wqbt7UGR8YmZ+VUtD6wi4
AYPANRxqONT8kFGTlpYbGXnCxMRGVVVNV9d0376I1NQcPl8ilw+SMrq7hyAa
dG8G2QnkY9nZxXCNoaElzVLz8wtJTs7CNXDNzGTs8WZ45MFCEupgK74Zsiks
Ko85fsrUzHqXuo6OrpGWtoG1jeORozHot8u7B3A9+uHUA39Qwnq2e9FPPsAg
1crDHaPKaTgDsBSXVF68lBgcEmZj66SnbwLRKLfstLSyDwgMiT97Cbe3rV1O
q3gU47UaaP9WZY2CWf92/2A41MzNcKjhUPPEUAOe7Dtxf5229/tL9T5abYpG
YOSdgkYms2Ygjz9SLGKnnNEwTaGAgXFy60fHh2xGT9/iWfme/Hq7EygEEP1l
md4XGyy+3mr31Sarz9eZLVpvjgbyyWrjSYNrJs1iVetJs2Sz1bSyVHXyACyT
ZvFGi+VbbZEv1pl+uEwX+Wy10ZfrzT5Zpbtiu7W1dyTVdmYnnjWNAR0caihN
3WwxNKCmuklBozaUwpqOq/dK9x65aOG8d7uu4+qtJis3GwE4S9drb9GysfXY
H3Hi2u3M6orGbnEX09bPranhUPODRs3584kBAaEQytatGvb27hcvXqNlMiDM
8DA7Hwyu6e0dUaIG7Vu30lxcfHR0TPT1zR0cPGJjz5aW8pT1Cv7RjBeIfnxR
js4oxheJUNca7dKy6rPnEuwdXCEaWvxuYGjm6uadkZnX2iYbGX0wVwqd8B8m
apRTxZQewUOaV4Yz9XxRalrWyVPnAoP20n6dyiEb0AZ39dDhyHvJ92vrBCPj
bqX7SaM2dP/nezjUzM1wqOFQ8yRHakLj0mGZv6ww+mSt+WoND9/wG/ALorQM
DdkUNI4BONm1w0VC9njyRrWlzwlCDbtB52Ktj1cZQSU4Ajh/Xa7/4QoDHNGe
NLh+0vxpifak+WCp1rTy5yWT54PFmpMGflm01uTTVYYfLddDSDSQzqJ1hktU
zdTNA0JjbqYUtwA1VC6AQ83E6WcN7QwtrlGWR2vtY2olQ2kFgriLaV7Bx7XN
vICaRSvVV6jqL9+kt3a7iY65p//+E1fuFlUKejjUcKj5gaPm0KEowITqA+ze
HZaenieTKYAaHMEZ9g17RxDiTGdnP56qrm48cCDSyMgKqDEzs/PyCoqLO3ft
2r2ZyfU7jzUJl68lJt26fuPuzVvJyI2b9xA0cP7I0Rg7exddPWNlRS9jE8tL
CUkNjU00ykNdcXTCf4DTz0C5iZuu0iALjbzQrDzQplEguXsv/eCho07OHriB
CG4mUKNvYArpBO0OjTl+StzU2iXro9loNKmP5gTO+hf8B8OhZm6GQw2HmieG
mtz60f0nMzbq+X28xgxZus3Rbd/lPP4YOAO8UJWALJ6CZqPhDG3Web9qgKaf
Ld5iT9PP4I5P15h8scECrvlktfFna03RwJlF680nzZLNNtPKYlXLaWWqEZlH
jOAANWSZrzdb0ww0IOiL9UZwzWo1Ozu/6EvJ1VVSpq6dKeQPcKihVAj7aiSD
yq1tBJ0PqkBLuxmJnC3gXFInu55WeSD6qpljsKqGzcZdFqu2GC5ZpwXa7DJ0
9g6JOXctO6NYyKGGQ80PGTW+vsGAya5dejhGRZ0qKanp7h6aOFJDxaKVi2tG
Rpi2tp4LF5KsrJx0dU319MwMDS0dHT3xcGZi7fBYY2pmjZiZ21hY2uGhtY0j
xdXN28XVC09p6xjSDiy71HXQJ98fFl5QWEb72igLdlHpgB9UunsUpLkH2xKN
T96jBUqK8a08ETzV3NKZX1AKMwaHhLm5+5hb2EKIVHjBxNTK1s759JkLaenZ
oA1BgEZquOlnf8tsK4ZDDYcaDjXfLwWNzIHTWaoGAZ+us/hotekXm2ycgi9A
OoUC+GUEoUU0xSKGhm/wEO3U8t6I8/m6DuFfqtriVZ9vsNK1O2DmfszGN87K
+zhi63fCzv+ktU+spVfMpMHFkwavmjTWPjHTio335LH3i5s0jgEnrb2irTyj
HPxPOAWeMnWJ2KzrRSM1n67W+2qjia5tSNzVfKCG38kU1PdzqKFIeljIKDey
oVEbdgRnfLdN0Kall7VJZklTVPxdj93RG9TM1243WaGqD9es3GygZeruuScq
4sQ1DjUcan7IqHFz8zM2ttbSMgJMzp69UlMjkMsHCTJUjgxtGrLBUSZT0Fqb
5OQsXA/UaGsbq6np4uUzFm2DxxoCi4amHoIG2KKja4TGtu3q6HgjStSoa+ii
AencvZeu3I6HZkz9AEdqlItoaP8a5R43tPy/p3cQ52lCGpEnNS3rWFQcjXwp
R21wP8HGQ4cjc/OKOzp7iEU0ADTrX/AfDIeauRkONU8ANbOulSeMl0dMP4u6
XGLiHv31dqcPlhl8tt5S3+nI/pMZKWU92bVsrTOoJ72y/16JPK2iD2fy+GMV
zeyZPdHJm/T9P1lrDtHgtc57zu6LTYlOKIy6VHDsYv6JpDIk8kIe2tMKXj5F
8qaV6IuPSsylfIqyKlr8zdLoS9kxCTknkwqBl/AzqRYeER+v1Fm01gT5cr3Z
GjUn95BzebyBFgVT3DAyU6iZrU0261umyPT3qZm81PM4SeqbR2olQ9Quru26
k1Xrs/e4hXPwFi2bZRt1QZtN6pbqRi66Fl7RZ+/h2YrGXrwEEmnuYfgto/lV
bQ2tI8QT2uCmvhnvNjpd6Qjn3uabHGoenR8aary9dwM1GhoGhJrKSn5X14Bi
fAUNQYamn5FxRkYYoKa7e+jWrTQ7OzcdHRMlagCcSYMLJs1U16PrOyuhoZmd
alqaWvroexsYmtEmpLZ2zhFHouvqhbR4ZICtT8zuUDnrveg5Hnn3QD1fdOt2
yv6wcFplQ4uVYEkTUyt3D9/omJNFxRWK8VEe2gsVLKISc9Smp2b9i3zHLFTU
zHfszBZqpgqHmgWMmjIJc7uwc3fUvQ26vv/7pdb7S/XW6/jAOJfShHeLZRBN
uZQpbWIHaHCsbGEHayCa44nlVAUa1y/eYr/ZMPBSCj+tTF7YMJpXN5RbO0g7
ZubwFFNtvjlVprvJ5nQ336TQnjV/E0cTO6Msv66vRDBULh4tFQ5nVckOn07Z
auD5xTpToAbHFdvsrL2ib+VIGjqZUsGMbb65UFHT0MoGQqmTDgva2aloQEpp
vfzqveLwuCRrt1BwZul67eWb9DaomW/TsTN12BN69FJyLh+vknY/2JGTNrLB
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
OIP+JKHm/IUr032fJknb54uW/Oqf/gX9cNpppbqGj756U5NUJGr65JPPli1b
UVVVA1ygvwvUgAOhofv/+tePXnrpFeQvf/kwJCS0ro7f169okjSDGNk5eX98
/4NXXv2JylPPqKg8TXnhxZd/8fa7S5Yu2xu6XyAU46dQMTGa2UUFwfAQvXpY
Bu+/aNGX77zzHl74xhs/U1NTj4yMamltH98FZgSiwc+CcS5fSfy3f//P5194
6fd/eD8zK4ftSA8OFxWXvvmzn9MPff75F5999nk08DlxfOqpZ1544SXopqam
9o9//NOrr/4EwXlcgytffeX1p596/ic/fvO9d39TVlrd2zNIy12mum+0hwuO
4FhhUTlUYm3jiF+EvoEpevjmFrbHouJycovwjfAF29rlNbyG47GnnZw9AAQz
cxtcgOshAujG2MTSwdHt4KGjKamZEmk7FRObLdTg61RU1oZHREFbyn1dg0PC
8vJLGhqbABbalQYNPMTJwKC9ZB/QBg2orbyCx06f41CzoMOhhkMNh5qH0tbF
pGfzn3357WdeeSMlr6S5l8mtaGnuZpq62EabgknNL37q5Vefeen1+7k8WR8z
zpnn//2//vT8y2+++OovWDU8hfz4w8/XRkRfEkgGW2QMXzJY0dhbJVSg598u
Z1Izec+88N4Lr/66oEykGGNKqyXNnSMqKq9RXn/7P3D8cNG6vFJhvbj3Zkru
f/3xk7d//Z+JtzMGGSYi5uw//evvn3npzdsZJY0tis4+dqSDL+pvFHU/8zzw
8uIjUPPM8288++LPnnnx5ypPvw7ULF2rEXf+7gyiRtCOF46gTduDSrvZY26J
+MDRi5oGzoSa1Zv0t2vamNkG7N5/EtkTdooSfOA0ZU/YyUkTfODUtBJy8PSM
5HD0+ZBDcU5ee7eom0Ao2zTNTGw8LySlCVr6wRlaFCPpHG6WPeAJdCMfZM8k
Z5UHhB7TMLAFarZrmdu7B2UV8WAZSedgW8/Y+BAPWwONQw2HmoWEGpm8Hz1P
9CTRkabCzl7eAWfPJUz3fdDrfuPNt1VUnv3nf/mPO3fTlNzA/8RiCemgtLSc
BjgqKqo+/fTzN998Cyefe+4FIsPrr7/50Uef5BcU0ahEQ6PwxXFE/O5f//2N
N9+Cbl798WtK3bzz7i/9/AMnokY5NoRcv3F38eKlIMbTT//opz99g2BCPw6v
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
S+wyxmrPlGUDTOjuVhGDvPadN0AZqp4+XORlY47/U08/S+zw/Avf/vaLL2P7
6dRpF7MvG81gLex/ij3TGL1FXd19zzz7bUgu79JodLhgbm7+3/72D3oAqkjw
q//9TXlFFdWO/unPfoEZiVSm0epLyyq++eTT//vr39KnlHGjVg8AvugBDIah
wUEGz4yLd3bKJZLON954k3AGn373u98D1Dz91AtYhO+89r2+Xi2pRzXwkPAz
EA2+gt4+LUx68trAwsetL1y8Gha+ytLKnsqagVPw7YBTXFy91kRvuHW7gCBI
1TMAWKABBeDt25+JU3AwtvhOqcflfy7celiNdDweGERGx+BFbt+5i4ekeDNy
zZh8NDSJFcAb4b2i124EvpFDis3t4qDmkdaYQM2ojflRHj8ivIz2+pMEXiYL
1FQJmGE1XlBT3mIQqZkbpTLXkG3vzXL5cK77Z+a+ny7wtvOL23X0dil/4EGo
qREOjZhT066tFRraFEy7nLl1tyMyevdbb5u/8K1fPffCz//69rzI6J23CltY
N4SKaZQa6kTaKU++/uNfv3Mup1yiZiralB29TKNc16TQ3yxt+8N786Z843Ub
z1WNYp1cy9QJBpok+pp2NbY4vb2bKaiRxO868dkCx1d/8ucnX/nZ06/94g/v
zV6XvA8M1jnAXCmof/lHv/vB//w9t7xdqWcaOoZapGxiDoClWaKZ8twbL/3w
tyWNijY5097JFFdLv/2d/wYimYqP1bX3gbyu32168xdvTXnitSlPfmdYjRZq
QCsjqaXTIO1jHTQ1rT30DPmVgqTtR91814JoZpo5zF3ksszGP2rdjqOn74xV
882v1mrz3++DA2zpkGmu51Wt3pgy29z2w8/NrZz8Mb5wvaiG10mRZtR2k7im
vXNA3G0orm5L2nHQ1jVoibUHjrd2DtiadrhV0qthGAo/kyj12O3VjzPUdPXd
U7f6nsYLakb1P51xhxqTraLV3hMHNSQYk7v37KcSVZTEARP0K0AN7FIY8998
8jmxREE9a2BUY+bChWzy1EAUivaDH/yI5QhJJ3apvDOEAXYx+exzL/zs579U
dCnVRhR68aVXqLOMTj+4YWPck08984c//rm2roGIg+Kv8AowjMlz0djUOvWz
mbhvS0sb+VNOnDj56aefEc4899wLzz3/rVdfe53KQa+JXvf6G2+avD/fNFYw
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
Fbv2za+vywbd0JdsMDQYjVb8QWhsZOiGVqLhpp/dc+Kg5q7Cxd3R3YKRewVS
WoUXRStqBWrEBoZKDp7NDJq5ClADnAHUAG0ANXuOXy+XWSg5AGUJYHdxIhin
TNqAAg4dv1Iw1i1ipFPIT6O9vx7iOmiMT/CMVftPpBVU1/BVthZVLqkXqJsN
jTaesvF6nkiss6nrbWeuFoFWuj7y1Lxlm4TK+gqRXqCo27A9EZU9+r+wdc9x
YA64BuY6k9i5Sy+oZ78XACDQw72fHTLSNS7+SEGZTGWwaU02B4d+UGGFBmeV
8gxSjU2mtQnkFr/Q+ah/9pUPU7P5OFQlrhMqrNWSehzV1DINTpzP8vCP6Tfg
baaHbn0c7u/pcF8PqEv3/l/+OGJjfEK5SP3R5z/3ffzNtZsSKwW1co0NkqkZ
7U44i8H89YOv65uY5AN2qLHYR9hPIG3QAZ1UzRAK2GX679K9FfWqlhoxvBKe
GrcMVAGziNUNrUGNupbJpYBTjFYGai6nFgIDHV38HV18R0/yGjF+imdg5OLV
WzZsT4jbdXjfkfPb951sl7btPr59zwnSjr0nofh9p9rUiXZp2+6jO/ef3L7n
2Jadh3cnnE44enHjtoToeaucpwSPc/aFwiIXHD6ZBFw1NthkmgaabKbQmCG1
3krxNXUW2/7EM1ExSwA1Lu6B4Jq1G3eJZDWW5g6DFw5q7gxG2Gk/ZDuZb/2M
TAuvsD8ao0A2J03puf33cPbH8E4l8r9QQmYYt9k5haASWgeEsgEvXLQ85doN
pUpPYNKacUuT086euxwxdQaIhhIFAGqWLY9Nv5FD85comsZ868d2Tm1AAd4F
UQbxJvsJERsCVbBFG62u9mpK+ua4HYFB4b5+wXjgk5wm4/XFrtmYmZXfRra6
jrqvP1x/MLxwUPPniIMaDmo6rdoLNWATQE3CmYwWoYawhfI5Y0sZA34BNTh0
7HL+r6HmwMn0Qp6xNahR1dnyKrVQtcIKnDHZbJfSK4ZN8O/31Osf/PPHxJPJ
Zru3QqZrPJec88UPo2DkewXNTMksU9bYtHW2U5cysDt4lCt44aFez3z6xZA5
i9an51Tp6xiOUOqb03IEL7z+yd8+GpiSUSVRNxdX6YhowC+7D176x2eDH3vm
L2FRy69n8Yh3+LIGNNDVMQLgnL6Uu3DFDs+AWf2eerVH/+cefeb1L34YMXfp
+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
HBEcEhkeEQO+xSekJqek3b5zPy39QVFx+dOSyorKZ8+ev3z1urm5pf19W3dH
Z59oZhGKmZ1bgvKWVzbxxSU7n2qvUb0ybqEfqggtd2X84DDUMNSchzDUKGB6
pzYGhNvcQjBgBZVNpirK5B2u/hidKRfU0NgzbHvG1zILXhjZBvx6zWSvCLMF
YKJv5R2d8ujl+3EQZm5DhhfwZFCwCcvQUjU0vwauKa3riEzK0bXwpP4dmEjd
yNnI1i89t7qpSzCzJkMTKETdNGcINdwcfwotLjM5s8P10dAaMdgBQ4b5y9Uv
2ooqX6dnPw2NuWPvFqxjwruqbvKnkh4IA84oa1pjC8uY2fq5+twMCL+dmVdZ
UfeuZ2QWkNmSytbTxJ3BIuoGonLNYA62ggXJuGidoYahhqFG8XNUIxBNcZq6
TudQ9WNaeoaaiLROpWTnL9TgXbTeqYoyjrx42VRaVn3vfvbde1nQwa3b9yCF
hMRbcfEpsXHJIMOdtAwK3kXS72YiqbfuHhpA49DATYcmKfkOgr9ISUlNp2Rl
P36Yk//ocWH+k6fFTyvKymsAlqrquu6ewd6+4cGh8dEx/hR/BmaB4Ki2M+0s
LW9Q+WiqPr1/aRuqHb21V/lN8rlkGT1ebn1PuSvjB4ehhqHmPIShRgFDHTTc
tBq8pHrLdJx6cLgjcpxTgwwJJe8HFgqr33uH3bmqZfefK0aXNWwua1hBNIE3
7hVWv+udWIVKaG0auAaQAUxo1Bl4giNdo0sJd4vsPaOVdOygIVyrrGtvxgvy
j0pveDc6wN8QrUrJMrgJ9mnc2plAzdzKp/Vlxqe3IZqZJdn6MuINKVUhA2SG
ppba+vi1rzqyn1Qn383zCop19AwztnZX07W6rGZ0SdXwmoapirbFJRXTK2rm
oI2+mbujR1R0QnZOQX1VfSd1xxCOuPU0p+a2uK4ZvOTe/SGLbDLUMNT8FYaa
k0UNdTSIl9bRmKem+9bnGTRcnWHJzsH1LpdXNmn+CPaF0/PTooXhkcmh4Yn+
gdGe3iGqrtz6vouKOVNACaSvf4SCcw7NUaWe3za3HZr2jl6ko7MP4W7S1T0w
MTkNswiEc8QWfEF8ZliMZgkduhbnl2t9IvT0uOdAj2J/gWvuBHpL7sr4wWGo
Yag5D2GoUcBMLX1aTaZfsNXH38SWJtdw2MGWY8hXSjH/gDk1/VObZfXdAdH3
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
E4YaFrlH7iphqDkTqIE7oBKE6jbT4LGv1AqAgAgy2KE1OgEiXIuXFLob1wFE
L7/M/uFk+3NUI5+TC4cXQsT+oWj7T6BuGu5M7j5c1wwIc2CKDc2moUFruArH
cRpDDUMNQ82XYahhYTk/YahhkXvkrhKGmjOBGpAESCGegCRgCF7yxV8r6YyT
qVOGJtfgDge6ab6np+Yo7HzJGRLEge4YDgWEmi9D49D2T7ehq8g4FJpQQzJi
qGGoYaj5Mgw1LCznJww1LHKP3BVwztEhL9TQCpvfn69UPzuRHIWao7J/ONn3
5Bvm/p8qao6aW6RoqDkpvJx11ByFF4YahhoWlrMeuf1PjOGF5e8id2Uw1DDU
MNQw1DDUMNQw1LCwnIkw1LAobOSuDIYahhqGGoYahhqGGoYaFpYzEYYaFoWN
3JXBUMNQw1DDUMNQw1DDUMPCcibCUMOisJG7MhhqGGoYahhqGGoYahhqWFjO
RBhqWBQ2clcGQw1DDUMNQw1DDUMNQw0Ly5kIQw2LwkbuymCoYahhqGGoYahh
qGGoYWE5E2GoYVHYyF0ZDDUMNQw1DDUMNQw1DDUsLGciDDUsChuGhZ8jY/PS
Q3N8p3w4NPJCylGLY/60eDllpBwfL8dbTFN8QllaO17khZfjouak8HJU5P5/
UA7k50bNtkSKUDNvZ1cWubc2WVh+QM46Xhh2fuIw1PwcYahhqGGoUZww1FAY
alhYfr4w1LAobBhqfo4w1DDUMNQoThhqKAw1LCw/XxhqWBQ2DDU/RxhqGGoY
ahQnDDUUhhoWlp8vDDUsChuGmp8jDDUMNQw1ihOGGgpDDQvLzxeGGhaFDUPN
zxGGGoYahhrFCUMNhaGGheXnC0MNi8KGoebnCEMNQw1DjeKEoYbCUMPC8vOF
oYZFYcNQ83OEoYahhqFGccJQQ2GoYWH5+cJQw6KwkXtrnOXQHIWU4+a0kXLa
qDkreDkuauS1mKaioea4eFE01MhrkU2GGvlG7q3KYzU+f0Z8fTgicv9g5yIM
NSwKG7m33lkODUMNQw1DDUMNQw1Dzfc3PhlqWE42DDUsChu5t95ZDg1DDUMN
Qw1DDUMNQ833Nz4ZalhONgw1LAobubfeWQ4NQw1DDUMNQw1DDUPN9zc+GWpY
TjYMNSwKG7m33lkODUMNQw1DDUMNQw1Dzfc3PhlqWE42DDUsChu5t95ZDg1D
DUMNQw1DDUMNQ833Nz4ZalhONgw1LAobubfeWQ4NQw1DDUMNQw1DDUPN9zc+
GWpYTjYMNSwKG7m33lkODUMNQw1DDUMNQw1Dzfc3PhlqWE42DDUsChu5t94P
NuZnjxe5f+BTwsjPipTTRo28kHJklj4cGvnh5XCkHBcvx81JoYbhheFFESL3
VuV3h6GA5e8j9/+hMeywHDdyVwBDDUMNQw1DDUMNQw1DzQ8MQw3L30fu/0Nj
qGE5buSuAIYahhqGGoYahhqGGoaaHxiGGpa/j9z/h8ZQw3LcyF0BDDUMNQw1
DDUMNQw1DDU/MAw1LH8fuf8PjaGG5f9v7451ZKeCKIr+/7c+QCAeAQEPYtB0
m+ou+xy3lrTDCWrKc8d3RZ4WVwDUQA3UQA3UQA3UXBjU6Lj4QYMaTYsrAGqg
BmqgBmqgBmouDGp0XPygQY2mxRUANVADNVADNVADNRcGNTouftCgRtPiCoAa
qIEaqIEaqIGaC4MaHRc/aFCjaVNEtNWGjjlSZqXwcjZq7o6Xto9pfvv9x5fd
BTUpvLShJv6C+J99Kmrit8q3e4SXu6DmLnN+ZvEDWI4a2CksrhKogRqogRqo
gRqoOSGo0evFDyDUaFpcJVADNVADNVADNVBzQlCj14sfQKjRtLhKoAZqoAZq
oAZqoOaEoEavFz+AUKNpcZVADdRADdRADdRAzQlBjV4vfgChRtPiKoEaqIEa
qIEaqIGaE4IavV78AEKNpsVVAjVQAzVQAzVQAzUnBDV6vfgBhBpNi6sEaqAG
aqAGaqAGak4IavR68QMINZrWdmlvmyfXuR/Z3MLIFlJug5cQUh7107hz8fLz
9x9f9ssff39ZG2pSePlU1Ex/Hl5e7Wy8fCouPvX3mpXXCuxoqTZEtM0DNVAD
NVADNc+DmnRQs7u3+GCXllcJ1GipNkS0zQM1UAM1UAM1z4OadFCzu7f4YJeW
VwnUaKk2RLTNAzVQAzVQAzXPg5p0ULO7t/hgl5ZXCdRoqTZEtM0DNVADNVAD
Nc+DmnRQs7u3+GCXllcJ1GipNkS0zQM1UAM1UAM1z4OadFCzu7f4YJeWVwnU
aKk2RLTNAzVQAzVQAzXPg5p0ULO7t/hgl5ZXCdRoqTZEtM0DNVADNVADNc+D
mnRQs7u3+GCXllcJ1GgpiNhFx9kYSaFmCym3wUvZxzS3ULOGlyXUpPDShpr4
i+DNoCZdCjV3RxPUPCuvFajRMKiBGqiBGqiBmneCmnRQs7u3+AOtKK8VqNEw
qIEaqIEaqIGad4KadFCzu7f4A60orxWo0TCogRqogRqogZp3gpp0ULO7t/gD
rSivFajRMKiBGqiBGqiBmneCmnRQs7u3+AOtKK8VqNEwqIEaqIEaqIGad4Ka
dFCzu7f4A60orxWo0TCogRqogRqogZp3gpp0ULO7t/gDrSivFajRMKiBGqiB
GqiBmneCmnRQs7u3+AOtKK8VqNGw6eX8LsXVUFIKL2cjZQ01v/71ZSmkfPvt
66Z4SaHm0cc07/6RzS3UfP9zVvwF8Z/G7/H4bacdL1MstOElNWdq//E/mIrg
BXZqi+sDaqAGaqAGaqAGagqwADWdc3YFNVBTW1wfUAM1UAM1UAM1UFOABajp
nLMrqIGa2uL6gBqogRqogRqogZoCLEBN55xdQQ3U1BbXB9RADdRADdRADdQU
YAFqOufsCmqgpra4PqAGaqAGaqAGaqCmAAtQ0zlnV1ADNbXF9QE1UAM1UAM1
UAM1BViAms45u4IaqKktrg+ogRqogRqogRqoKcAC1HTO2RXUQE1t8Vu3Rk2R
8ql4mX5M8+FHNkN4edRd8DJFzd3xMkXNo/+3UAM1/64NC5+KmrvMeY+gBnZq
i9/SNQpqoAZqoCYV1GzXhgWogZrjoAZqaovf0jUKaqAGaqAmFdRs14YFqIGa
46AGamqL39I1CmqgBmqgJhXUbNeGBaiBmuOgBmpqi9/SNQpqoAZqoCYV1GzX
hgWogZrjoAZqaovf0jUKaqAGaqAmFdRs14YFqIGa46AGamqL39I1CmqgBmqg
JhXUbNeGBaiBmuOgBmpq+wedNVWn
     "], {{0, 719}, {1095, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{427.01406250000014`, Automatic},
   ImageSizeRaw->{1095, 719},
   PlotRange->{{0, 1095}, {0, 719}}], 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
0CpdfiBdLkEDazFbixcAgHS4Vtmipb20xAEAgFap1tR0t/5GA2sxW4sXAIB0
uFbZoqW9tMQBAIBWme6Nqemaai1ma/ECAJAO1yo7NLWVplgAANAo070xNV1T
rcVsLV4AANLhWmWHprbSFAsAABplkjPo+HMaWIvZWrwAAKTDtcoOTW2lKZZb
Mv23MwAAwpLp8xyarlvWYrYWLwAAqXCtskFbO2mLx8l0zTkAAGFKdX3Sfr2y
FrO1eAEA6IzrlQ3a2klbPE7HmJiPAQC0sJgzsBaztXgBAOiMa5Z+GtvIQkzM
zQAAAAAAnWm8P9QYE27TmlewFBP5GQAAAACAo/X+UFs8uJPW9tEYV2/2AtQW
OwAAAAAgWJnsTxb1AX00t43G2DKJiX4PAAAAAMkUdd6F3IxNmttGY2y9iYn+
DwAAAADJo/VeUFs8aKO9XTTG19uYyFECAAAAQPJovP/TGFPSWcgVaIyvrzGR
nwEAAACA5NB476cxpiSzkiPQGGO2MZGjAQAAAID403jPpzGmJLPSHhrjzEVM
rHOyobGmQSqOXZILu8/JpUMXpbaqpv1ca3OL3Ci/7s+5o+pkhbS2tLafb6pr
lKqyipSfdZobm6Xm8g25/t41/7MAAAAA4kXjvZ7GmJLKUltojDWXMZGf0e3a
uSuytXi9zH/8RVn29CI5Wnqw/VzdlVrZN3eXP+eO9fmrpLbydv6l8vhlWZf3
mj+36s/L5eK+C/7P66/WSdn647Jl1Buy8g9LpfT3i2XT8LVyct0xabjREHoZ
cynqvea1HAAAAICjcX6oMaYksnb/oDHWIGLi3k6n6gvXZO2glTLkA/1kxIND
ZHX/0vZzlScq5NWnF/lz7pj+7Ylyfue59vMu/zL+8yNl6N39ZPZjU6WqrFLq
r9XJwcXvyIvfLZGij+a1f3b4R/Jk1g+myIFFe6WlqSWKouZE1DkR7QcAAACS
ReM8UGNMSWPxHkFjvEHFxH2cPs31TfLO3F1S+MBgyb93gCz6xWxpqK73587v
Oiezvj/Z517cMfFLxXJg4Z62zzU0y755u2XYhwb5zy7/3WL/Z+++dUZmfm+S
FHxwgEx8tFhKn1ksL//3l2TMXw2TYfcPlPk/m+lzPpbRf3uXowIAAEB8aZzz
aYwpSazeC2iMOeiYuHfT5czmMin5ylj/fMuM75S0r01ya5Ce+0yRDP/IYCl+
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
+o9LOQAEw2K+wErM2b4XAEDPGE+2xK296q/WyfZxmyTf7QvzSIHfL6a2qla2
jF7v1znN+dE02VS0zq9reunH0+X6xWo5u/WUTP7aOMm/b4As/Pksqbt5r+qe
pXF7Ce+cul1OrD4iLU1t+/66e971Q1f53MzYTxXKtrEbQy9j3NosKXLZbrne
99r178qTFbJ7xg5ZO2ClrPy3pX7f67cnb7t5/rzPYYalN/XEWIhWHOo/DmUA
EAyLuQIrMXcXo5UyABYwjmyJW3u55wOOrTjk1y0V3D9Qljw5Xy4fLpfSZxbL
iI8/K6//aZl/lqbwgUEy7VvPy5ktZXJ46X5/buRDQ2Xd4JVpf3fjjQY5vGy/
TP3PE3xuZ8p/Gi9lbxwPsXRt4tZmSZHLdsv1vtfuM6v+/Ko899fD/Z/f2vfa
jaOl/7LAP0sWFnIzdsSh/uNQBgDBsJgjsBBzJvFpLwNgBePInri1mVurMfux
Kf7+ctYPpsihJftk9g+nyrjPFvnnAE5tOO7XNj3/xVGyY+IW/5yN3x/4/TVQ
qbjnDvbN2yWzb/6+gvsGyJi/HOafn3HPKIQtbu2VFLlst1zue+3WL+2csl1G
fSJfij7+rMy8+Vm3nm/m9yb5n3N/tvIPS9p/fxhY12RDHOo/DmUAECyL3xOa
Y84kNnIzQG4wjuyJW5tVn78qa/qv8LmZyV8f558vcM8JuP8+ueaovPfOeZn7
k+n+XnTJUwuk9Pev+HtYdz/r9vDoyD2Hc+V0lWwZ/YZM+tvnbt4H95dxnymS
9UNWRfKOJidu7ZUEQbRZrva9dn3ePV/m/mzKN8bL8VVH5Nq7V+XAoj0y6W+e
83/u8jRuX6awkJuxw3obWI8fQPAsfk9ojrk3z8xoLQNgBePInri1WVN9k+yd
s9O/59rdf7pnaNx/u2do3PqNq2eq5LU/LvV7A5d8day/73Tnl/1mof/sLW4P
jksHL8qq//WqjP2rQhn2oYF+HdObEzb7e9eoxK29kiCINsvVvtdXTlX6PZhe
/u8vybaxG/xewY7L9cz76Ytta5/c2DlZkdP4u0Nuxg7rbWA9fgDBs/g9oTnm
7mLrnJfRWgbACsaRTXFrt9ObTt68Xx3j122452PcOiT3vqWmuiapr67z+RV3
z+meLRj9cIGM/fRw2T5+0x2/w+Vx3P40I/9iiIx48FmZ/7OZcnjpPr/fcJTi
1lZJEESb5Wrf68baRp+fuXz4os85ut/r3t/k1v9N/NJoKfpYnl/T5MZOWMjN
2GK5HSzHDiAcFr8nNMecLrbO+RjNZQCsYBzZFLd2qzhaLq/8el77fqgjHxoi
awe27fPb2twqh5buk6KP5rXvyeHWcpzacKL98w03GvyzN249iLvPdc/XbB+3
0e8dfHb7aX+8+/YZv94pbHFrqyQIos2C2Pe64Xq9HF1xUBb9tzky6W/GSsEH
B8q0v3teTqw5mtPYe0JuxhbL7WA5dgDhsPg9oTnmVLGlek5GcxkAKxhHNsWt
3dweve791kPv7u9zM+M/N1J2zdjRfv705pPywpfH+HNuD5n5j8+Umks32s+7
5whW/Osr758f4J+rmfOjqXccC34+S3ZOezP0ssWtreIuyPbK9b7XtVU1sv25
jTL8I3l+7Li+7/ZZcvtgd1zvF4be7BWIaFluB8uxAwiHxe8JzTGny8Gky9cA
6DvGkU1xazf3TMHR0oMy+uH89j1OT228/VxM+f4Lfo1S+zuI+5Xe/NDtz5/f
eVZmfndS+3M3qQ73/ppVf14eetni1lZxF2R75XLfa8etW3J9f2vxBnn1ty/7
d2q79U8zvz9Jzr15JpAypENuxharbWE1bgDhsfg9oTnmVOuWulvjBKDvGEd2
xa3t3Hqjt0q2yoaC1bJn5lty42J1+zn3Tuwjrx7w57aN2yhnt5+647NXb372
7Ultn013bB71hpxYcyTkUsWvneIuyPbKxb7X9dX1fn8Ztx7q+vtjpLW1VSqP
X/bv0nZ5n7GfGu6fuQkTuRlbrLaF1bgBhMfi94TmmDvmY7qLU3MZACsYR3bR
djbQTnaE0VbZ7ntdfuA9v9ev259p59Tt7X9eU3FDNg1f63Mzt/YaDhO5GVus
toXVuAGEx+L3hOaYM8nLdPw5AH3HOLKrp2cKM81zI1jUvR1htFW2+1779Xvf
m9T+bif3/ExTbaOc237a76l0a7+m3R32awoDuRl7LLaHxZgBhMvi94TmmDO9
j9BcBsAKxpFd3e3N1dOB8FDndoTRVtnue+3em+32rBn2wYH+uRr3zM26wa/J
wn+c3fYczv0DZd5PZ/h1T2Fi3maPxfawGDOAcFn8ntAec6bPzGguA2AB48iu
jm3Xm3WgtHm4qG8bwmqnbPe9bq5vkjNby2TRL+dI0cfanq/Jv6ctzzP8o3ky
54dT/fuf3N8TJnIz9lhsD4sxAwiPxX+PtBIz//YLBI+xZFeq3ExvP4fgUd82
hNlO2ex77bj8zIU978rW4vXy2h+X+Xc6LX9msWwasdbneZrqGkMpR0fkZmyy
1ibW4gUQHov5Aksxk5cBgsd4siub70RN7Z7LWDSV6xaNMeFOVtuopbnF53Lc
O56qL1zz+wlHhdyMTVrbJF1cWuMFAADIFvMcu+KQm+lLGfLy8u44svldYdAW
D+6ksc9YRG7GJo1tku67PN13PwAACB7PSwWPerUrV7mZTNaPajpSzc+jjimT
AzrRPrlBbsauzu0S9Xdlb777AQBA8LjPCQf1aVc24yHqOXau5+dRx5TJAX1o
m9zJpC6pb506tkvU35O9/e4HAADB6u5+hvud3KIe7cpmLGhp976UgTVNyBXa
JnfIzdilrV3SfZeTmwEAIFyZ3FtpvP+yinq0Kw65GSeX8Wsq1y0aYwLtkmvk
ZuzS2C4aYwIAIGm4HoeL+rYrLrmZvrAUv6VYk4L8fu6Rm7GLdgEAAKkwRwgX
9W1Xx7brTTvGoc0tlcFSrElAXiYY5Gbsol0AAEAqzBHCRX3blSo30117at2P
pS8slcFSrElAewSD3IxNtAkAAEiHeUK4qG+7Ordd59xLd4d1lsphKda4oy2C
Q27GJtoEAACkwzwhXNS3XT3thxvHnMwtlspjKdY4i+M40ITcjD20BwAA6A5z
hXBR33Ylue0sld1SrHFFXiZ45GbsoT0AAEB3mCuEi/q2K8ltZ6nslmKNI/Iy
4SA3Yw/tAQAAusNcIVzUt01JbzdL5bcUa9yQlwkPuRlbaAsAANAT5gvhor5t
Snq7WSq/pVjjhLxMuMjN2EJbAACAnmQ6n2ZekRvUo01JbzdL5bcUa1yQlwkf
1207aAcAcWXx+m8tZmvxIns9tTd9IneoR5uS3m6Wym8pVus6Xhuo83CRm7Ej
yHZorGmQimOX5MLuc3Lp0EWprappP9fa3CI3yq/7c+6oOlkhrS2t7eeb6hql
qqwi5WcBoCcW5wDWYrYWL3Knc9unOpA96tIe2sxWHViK1TKuD9EiN2ND0G1w
7dwV2Vq8XuY//qIse3qRHC092H6u7kqt7Ju7y59zx/r8VVJbeTv/Unn8sqzL
e82fW/Xn5XJw8TuyeeQbsmn42m6Pgy/vlZbmlsDKBMAGi/MAazFbixe5Q14m
HNSnPbSZrTqwFKtVXBuiR27GhqDboPrCNVk7aKUM+UA/GfHgEFndv7T9XOWJ
Cnn16UX+nDumf3uinN95rv182frjMv7zI2Xo3f1k9mNT5c3xm6Xww4Mk/94B
3R4Lfz5LmuqbAisTAFssXmusxWwtXsAKxpY9tJmtOrAUqzXk7PUgN2ND0G3Q
XN8k78zdJYUPDPZ5k0W/mC0N1fX+3Pld52TW9yf73Is7Jn6pWA4s3NP2uYZm
2Tdvtwz70CD/2eW/WyxlbxyXmd+fJC9+p+SOY/r/M1EmfH6kz+/c+tmWJp6b
AdDG4rXGWszW4gWsYGzZQnu1sVQPlmK1gmcp9SE3o19Y9X9mc5mUfGWsz53M
+E6JXNx3wf/5yXXH5LnPFMnwjwyW4kcKpPiTBbKpaK0/V3PpumwctsZ/xv3M
jpKtcuPmn7lnacreOHbHsWvGDpnx/74gBfcN8M/eHF91JPAyAbDD4rXGWszW
4gWsYGzZQnu1sVQPlmLVjpyMXuRm9Aur/t1ewEufWuDzLBMfLW7bD6axWfYv
2CPD7h8oE74wSub9dIZ/RsatcXJ7xVw+Ui6LfzXXf2bqNyfI2W2nUv7umoob
sn38Jp/Xceufdk590z+rAwC3WLzWWIvZWryAFYwtW2ivNpbqwVKsWpGT0Y/c
jH5h1X/91TrZPm6T5N/TX0Y/UiAbC9dIbVWtbBm93q9zmvOjabKpaJ1f1/TS
j6fL9YvVcnbrKZn8tXGSf1/b/jF1Kd7R5NY9uWdk3M8VfSxPXv0fL/v3PgFA
RxavNdZithYvYAVjyw7a6jZLdWEpVk1S5WOoR50ybRvaMDph1r17L/axFYf8
uqWC+wfKkifny+XD5VL6zGIZ8fFn5fU/LfPP0hQ+MEimfet5ObOlTA4v3e/P
jXxoqKwbvDLl73Xv3C793WK/lmnKN8bLybVHQykPAFssXmusxWwtXsAKxpYd
tNVtlurCUqxRS5ePof50IzejX9h1f2H3OZn92BS/RmnWD6bIoSX7ZPYPp8q4
zxbJ25O3yakNx/3apue/OEp2TNzin7Px+wO/vwaqM/fMjMvfjP1UoYz6RL5/
F1TjjYbQygPADovXGmsxW4sXSEVjP9YYE7qine5kqT4sxRqFpOdj4lBWcjP6
hV331eevypr+K3xuZvLXx/lcitsfxv33yTVH5b13zsvcn0z3eZYlTy2Q0t+/
4nMz7j1Obr+azq6erfLP27ifcfvRuGdtACAVi9caazFbixfp5eXl3XEkhdZ7
Dm3xoCuN/SZqlurDUqy51F3OxUI+Joxrlday9xZ7zegWRd031TfJ3jk7pfDD
g/x7l9wzNO6/3TM0VWWVcvVMlbz2x6V+b+CSr46Vmd+b5M8v+81C/9mOWptb
fD5n4n8cLcM+NFBe+ad5Uv/+e7kBoDOL1xtrMVuLF+l1nu/2df7OkdsDetFG
XVmqk6jHtoVDI65VmbdbJu2oua3jLqq6P73ppEx8dIwUPjDYPx/j9olZ/MRc
aaprkvrqOnlzwmb/HIx7p/bohwtk7KeH+3cwdVZbWSNbRr/h9xH2PzOu688A
wC0WrzfWYrYWL9JjvqvzgE60T2qW6iXqsR31YRXXqty2s/X+YFWU9V5xtFxe
+fU8v67JHSMfGiJrB7bt89va3CqHlu6Too/m+fyMO9z+vqc2nOj6e45d8vsJ
u9/hf2b98bCLAsAQi9cbazFbixfpsaZJV1/WFg/uRPukRr0gaKxpygy5Gd2i
rPe6K7WybexGGXp3f59XGf+5kbJrxo7286c3n5QXvjzGn8u/t7/Mf3ym1Fy6
0eX3nH/7rLz43RL/c7N/MEWulFWGWQwAhlj8NyJrMVuLF0hHY//VGBPa0Dbp
UTcIQxj9zHpfJjejV9R17t6lfbT0oIx+OP/2My8bbz8XU77/gsz/2Ux/bsSD
Q2R1v9KbH+r6e06uO+b3rBl6T39Z+PNZ0ljTGGIpAFjR1+c6o2QtZmvxAtYw
pnTi+6571A3CQD/rWSZ1RD1GQ0O9XzldJW+VbJUNBatlz8y35MbF6vZzbh+Z
I68e8Oe2jdsoZ7efSvk73JqmLaPekI2Fa/y7uAEAAOJIw9wNdyIv0zPqB2Gg
n/WM3IxO1DkAAIAtzN/0oU16Rh0hDPSz7rGeSS/qHAAAwBbmb7rQHpmhnhAG
+ln3yM3oRH0DAADYwxxOD9YyZY56QhjoZ90jN6MP1xEAAACbmMPpwHy6d6gr
hIF+1j32mtGF6wgAAIBdzOOix3y696gvhIF+1j1yM3pwHQEAALCNuVy0mE/3
DXWGMNDP0mM9ky7UMwAAgG3M56JDXqbvqDeEgX6WHs/M6EE9AwAA2MecLhrk
ZbJD3SEMuepnjTUNUnHsklzYfU4uHbootVU17edam1vkRvl1f84dVScrpLWl
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
     "], {{0, 435}, {
     1127, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyVlwk4lF37wM8sxj7GvjPInjVk3yn7vpdtxtjHNDPWUkgiIkmypUSJkiRb
KVtKSSpbSGUXUaS0yPcM9b7///de1/dd37mu53l+z33uc5/7nPusYv4RjgQ4
AIDCAL0c/aKNyGS/WCcM9ONCpAQHEgPwFkRqQGAAWdMfBgmF2KEXYBfyI5HC
aMXCiVSy4x5jrLuHJ5Z+GsAAHPACQYD2w1FIRvb21jTtP9//n74MAppB8FKB
Zuuf+f8xofEBFBwAsJ0Q4/EUXDjEpwCA6+NIZCoAiD5ILhFNJdH4M8RcZMhB
AJC0RnIFbrMQjf23WXlLx9nRBGJTmn3/bXamceA242kchQuEbCKhB8VBxAcT
AWBKhVgfF+QH5WMeQTo7w8MjaEyrV2bbz63EZBIRFkHGWpuY/o+N/W8pPCzy
Tx0c0MNC9Le1+81zJKo9rQ080POdEuVkBn2h2MIwhGBzi9+MxfuZWkEM9QdM
OS7IxJZmA2JrAtnccdsOzD3Ez9Ke1n6IQwKILk6/5TGksK3Y0vgEiWpM0+eD
uCiAYvZHpy4uyNntd9kucqSjC8Q7IO4PjbBy/F3XOj7A9LdvcCQxzNZ622c4
VzDVguY/F8RywBz4ATIIBAFAAVgDE2D6+42F5FiIIqDcAECB9Ka29P5ouW79
B/9bKQVA2LIXtVUmFMxAHO4TnESGbG1rdAMcJPMDxD8S5SrleeWff+XTagzb
qvWPxOofkj8e/q0bDPDQ948c90dOqzm8lhB1LiJW2zUIKYVURaojjZF6SH2k
FsAieZACQAGphtREGiENkDpQnlbvYsPiX/Vs943/X220gqwGgMitHiH+o79w
/8cbQA2IodIGj0kEKZYcHBhExRpBMzIAa0HEKe7EqiqrqgBAm9/bQ2zVcWve
wnie/S0j3gBACxpzsPi/Zd6vAbjVAgD90N8yWUsAONkA6O7DRZKjfo9ZGOwp
AP/tf3ve/U4IyAHa4qMLXsC8YEvwNIQ2YhM5SNeB6qIfZvjCJMXszVKF1mAb
Yo/jFOF6wEPmE+MfEzwj7CDKgx0UL96Bl1KUHpCNleffWa1opNSpYqJ6S01A
PUajR5NXa592oU4/1OnKBp6GqUZ1xu9M0Wa65oF7cva2WixY8Vgb2oTYptpd
tu90eOP4zZnTRc7V0M3RHedB8Tzilb7v7P4i77M+J32T/CL9g3Ae+L0BagRs
IFPg56Cx4I6QytBTYaRwB6JyBFvEEqnnQCX5OMWfqh/JH7ka9TS6IiYx1i1O
8SDq4LtDrfGlh9OORCWEJOKT8EdDkqnHklPyjtenDqatpXNl7DrpkBmelXaq
NPvu6f6cxVzEWYE8pXNG+U4F+MLIomPFZ85fKrl54f7FntJXl2bKVsp/XWGs
4LwqUilfpXPN/npIdcaN2zXztZK3Qurq6hkafBtbmvqaJ+98boHfY7nP0crZ
xtoOb//Y8aqz5UFRV/RD20fS3ajuhce9T6p6Ep/a9/L2Dj070be77+3zhBdi
L9peHu43HIANtA8mD5kP0w93v0ofsRllG30+lvPaZZxnfPDN2bdu7/jfjU5c
mCRMKU59m+6ayZ0NnNOZx8zPvr+6ELqouLj8oWaJtKy8vPzx+qfQFdmVmdXS
zz5rgmtDX3K+2q0zrz/8dvS7wfcfP27/JG5Ib4z/OrNpubkJxV8N1MN0YI1w
c/gU4gzSjU4OxU7PzMDMKMikxLyPpRWtzlbJLsNRxiXDXcOrydct4CG4JJwm
KoptEXeTGJZ0l3omYypbLc+9k6TQroRWtlFJUW3YNaXOrKG0W0dzr5aTtrdO
iC5VL14/xSDT8KxRsXG5SZVpjVmd+e09tXtrLK5bXrUqsy6xybPNsjtuf8SB
6hjq5Ovs6mLqustN3B3jvuEx79nvdW/f5f2Z3hQfD189P6zfpv8grhIfH2BH
ECOsBnYGnQnGhaiGgtCnYYXhwUR14q+Ih6SsA+5kLHmOcoMaHakXhYh6HH0q
xjVWKPZd3OWDYYfU40H8s8OlR+ISPBL1k2SPCiSzHWNMoT/OkMqaxnmCL104
Q/ykVKZcluIplexdp9VzNM5o5mqe1czTOKeWr1qgUqhSpFqscV6nxPSC3cV9
peGXEsrOlFddfnRl+iqiUhQaH27XydUnb1TUtN0crf1cx3pbsl6vwbkxpOlI
85k7V+42tnTd67s/0DrUNtDe29HRWf+grCvjIeWRV7fxY9knmCdfe8afdvZW
Pcvui36+/4XJS5l+lv7lgZeD9UP5w/Gv/EbMR+XHMGNrr8fGO95Uvi16VzHR
NNk51Q2NiXuzNXPn51PfH1hwXzT4IL2EWfq+PPPxzQp8VeqzxVrol/Sv19f7
vq39EPlpu5H0q2Ur/uIgGnyBucEewk3g3QgfJArZSBeLMqPnpl9mGGFcYeZi
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
Yqk=
       "], "RGB", "XYZ"], Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{731.7421875, Automatic},
   ImageSizeRaw->{1127, 435},
   PlotRange->{{0, 1127}, {0, 435}}]}]], "Input",
 CellChangeTimes->{
  3.818645427233695*^9, {3.818647846565421*^9, 
   3.818647849486108*^9}},ExpressionUUID->"643537fc-8483-45cf-a315-\
6f4331605ba5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "a", ",", "b", ",", "c", ",", "w1", ",", "w2", ",", "w3", ",", "w4", ",", 
     "w5", ",", "w6", ",", "w7", ",", "x", ",", "y"}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"it", "'"}], "s", " ", "a", " ", "good", " ", "habit", " ", "to", 
    " ", "clear", " ", "symbols", " ", "that", " ", "you", " ", "intend", " ",
     "and", " ", "expect", " ", "to", " ", "remain", " ", "pure", " ", "and", 
    " ", "inert", " ", "symbols"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.818191809270031*^9, 3.818191825642064*^9}, {
  3.8181943762857313`*^9, 3.81819438203727*^9}, {3.818216150783525*^9, 
  3.818216152983325*^9}, {3.81821867992036*^9, 3.818218684040921*^9}, {
  3.8185650780287313`*^9, 3.818565107686727*^9}, {3.818645534724186*^9, 
  3.8186455357647867`*^9}, {3.818645654593678*^9, 3.818645747647006*^9}, {
  3.818645887934291*^9, 3.818645912090004*^9}, {3.818646437183063*^9, 
  3.8186464843845987`*^9}, {3.818646651356473*^9, 3.8186466605209227`*^9}, {
  3.850422056190982*^9, 3.850422056631544*^9}, {3.850484427697604*^9, 
  3.8504844356088133`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"c2270c6d-7e03-4185-ae87-e5955c91fdf6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circ1", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", 
     RowBox[{"And", "[", 
      RowBox[{"a", ",", "b"}], "]"}]}], ",", 
    RowBox[{"y", "\[Rule]", 
     RowBox[{"Or", "[", 
      RowBox[{"a", ",", 
       RowBox[{"Not", "[", "x", "]"}]}], "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.818191809270031*^9, 3.818191825642064*^9}, {
   3.8181943762857313`*^9, 3.81819438203727*^9}, {3.818216150783525*^9, 
   3.818216152983325*^9}, {3.81821867992036*^9, 3.818218684040921*^9}, {
   3.8185650780287313`*^9, 3.818565107686727*^9}, {3.818645534724186*^9, 
   3.8186455357647867`*^9}, {3.818645654593678*^9, 3.818645747647006*^9}, {
   3.818645887934291*^9, 3.818645912090004*^9}, {3.818646437183063*^9, 
   3.8186464843845987`*^9}, {3.818646651356473*^9, 3.8186466605209227`*^9}, 
   3.850422059137136*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"b71ef4af-2ae1-463e-84a2-34073c7c1f9c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "\[Rule]", 
    RowBox[{"a", "&&", "b"}]}], ",", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"a", "||", 
     RowBox[{"!", "x"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.850484445109843*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"1118c5d9-53cb-45fa-8f99-f6f27202c82f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circ2", " ", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"w1", "\[Rule]", 
     RowBox[{"Not", "[", "a", "]"}]}], ",", 
    RowBox[{"w2", "\[Rule]", 
     RowBox[{"Nand", "[", 
      RowBox[{"b", ",", "c"}], "]"}]}], ",", 
    RowBox[{"w3", "\[Rule]", 
     RowBox[{"And", "[", 
      RowBox[{"b", ",", "w2"}], "]"}]}], ",", 
    RowBox[{"w4", "\[Rule]", 
     RowBox[{"Not", "[", "w2", "]"}]}], ",", 
    RowBox[{"w5", "\[Rule]", 
     RowBox[{"And", "[", 
      RowBox[{"w1", ",", "w3"}], "]"}]}], ",", 
    RowBox[{"w6", "\[Rule]", 
     RowBox[{"Not", "[", "w5", "]"}]}], ",", 
    RowBox[{"w7", "\[Rule]", 
     RowBox[{"Xor", "[", 
      RowBox[{"w3", ",", "w4"}], "]"}]}], ",", 
    RowBox[{"y", "\[Rule]", 
     RowBox[{"Or", "[", 
      RowBox[{"w6", ",", "w7"}], "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{3.8186466650625763`*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"38c6c54e-7971-45df-9cfa-275cea426404"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", 
    RowBox[{"!", "a"}]}], ",", 
   RowBox[{"w2", "\[Rule]", 
    RowBox[{"b", "\[Nand]", "c"}]}], ",", 
   RowBox[{"w3", "\[Rule]", 
    RowBox[{"b", "&&", "w2"}]}], ",", 
   RowBox[{"w4", "\[Rule]", 
    RowBox[{"!", "w2"}]}], ",", 
   RowBox[{"w5", "\[Rule]", 
    RowBox[{"w1", "&&", "w3"}]}], ",", 
   RowBox[{"w6", "\[Rule]", 
    RowBox[{"!", "w5"}]}], ",", 
   RowBox[{"w7", "\[Rule]", 
    RowBox[{"w3", "\[Xor]", "w4"}]}], ",", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"w6", "||", "w7"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8504844497143493`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"add0f4d4-27e2-4ef5-9da0-5cb7703a7afd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circ3", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Not", "[", "y", "]"}]}], ",", 
    RowBox[{"y", "\[Rule]", 
     RowBox[{"Not", "[", "z", "]"}]}], ",", 
    RowBox[{"z", "\[Rule]", 
     RowBox[{"Not", "[", "x", "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.818967169566733*^9, 3.818967186565529*^9}, {
  3.8504220354074793`*^9, 3.850422037153281*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"8b42d75a-21b2-49fc-b81a-495b6dc3362a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "\[Rule]", 
    RowBox[{"!", "y"}]}], ",", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"!", "z"}]}], ",", 
   RowBox[{"z", "\[Rule]", 
    RowBox[{"!", "x"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8504844846875668`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"407d04c7-3275-4925-89ea-6539cb04c05d"]
}, Open  ]],

Cell["\<\
Our code will allow you to use compound gates, such as x \[RightArrow] \
And[Not[b], Or[c, And[d]]] , if you want to.  However, when discussing \
circuit size, one must choose a basis set of gates, e.g. AND, OR, NOT, or the \
16 2-input gates.

Given a valid circuit, we can extract the full set of wires by analyzing the \
expression.  \
\>", "Text",
 CellChangeTimes->{{3.81864545675527*^9, 3.818645472666684*^9}, {
  3.8186459425355463`*^9, 3.8186460354335337`*^9}, {3.818646499406115*^9, 
  3.818646574714411*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"8b3bbe9f-f36d-48e8-af0d-e48f7ee44c9a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CircuitWires", "[", "circuit_", "]"}], ":=", 
  RowBox[{"Union", "[", 
   RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
    RowBox[{"circuit", "//.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Rule", "[", 
         RowBox[{"wire_", ",", "value_"}], "]"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"wire", ",", "value"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
          "And", "|", "Or", "|", "Not", "|", "Xor", "|", "Xnor", "|", "Nand", 
           "|", "Nor"}], ")"}], "[", "args___", "]"}], "\[RuleDelayed]", 
        RowBox[{"{", "args", "}"}]}], ",", 
       RowBox[{
        RowBox[{"True", "|", "False"}], "\[Rule]", 
        RowBox[{"{", "}"}]}]}], "}"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8181917444591618`*^9, 3.818191804970393*^9}, {
  3.818194349793557*^9, 3.81819435004988*^9}, {3.8182005269212303`*^9, 
  3.8182006198203173`*^9}, {3.818200806496647*^9, 3.818200840263052*^9}, {
  3.818200889282902*^9, 3.818200907186849*^9}, {3.818200947701129*^9, 
  3.818200973681944*^9}, {3.8182154760724497`*^9, 3.818215483815027*^9}, {
  3.818217885979704*^9, 3.8182178899799023`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"5672da39-e7ea-45d8-9169-10a2f5d4a8c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CircuitWires", "[", "circ2", "]"}]], "Input",
 CellChangeTimes->{{3.818200514015061*^9, 3.818200518563087*^9}, 
   3.8186466708909807`*^9, {3.818967208925102*^9, 3.818967210919241*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"20e4a4fb-2a34-4f3e-b6aa-f42c57cf8ce7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "a", ",", "b", ",", "c", ",", "w1", ",", "w2", ",", "w3", ",", "w4", ",", 
   "w5", ",", "w6", ",", "w7", ",", "y"}], "}"}]], "Output",
 CellChangeTimes->{3.8504845004056325`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"801c8cff-d0c6-4480-8c37-155c4d96dd8d"]
}, Open  ]],

Cell["\<\
The dynamics of Boolean circuit operation, for our purposes, will consist of \
one-at-a-time updates of gates.  It will be useful to know when a circuit is \
done computing, in the sense that no further updates will change the value of \
any gate.  To avoid actually assigning values to any of the free variables \
representing wires (which would wreak havoc with our code), we represent the \
state of the wires as a list of replacement rules.   Since we are using \
standard Boolean operators, wire values are True or False, rather than 1 or 0.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.8182181947956676`*^9, 3.818218243896707*^9}, {
  3.818218446863326*^9, 3.818218585639061*^9}, {3.818218735844059*^9, 
  3.8182187835660057`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"0e0422af-6261-4b80-a69f-af31005b0f40"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CircuitStableQ", "[", 
   RowBox[{"circuit_", ",", "wirevalues_"}], "]"}], ":=", 
  RowBox[{"AllTrue", "[", 
   RowBox[{"circuit", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "/.", "wirevalues"}], ")"}], "===", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "/.", "wirevalues"}], ")"}]}], 
     "&"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.818193396660452*^9, 3.81819343691387*^9}, {
   3.818193900297453*^9, 3.8181940006904593`*^9}, {3.8181940405577393`*^9, 
   3.818194068281804*^9}, 3.818216167792192*^9, {3.818965646057432*^9, 
   3.8189656570655317`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"cc4fcc25-6282-49b5-b756-b2d4e1755917"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CircuitStableQ", "[", 
  RowBox[{"circ1", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "False"}], ",", 
     RowBox[{"a", "\[Rule]", "False"}], ",", 
     RowBox[{"b", "\[Rule]", "False"}], ",", 
     RowBox[{"y", "\[Rule]", "True"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8181941005489073`*^9, 3.818194129705791*^9}, {
   3.818194415888308*^9, 3.8181944277602*^9}, 3.818646676082782*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"e6545c3a-79be-4e68-910e-0e36629d85e8"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8504845303300724`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"31398af8-68f3-410e-bd5b-dc78521222bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CircuitStableQ", "[", 
  RowBox[{"circ3", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "True"}], ",", 
     RowBox[{"y", "\[Rule]", "True"}], ",", 
     RowBox[{"z", "\[Rule]", "True"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.818967273749958*^9, 3.818967278467045*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"d52220e8-2d42-49de-b9dd-d331201e4078"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.850484558393177*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"8137903a-e34b-424f-b482-eea71d478037"]
}, Open  ]],

Cell["\<\
Circuits are defined using Boolean truth values, True and False, and \
operators on them.  But sometimes it\[CloseCurlyQuote]s convenient to use 1/0 \
instead of True/False.  The built-in function Boole converts one way; we \
define Truth to convert the other way.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.8182181947956676`*^9, 3.818218243896707*^9}, {
  3.818218446863326*^9, 3.818218585639061*^9}, {3.818218735844059*^9, 
  3.8182187835660057`*^9}, {3.8182204692596207`*^9, 3.818220498581317*^9}, {
  3.818220562731003*^9, 3.818220580292494*^9}, {3.818220621270282*^9, 
  3.8182206748923283`*^9}, {3.8182207714737453`*^9, 3.818220818730091*^9}, {
  3.8189671362979307`*^9, 3.8189671530221443`*^9}, {3.81897742752077*^9, 
  3.81897742804449*^9}, {3.818977623843994*^9, 3.8189776423409443`*^9}, {
  3.8504208981162853`*^9, 3.850420972575124*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"4c9f5425-4393-4d62-86eb-c776125c63c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Boole", "[", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False", ",", "x", ",", "True"}], "}"}], "]"}], 
    ",", 
    RowBox[{"Boole", "[", 
     RowBox[{"x", "->", "True"}], "]"}], ",", 
    RowBox[{"Boole", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "->", "False"}], ",", 
       RowBox[{"y", "->", "True"}], ",", 
       RowBox[{"z", "->", "0"}]}], "}"}], "]"}]}], "}"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.850420976413878*^9, 3.850421015782054*^9}, {
  3.85042136673838*^9, 3.85042138230941*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"c164e7a2-11f8-4cd0-9a53-1c1fd72a7b4a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", 
         RowBox[{"Boole", "[", "x", "]"}], ",", "1"}], "}"}]},
      {
       RowBox[{"x", "\[Rule]", "1"}]},
      {
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x", "\[Rule]", "0"}], ",", 
         RowBox[{"y", "\[Rule]", "1"}], ",", 
         RowBox[{"z", "\[Rule]", 
          RowBox[{"Boole", "[", "0", "]"}]}]}], "}"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.850484579360141*^9},
 CellLabel->
  "Out[28]//MatrixForm=",ExpressionUUID->"9e5824bf-aef5-41aa-99e6-\
d9c4fdb0ba60"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Truth", "[", "0", "]"}], "=", "False"}], ";", 
  RowBox[{
   RowBox[{"Truth", "[", "1", "]"}], "=", "True"}], ";", " ", 
  RowBox[{
   RowBox[{"Attributes", "[", "Truth", "]"}], "=", 
   RowBox[{"{", "Listable", "}"}]}], ";", 
  RowBox[{
   RowBox[{"Truth", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"LHS_", ",", "RHS_"}], "]"}], "]"}], ":=", 
   RowBox[{"Rule", "[", 
    RowBox[{"LHS", ",", 
     RowBox[{"Truth", "[", "RHS", "]"}]}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8504200727827053`*^9, 3.8504200920680323`*^9}, {
  3.850420667478064*^9, 3.85042070814001*^9}, {3.850420750900715*^9, 
  3.8504208395435867`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"5ba282f3-eebf-4e55-bc8a-f535b3aa0536"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Truth", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "x", ",", "1"}], "}"}], "]"}], ",", 
    RowBox[{"Truth", "[", 
     RowBox[{"x", "->", "1"}], "]"}], ",", 
    RowBox[{"Truth", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "->", "0"}], ",", 
       RowBox[{"y", "->", "1"}], ",", 
       RowBox[{"z", "->", "True"}]}], "}"}], "]"}]}], "}"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.850420757031188*^9, 3.85042075893762*^9}, {
  3.850421042300784*^9, 3.850421089949896*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"10d8853f-b6c8-454d-8133-01de58c7d6a7"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"{", 
        RowBox[{"True", ",", "False", ",", 
         RowBox[{"Truth", "[", "x", "]"}], ",", "True"}], "}"}]},
      {
       RowBox[{"x", "\[Rule]", "True"}]},
      {
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x", "\[Rule]", "False"}], ",", 
         RowBox[{"y", "\[Rule]", "True"}], ",", 
         RowBox[{"z", "\[Rule]", 
          RowBox[{"Truth", "[", "True", "]"}]}]}], "}"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8504846518458986`*^9},
 CellLabel->
  "Out[30]//MatrixForm=",ExpressionUUID->"df1fead5-1ada-482a-8f67-\
63ec167e02c0"]
}, Open  ]],

Cell["\<\
To evaluate a circuit, given some input, it is natural to evaluate the gates \
one by one in a feedforward order, until one gets to the output gates.  \
However, this only works for a feedforward circuit.  As we might be \
interested in circuits that have recurrent connections, we will instead \
define a stochastic semantics where we update randomly-chosen gates one at a \
time until there are no gates that could change.  Thus, depending on the \
circuit and the input, the computation may be deterministic (not depending on \
the order of updates), or it may not be, and it may be guaranteed to finish, \
or it may continue forever.  This method is not efficient, but it gives a \
\[OpenCurlyDoubleQuote]natural\[CloseCurlyDoubleQuote] and well-defined \
semantics. 

We\[CloseCurlyQuote]ll define a \[OpenCurlyDoubleQuote]single step\
\[CloseCurlyDoubleQuote] to be repeatedly trying to update gates until one \
changes.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.8182181947956676`*^9, 3.818218243896707*^9}, {
   3.818218446863326*^9, 3.818218585639061*^9}, {3.818218735844059*^9, 
   3.8182187835660057`*^9}, {3.8182204692596207`*^9, 3.818220498581317*^9}, {
   3.818220562731003*^9, 3.818220580292494*^9}, {3.818220621270282*^9, 
   3.8182206748923283`*^9}, {3.8182207714737453`*^9, 3.818220818730091*^9}, {
   3.8189671362979307`*^9, 3.8189671530221443`*^9}, {3.81897742752077*^9, 
   3.81897742804449*^9}, {3.818977623843994*^9, 3.8189776423409443`*^9}, 
   3.850422584149254*^9, {3.8504229193288603`*^9, 3.850423245181172*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"cf397821-ce11-47af-8741-626a36bf04e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CircuitStep", "[", 
   RowBox[{"circuit_", ",", "wirevalues_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"wires", "=", 
       RowBox[{"CircuitWires", "[", "circuit", "]"}]}], ",", "state", ",", 
      "n"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"state", "=", 
      RowBox[{"wires", "/.", "wirevalues"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "keep", " ", "a", " ", "list", " ", "of", " ", "wire", " ", "values"}],
        ",", " ", 
       RowBox[{"as", " ", 
        RowBox[{"True", "/", "False"}], " ", "in", " ", "order", " ", "of", 
        " ", "\"\<wires\>\""}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"CircuitStableQ", "[", 
         RowBox[{"circuit", ",", "wirevalues"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"n", "=", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"Length", "[", "state", "]"}]}], "}"}], "]"}]}], ";", 
        RowBox[{"(*", " ", 
         RowBox[{
         "randomly", " ", "try", " ", "gates", " ", "until", " ", "one", " ", 
          "changes"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"state", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"wires", "[", 
               RowBox[{"[", "n", "]"}], "]"}], "/.", "circuit"}], ")"}]}], "/.",
            "wirevalues"}], ",", "\[IndentingNewLine]", 
          RowBox[{"n", "=", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", 
              RowBox[{"Length", "[", "state", "]"}]}], "}"}], "]"}]}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"state", "[", 
          RowBox[{"[", "n", "]"}], "]"}], "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"wires", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "/.", "circuit"}], ")"}], "/.", 
          "wirevalues"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"MapThread", "[", 
      RowBox[{"Rule", ",", 
       RowBox[{"{", 
        RowBox[{"wires", ",", "state"}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.818191866729499*^9, 3.8181919802307453`*^9}, {
   3.81819211752186*^9, 3.818192199269416*^9}, {3.8181922393882427`*^9, 
   3.818192427742138*^9}, {3.818192828144525*^9, 3.818192866412261*^9}, {
   3.8181928976652822`*^9, 3.818192929942877*^9}, {3.8181930107510977`*^9, 
   3.818193045120339*^9}, {3.818194929936245*^9, 3.8181949567493153`*^9}, {
   3.818195063594763*^9, 3.8181951696771793`*^9}, {3.818195242094672*^9, 
   3.8181952872427883`*^9}, {3.818195341815092*^9, 3.818195640650333*^9}, {
   3.8181957648811073`*^9, 3.8181958192201567`*^9}, {3.818196875603345*^9, 
   3.81819690662402*^9}, {3.818196946840522*^9, 3.8181969621767187`*^9}, 
   3.818197064313393*^9, {3.818197160829371*^9, 3.8181971619977627`*^9}, 
   3.818197197490168*^9, {3.818197251230627*^9, 3.818197251638274*^9}, {
   3.818201712391924*^9, 3.818201729363078*^9}, {3.8182147712925253`*^9, 
   3.8182147972914257`*^9}, {3.8182148483200407`*^9, 3.818214857917179*^9}, {
   3.8182148889852867`*^9, 3.818214960906191*^9}, {3.81821521961922*^9, 
   3.8182152280642548`*^9}, {3.818215535696086*^9, 3.818215538498579*^9}, 
   3.818215652275216*^9, {3.818220709607589*^9, 3.81822071234893*^9}, 
   3.818967105108626*^9, 3.81896728715097*^9, {3.818969951778655*^9, 
   3.8189700300246067`*^9}, {3.81897689880726*^9, 3.818976922528904*^9}, {
   3.818976954389359*^9, 3.8189769993093653`*^9}, {3.8189770382194853`*^9, 
   3.818977118443639*^9}, {3.8189771647537727`*^9, 3.818977197734309*^9}, {
   3.8189772444033613`*^9, 3.8189773009044247`*^9}, {3.818977336992585*^9, 
   3.818977416799129*^9}, {3.81897745941323*^9, 3.8189774888423033`*^9}, {
   3.818979922882518*^9, 3.8189799884758997`*^9}, {3.818980788298408*^9, 
   3.818980801134597*^9}, {3.818981170922896*^9, 3.8189812180490513`*^9}, {
   3.81898127822351*^9, 3.818981278807603*^9}, {3.8189813088786287`*^9, 
   3.818981393916123*^9}, {3.818981517598023*^9, 3.81898151847675*^9}, {
   3.81898155840853*^9, 3.818981615209146*^9}, {3.85042142195839*^9, 
   3.850421424173483*^9}, {3.85042146374466*^9, 3.850421522137993*^9}, {
   3.850421580853962*^9, 3.850421602914791*^9}, {3.8504216432729177`*^9, 
   3.850421679771697*^9}, {3.8504217425157623`*^9, 3.850421791561886*^9}, {
   3.85042182539715*^9, 3.850421958374104*^9}, {3.850422140680046*^9, 
   3.850422152794241*^9}, {3.850422482836022*^9, 3.850422498621489*^9}, 
   3.8504225472766523`*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"5aaebc64-ea2b-4fe5-857e-ac20156d59ed"],

Cell[CellGroupData[{

Cell[BoxData["circ1"], "Input",
 CellChangeTimes->{{3.850422024736974*^9, 3.8504220258359747`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"6695e91c-c953-427e-a76c-a4281a7d5d7b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "\[Rule]", 
    RowBox[{"a", "&&", "b"}]}], ",", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"a", "||", 
     RowBox[{"!", "x"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8504847919114313`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"165b2b06-25da-4d87-9fcc-947879b083f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CircuitStep", "[", 
  RowBox[{"circ1", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "False"}], ",", 
     RowBox[{"a", "\[Rule]", "False"}], ",", 
     RowBox[{"b", "\[Rule]", "False"}], ",", 
     RowBox[{"y", "\[Rule]", "True"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8181941005489073`*^9, 3.818194129705791*^9}, {
   3.818194415888308*^9, 3.8181944277602*^9}, 3.818646676082782*^9, {
   3.850422090840233*^9, 3.850422091816967*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"a440b7f7-d39d-4029-bd04-a4758ad1c192"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "False"}], ",", 
   RowBox[{"b", "\[Rule]", "False"}], ",", 
   RowBox[{"x", "\[Rule]", "False"}], ",", 
   RowBox[{"y", "\[Rule]", "True"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.850484794288458*^9, {3.8504848566957273`*^9, 3.8504848578231835`*^9}},
 CellLabel->"Out[35]=",ExpressionUUID->"83e45f64-d8f8-4535-90a9-3dd7522ded26"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPointList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"CircuitStep", "[", 
      RowBox[{"circ1", ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "->", "False"}], ",", 
      RowBox[{"b", "->", "True"}], ",", 
      RowBox[{"x", "->", "True"}], ",", 
      RowBox[{"y", "->", "False"}]}], "}"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.850422185257913*^9, 3.850422206066087*^9}, {
   3.850422246874896*^9, 3.850422340428627*^9}, 3.850485077085723*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"bb5cb0d5-2a05-4078-be6d-a82c1df9c718"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"a", "\[Rule]", "False"}], 
      RowBox[{"b", "\[Rule]", "True"}], 
      RowBox[{"x", "\[Rule]", "True"}], 
      RowBox[{"y", "\[Rule]", "False"}]},
     {
      RowBox[{"a", "\[Rule]", "False"}], 
      RowBox[{"b", "\[Rule]", "True"}], 
      RowBox[{"x", "\[Rule]", "False"}], 
      RowBox[{"y", "\[Rule]", "False"}]},
     {
      RowBox[{"a", "\[Rule]", "False"}], 
      RowBox[{"b", "\[Rule]", "True"}], 
      RowBox[{"x", "\[Rule]", "False"}], 
      RowBox[{"y", "\[Rule]", "True"}]},
     {
      RowBox[{"a", "\[Rule]", "False"}], 
      RowBox[{"b", "\[Rule]", "True"}], 
      RowBox[{"x", "\[Rule]", "False"}], 
      RowBox[{"y", "\[Rule]", "True"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8504848612011185`*^9},
 CellLabel->
  "Out[36]//MatrixForm=",ExpressionUUID->"df1c8cd0-de34-48fa-a68b-\
b91cf38d72c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circ4", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "[", "i", "]"}], "->", 
     RowBox[{"Not", "[", 
      RowBox[{"x", "[", 
       RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8504226753664427`*^9, 3.8504227213981*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"5d4236c3-b937-4a61-a50a-e8f7e2377ca5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "[", "1", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "0", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "2", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "1", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "3", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "2", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "4", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "3", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "5", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "4", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "6", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "5", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "7", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "6", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "8", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "7", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "9", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "8", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"x", "[", "10", "]"}], "\[Rule]", 
    RowBox[{"!", 
     RowBox[{"x", "[", "9", "]"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8504851207353673`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"8c873b4d-12ec-4a61-8622-01844b8ad051"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"FixedPointList", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"CircuitStep", "[", 
       RowBox[{"circ4", ",", "#"}], "]"}], "&"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"x", "[", "i", "]"}], "->", 
        RowBox[{"(", 
         RowBox[{"i", "==", "0"}], ")"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}]}], "]"}], "//", 
   "Boole"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.850422740821398*^9, 3.850422773549912*^9}, {
  3.850422843055691*^9, 3.8504228448084927`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"f57d1988-adbb-437f-a1ee-ebc70b8a0d1d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "0"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "1"}]},
     {
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "1", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "2", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "3", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "4", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "5", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "6", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "7", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "8", "]"}], "\[Rule]", "1"}], 
      RowBox[{
       RowBox[{"x", "[", "9", "]"}], "\[Rule]", "0"}], 
      RowBox[{
       RowBox[{"x", "[", "10", "]"}], "\[Rule]", "1"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.850485182955145*^9},
 CellLabel->
  "Out[38]//MatrixForm=",ExpressionUUID->"b37ce9b7-132d-41ff-90d4-\
7393cb24fdd3"]
}, Open  ]],

Cell["\<\
To evaluate a circuit to completion, we perform one-at-a-time gate updates \
until there are no actions that would change the state (if the circuit does \
not or cannot stabilize, you will have to abort the computation manually).  \
The user defines a (possibly partial) set of values for wires to be \
considered \[OpenCurlyDoubleQuote]input\[CloseCurlyDoubleQuote], and the \
states of other wires are initialized to random values.  Upon completion, \
only the values for the user-declared \[OpenCurlyDoubleQuote]output\
\[CloseCurlyDoubleQuote] wires are returned.   Note that the \
\[OpenCurlyDoubleQuote]input\[CloseCurlyDoubleQuote] wires will be set \
initially, but if they are the output of a logic gate, then \
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.8182181947956676`*^9, 3.818218243896707*^9}, {
   3.818218446863326*^9, 3.818218585639061*^9}, {3.818218735844059*^9, 
   3.8182187835660057`*^9}, {3.8182204692596207`*^9, 3.818220498581317*^9}, {
   3.818220562731003*^9, 3.818220580292494*^9}, {3.818220621270282*^9, 
   3.8182206748923283`*^9}, {3.8182207714737453`*^9, 3.818220818730091*^9}, {
   3.8189671362979307`*^9, 3.8189671530221443`*^9}, {3.81897742752077*^9, 
   3.81897742804449*^9}, {3.818977623843994*^9, 3.8189776423409443`*^9}, 
   3.850422584149254*^9, {3.850423257429515*^9, 3.8504232770878477`*^9}, {
   3.850423341307078*^9, 3.850423381061323*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"b00784f8-1e9a-4cf1-9917-30647e7cfa38"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EvaluateCircuit", "[", 
   RowBox[{"circuit_", ",", "inputvalues_", ",", "outputwires_"}], "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"wires", "=", 
       RowBox[{"CircuitWires", "[", "circuit", "]"}]}], ",", "state", ",", 
      "initialwirevalues", ",", "finalwirevalues"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "initialized", " ", "randomly", " ", "except", " ", "for", " ", "the", 
      " ", "\"\<inputs\>\""}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"state", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"BooleanQ", "[", "#", "]"}], ",", "#", ",", 
           RowBox[{"RandomChoice", "[", 
            RowBox[{"{", 
             RowBox[{"True", ",", "False"}], "}"}], "]"}]}], "]"}], "&"}], 
        ",", 
        RowBox[{"wires", "/.", "inputvalues"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"initialwirevalues", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{"Rule", ",", 
        RowBox[{"{", 
         RowBox[{"wires", ",", "state"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"finalwirevalues", "=", 
      RowBox[{"FixedPoint", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"CircuitStep", "[", 
          RowBox[{"circuit", ",", "#"}], "]"}], "&"}], ",", 
        "initialwirevalues"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "format", " ", "the", " ", "out", " ", "as", " ", "rules", " ", 
       "transforming", " ", "wire", " ", "names", " ", "to", " ", "Boolean", 
       " ", "values"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{"#", "/.", "finalwirevalues"}], ")"}]}], ")"}], "&"}], "/@",
       "outputwires"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.818191866729499*^9, 3.8181919802307453`*^9}, {
   3.81819211752186*^9, 3.818192199269416*^9}, {3.8181922393882427`*^9, 
   3.818192427742138*^9}, {3.818192828144525*^9, 3.818192866412261*^9}, {
   3.8181928976652822`*^9, 3.818192929942877*^9}, {3.8181930107510977`*^9, 
   3.818193045120339*^9}, {3.818194929936245*^9, 3.8181949567493153`*^9}, {
   3.818195063594763*^9, 3.8181951696771793`*^9}, {3.818195242094672*^9, 
   3.8181952872427883`*^9}, {3.818195341815092*^9, 3.818195640650333*^9}, {
   3.8181957648811073`*^9, 3.8181958192201567`*^9}, {3.818196875603345*^9, 
   3.81819690662402*^9}, {3.818196946840522*^9, 3.8181969621767187`*^9}, 
   3.818197064313393*^9, {3.818197160829371*^9, 3.8181971619977627`*^9}, 
   3.818197197490168*^9, {3.818197251230627*^9, 3.818197251638274*^9}, {
   3.818201712391924*^9, 3.818201729363078*^9}, {3.8182147712925253`*^9, 
   3.8182147972914257`*^9}, {3.8182148483200407`*^9, 3.818214857917179*^9}, {
   3.8182148889852867`*^9, 3.818214960906191*^9}, {3.81821521961922*^9, 
   3.8182152280642548`*^9}, {3.818215535696086*^9, 3.818215538498579*^9}, 
   3.818215652275216*^9, {3.818220709607589*^9, 3.81822071234893*^9}, 
   3.818967105108626*^9, 3.81896728715097*^9, {3.818969951778655*^9, 
   3.8189700300246067`*^9}, {3.81897689880726*^9, 3.818976922528904*^9}, {
   3.818976954389359*^9, 3.8189769993093653`*^9}, {3.8189770382194853`*^9, 
   3.818977118443639*^9}, {3.8189771647537727`*^9, 3.818977197734309*^9}, {
   3.8189772444033613`*^9, 3.8189773009044247`*^9}, {3.818977336992585*^9, 
   3.818977416799129*^9}, {3.81897745941323*^9, 3.8189774888423033`*^9}, {
   3.818979922882518*^9, 3.8189799884758997`*^9}, {3.818980788298408*^9, 
   3.818980801134597*^9}, {3.818981170922896*^9, 3.8189812180490513`*^9}, {
   3.81898127822351*^9, 3.818981278807603*^9}, {3.8189813088786287`*^9, 
   3.818981393916123*^9}, {3.818981517598023*^9, 3.81898151847675*^9}, {
   3.81898155840853*^9, 3.818981615209146*^9}, {3.8504232963833714`*^9, 
   3.850423325555592*^9}, {3.8504234166818933`*^9, 3.850423521165599*^9}, {
   3.8504235834734373`*^9, 3.8504236011744003`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"8de874bf-4a28-4cfd-8abc-06c130adc944"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateCircuit", "[", 
  RowBox[{"circ1", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "True"}], ",", 
     RowBox[{"b", "\[Rule]", "False"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.818192201669121*^9, 3.818192221254274*^9}, 
   3.818193060234482*^9, {3.818195837270905*^9, 3.818195844850317*^9}, {
   3.818196992281876*^9, 3.818196992724411*^9}, 3.818646693540449*^9, {
   3.818967118062944*^9, 3.818967118374115*^9}, {3.818979807100312*^9, 
   3.818979808368413*^9}, {3.8189812286087837`*^9, 3.8189812302700443`*^9}, {
   3.8504236180396643`*^9, 3.8504236209913397`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"851e69df-c873-4156-85a7-9a143fa25e69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "\[Rule]", "False"}], ",", 
   RowBox[{"y", "\[Rule]", "True"}]}], "}"}]], "Output",
 CellChangeTimes->{3.850485360093459*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"27e88562-6f0e-4b64-8e63-7b65c40bcfec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateCircuit", "[", 
  RowBox[{"circ2", ",", 
   RowBox[{"Truth", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "\[Rule]", "1"}], ",", 
      RowBox[{"b", "\[Rule]", "0"}], ",", 
      RowBox[{"c", "\[Rule]", "0"}]}], "}"}], "]"}], ",", 
   RowBox[{"{", "y", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.818192201669121*^9, 3.818192221254274*^9}, 
   3.818193060234482*^9, {3.818195837270905*^9, 3.818195844850317*^9}, {
   3.818196992281876*^9, 3.818196992724411*^9}, {3.818646693540449*^9, 
   3.818646719851424*^9}, {3.818977613968041*^9, 3.818977616936455*^9}, {
   3.8504236329007463`*^9, 3.850423638897531*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"713d9099-ed9c-43ce-b1f5-e47a6847e5cb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"y", "\[Rule]", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.8504854962438903`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"71f133b6-1c2d-40f5-abd2-049072ee9743"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"A", ",", "B", ",", "C", ",", "Y"}], "}"}], "}"}], "~", "Join", 
   "~", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Boole", "[", 
         RowBox[{"{", 
          RowBox[{"a", ",", "b", ",", "c", ",", "y"}], "}"}], "]"}], "/.", 
        RowBox[{"EvaluateCircuit", "[", 
         RowBox[{"circ2", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"a", "\[Rule]", "aa"}], ",", 
            RowBox[{"b", "\[Rule]", "bb"}], ",", 
            RowBox[{"c", "\[Rule]", "cc"}]}], "}"}], ",", 
          RowBox[{"CircuitWires", "[", "circ2", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"aa", ",", 
         RowBox[{"{", 
          RowBox[{"False", ",", "True"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"bb", ",", 
         RowBox[{"{", 
          RowBox[{"False", ",", "True"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"cc", ",", 
         RowBox[{"{", 
          RowBox[{"False", ",", "True"}], "}"}]}], "}"}]}], "]"}], ",", "2"}],
     "]"}]}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.818646727409615*^9, 3.8186467383986692`*^9}, {
   3.818646768409114*^9, 3.818646790118834*^9}, {3.818646836216804*^9, 
   3.818646970814886*^9}, {3.818647672255718*^9, 3.818647687599172*^9}, 
   3.8504857825430255`*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"455df06a-b7a2-48b8-a731-6f1ab2ae35c7"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"A", "B", "C", "Y"},
     {"0", "0", "0", "1"},
     {"0", "0", "1", "1"},
     {"0", "1", "0", "1"},
     {"0", "1", "1", "1"},
     {"1", "0", "0", "1"},
     {"1", "0", "1", "1"},
     {"1", "1", "0", "1"},
     {"1", "1", "1", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.850485570651605*^9, 3.8504857882479057`*^9},
 CellLabel->
  "Out[46]//MatrixForm=",ExpressionUUID->"38279e1d-959d-4f36-b42c-\
18623251db1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "you", " ", "will", " ", "have", " ", "to", " ", "abort", " ", "this", 
     " ", "with", " ", "command"}], "-", 
    RowBox[{
     RowBox[{".", " ", "because"}], " ", "the", " ", "circuit", " ", "cannot",
      " ", "stabilize"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"EvaluateCircuit", "[", 
   RowBox[{"circ3", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "\[Rule]", "True"}], ",", 
      RowBox[{"y", "\[Rule]", "True"}], ",", 
      RowBox[{"z", "\[Rule]", "True"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.818967234073213*^9, 3.8189672545432262`*^9}, {
  3.8189775255557613`*^9, 3.8189775638604918`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"5fd0f1b2-b075-4c6b-ab68-63c95e8a5415"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.8504857432184467`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"dcff07a4-a9d2-463b-b43b-bda78939bbcb"]
}, Open  ]],

Cell[TextData[{
 "It\[CloseCurlyQuote]s worth pausing here to consider what are valid wire \
descriptors.  It\[CloseCurlyQuote]s clear that we are allowing them be \
symbols (a, b, x, y, etc), but could they be more?  In fact, this code should \
allow gate to be given \[OpenCurlyDoubleQuote]names\[CloseCurlyDoubleQuote] \
that are arbitrary Mathematica expressions, so long as they are inert and \
non-recursive.  By \[OpenCurlyDoubleQuote]inert\[CloseCurlyDoubleQuote] I \
mean that there are no global rules associated with the symbols or \
subexpressions, so they won\[CloseCurlyQuote]t unexpectedly change, and by \
\[OpenCurlyDoubleQuote]non-recursive\[CloseCurlyDoubleQuote] I mean that no \
wire\[CloseCurlyQuote]s name appears as a subexpression of another wire\
\[CloseCurlyQuote]s name.  (This restriction arises from the use of ",
 StyleBox["ReplaceAll", "Code"],
 " (",
 StyleBox["/.", "Code"],
 ") in the code, which will apply the rewriting rules at any level.  We could \
rewrite the code to avoid this restriction, but we\[CloseCurlyQuote]re not \
motivated to.)"
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.8182181947956676`*^9, 3.818218243896707*^9}, {
  3.818218446863326*^9, 3.818218585639061*^9}, {3.818218735844059*^9, 
  3.8182187835660057`*^9}, {3.8182204692596207`*^9, 3.818220498581317*^9}, {
  3.818220562731003*^9, 3.818220580292494*^9}, {3.818220621270282*^9, 
  3.8182206748923283`*^9}, {3.8182207714737453`*^9, 3.818220818730091*^9}, {
  3.818220860980722*^9, 3.818220909013591*^9}, {3.818221897695279*^9, 
  3.818222013161871*^9}, {3.818222180846609*^9, 3.818222249967565*^9}, {
  3.818222309783704*^9, 3.818222375332182*^9}, {3.850393139463883*^9, 
  3.850393144430784*^9}, {3.8503933422825327`*^9, 3.850393424573969*^9}, {
  3.85039345905665*^9, 3.8503934711549397`*^9}, {3.8504238117123404`*^9, 
  3.850424022770894*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"c0020903-8e6d-4533-b00c-a9dc277f627a"],

Cell["\<\
To illustrate how circuits can be constructed using these conventions and \
representations, we will build an N-bit binary ripple-carry adder.  A common \
issue when building modular systems is how to provide names for intermediates \
(wires, variables, etc) within a modular component that is to be used \
multiple times in different contexts.  Mathematica\[CloseCurlyQuote]s perhaps \
ugly but definitely workable answer to this conundrum is to define new unique \
local variables each time a Module[ ] is entered.  Those symbolic names \
persist outside the module, so we can use them e.g. to name local wires in a \
circuit construction.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.8182181947956676`*^9, 3.818218243896707*^9}, {
  3.818218446863326*^9, 3.818218585639061*^9}, {3.818218735844059*^9, 
  3.8182187835660057`*^9}, {3.8182204692596207`*^9, 3.818220498581317*^9}, {
  3.818220562731003*^9, 3.818220580292494*^9}, {3.818220621270282*^9, 
  3.8182206748923283`*^9}, {3.8182207714737453`*^9, 3.818220818730091*^9}, {
  3.818220860980722*^9, 3.818220909013591*^9}, {3.818221897695279*^9, 
  3.818222013161871*^9}, {3.818222180846609*^9, 3.818222249967565*^9}, {
  3.818222309783704*^9, 3.818222375332182*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"c67ebf2e-d742-4071-82db-c38bf33501f8"],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzs3Qe4ZWV59nG/L2hUolFRCWAUFYKgBiFSPpDeQerQe5cO0nvvvfcO0gXp
RXpREER6EVQQI6IClkisWV9+b653smfPDMycvc6cs8+5/1dWEBjOPnuvtdd6
n/u9n/v59Mbbr7L5/33Xu96103v/+/+tstFui+y440Z7jPnQf//NatvttOXX
ttts02W223mzr22247wb/91//8Nz//vP7jDVu9713//3riaEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQghh
mPNf//VfzZ///Ofmd7/7XfPGG280v/71r8tff//73zf/+Z//Wf7d3/72t/Ln
QgghhBBCCCGEEMKUhSZDm/ntb3/bPP/8883DDz/cfPe7320eeeSR5oUXXmhe
ffXV8u/++Mc/lj8XQgghhBBCCCGEEP4HWgnfC//LH/7wh+att95q/vrXv7bu
gfmP//iP5ic/+Ulz7733Nuedd15z1FFHNYcddlhz9NFHN2eddVZz6aWXNtde
e21zyy23NHfccUdzzz33NA888EDz4IMPFq3n0UcfbR5//PHmqaeeap555pmi
Ab344ovlZ/70pz9t/v3f/71oQL/85S+b119/vfnNb35TfD3eE00o3p4QQggh
hBBCCCH0K3SNN998s/n5z3/evPTSS0UHoXm0rXX42RdddFGz/fbbN4svvngz
++yzN1/84hfLX7/85S838847bzP//PM3CyywQLPQQgs1SyyxRLPyyis366yz
TrPppps22267bbPLLrs0++yzT3PIIYc0xxxzTHPaaac1559/fnPZZZc13/rW
t4r2c/fddzff+973mieffLL4emg7NB3enj/96U/RcEIIIYQQQgghhNA3/OUv
fxnrieF3oYHQQi655JKig/C98LrQXX71q1+VP+u/GSj0lL322qtoNB/96Eeb
d73rXW97vOc972k+/OEPNzPMMEMz88wzF61nrrnmKvoObWeFFVZo1lhjjWbD
DTdstthii2aHHXZodt999+aAAw5ojjzyyOakk04qvh6a0RVXXNFcd911za23
3trcddddxQNUvT20nu9///vND37wg+aJJ54o7/nZZ58dx9/z8ssvNz/72c+K
xvXaa6+Vz0NuD03I59KZ3RNCCCGEEEIIIYTQFnSHH//4x83VV19d/C1f+cpX
mnnmmaeZb775miWXXLJZf/31m/3337+58MILm/vvv7/oGP6bgSLn5mtf+1oz
yyyzNB/4wAfeUb/5v//3/xYN533ve1/zD//wD80//uM/Nh/5yEeK9jPttNM2
008/ffPP//zPzYwzzth89rOfLRrP5z73uebzn/9886//+q/NHHPMUXw9c889
d/P//t//K7rRggsu2Cy22GLNcsst14wZM6ZZe+21m4033rjZcssti/6z2267
Nfvtt19z6KGHNscee2zx9+j10tvlc7rxxhuL1uXz8H5oPT/60Y9K35Z+Lf6e
eHtCCCGEEEIIIYTQFjJieE/k0Mw555zNu9/97qKZ/N3f/V3z/ve/v/nkJz/Z
LLzwwkXfOPjgg4uPhXfl6aefLj1WZkhNjh+Ht2WPPfYo+hD9Zaqppmr+z//5
P++o47R9eN2pp566mWaaaYoG9JnPfKaZddZZi96jh0vv1lJLLdWsuOKKxd+z
wQYbFN1pu+22a3bdddex/Vtye04++eTmnHPOGZvdc9ttt43N7XnooYeKxvPY
Y48V7xFPj34uOhgvDx9Pnb0ln8dnGe0nhBBCCCGEEEIInfCM3HTTTUWToF/Q
bugpjqrhfOxjH2s+/elPN1/4wheKlrPuuus2Bx54YOlFeu6554qGM6nQfGTU
7Lzzzs2XvvSloqHQUqa0fuP9ed3q7fF7fPCDH2w+9KEPFU3He/6nf/qncfw9
NB7+Ht6h2WabrXwecnuqx4fuw7+0yCKLNEsvvXTJ7fFZ0X2+/vWvN3vvvXfJ
aj7xxBOLn+eb3/xmc/vtt4+dvUXL6bU/LYQQQgghhBBCCCMPmoFeIHoM/UF/
Ek1jYp4YOgctY9FFF2122mmn4jvhNZERw0dSs4EnBq2H5nPVVVeVLGI6hywb
GghthGZCT6k60jvpMPxCdBc9VXQXf/Ue9Fr5Od4LHWpKeXyq7vXe9763/C6f
+MQnit7D2+R98vSsssoqxc/Dy8PHU2dvyeehpfE31Znq/Eo+Lz1utK9f//rX
xavzTp9zCCGEEEIIIYQQRg41u1iuy0YbbVQ8JXSHiWkete/o4x//ePMv//Iv
xWvCX3LqqaeW/N+q4UwM3hIaziuvvFJmgfOf8KHIGTaTir5B86h9XO+kl9Bu
+IZk9tCfZBt7D7JweGe8Fx6iqaZ69xTXcKq3R86PDGaZPfQpWcw0MHoVH0+d
vSWfh79p2WWXbVZfffVm8803L1k8cpjpZPxOdB1eHTrO233OIYQQQgghhBBC
GDnU+VOyWeT0br311iXzRc6v/F89Q7QaGgRNpVur4HWhl8iIOf7445tvf/vb
ZWbTO+k4FZkv5jh5/Wuuuab0F5kVLmOYrkHn0NNEC5mQnuP1/Z58PLKWZRCb
Q7XJJpuUXGJeF3rI4ostXjJtvC86iTzjf/u3fyu+H/+99zDbrLMVr8zMM81c
3venPvWp0jtFB5LVo6eKHuT38XnQsfhsfC5teXyqPub16GN0Kb+/97bjjjuW
z4dXh+bFN2V2lplZzzzzTPHomI0lQ9ksrL/+9a9T4AoKIYQQQgghhBDCYCMr
l4aj5tcDpWfnzjvvLHPEaQU8IGY10RJ4Xbo1CtoFDYXWQWvg4eEV8XNoOO+E
HiAajteX50uH+M53vlP0iSOOOKL0GdFx+FdoON16B38Lv45Z4vKEr7n6mua+
e+9rHn744aJtyBC+7777mrvuvKvMDedh0adkntaZZ55ZsmhkN8tm3mfvfZpd
dtml2W7b7cr7ppnwwZhRbhYXTcl79PuYcSUTaLrppit6Dh2HhtNWLo+fRyOi
F3kNn69zYH46r47fha5D6+Jb8t7pOmZjPf744yXXiIYTQgghhBBCCCGEkUfV
U/g49OpccsklzUEHHVTmT9FIeFV4UmgWnX6cmvnCv0Jz0Q8lF+enP/1p8ff4
uZMyV8mf8Wd5cugv5557bsnJoZ+YCc4L5HWqjlT1I14aeTx0J16ebv9PfV96
t375y1+W3+uHP/xhyZeh9ZgFrpeL/kE78r69tr6wY445pjnkkEObfffdt9lt
192KXsLjQ6taa821mpVWXKlZeqmlm0UWXqT4e2g8NBb5zPQWPVK0F54e87z4
ebwPmpScnr//+7+fbP8Ojcd/qxeLnuTcyEqmP51wwglFo6LD6Wmjib300ksl
68j7//Of/5wZVyGEEEIIIYQQQh9T9RPeDRkrL7/8cqn/eVhoAoceemjplaIZ
0HC6M194Rmq+sRlTZmrr66EZTGrert+B1mK2+Y9+9KMyg/sb3/hG6R/yc2XI
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
Z3r1e/3hD38oGs43v/nNZp111inXMZ2oM8/YLHO+k+uvu774z2iZoxWflxnl
es/OPffc4slZffXVm/nnn7+ZddZZi+bmM6N9dfpx6jwxf86589/qqaILyd/J
3PEQQgghhBBCaAc12+WXX168D7JIuvUbdRvPBH3HbOgQBgJthIZz++23Nzvt
tFOp92k49Trjj6HhyB0++eSTm0cffbQnv5e+QJrE008/3ZxzzjnNRhttVLJ6
O30/9Ii5vjxXyVj2e8lxGa3Uz0svGe2F3+7OO+8s/VU777xzs+yyyxa9qzvn
uPajOZf/8i//0iy++OJF7zX36qmnnur7Oe0hhBBCCCGEMBywL653RM+EGcHT
Tjvt2B6Jusf+j//4j6X/ZOutty5ZONlPD71g9vQVV1xRZkDxe9FQaClVD6AR
bLzxxkU3MN+IB6eX+VA0oB/84AfNKaec0iyyyCLNhz/84aIV1deTx7PCCisU
fVIf0UidRzW5VD3HjK7rr7++zK7SV7XgggsWPw7PDS2nOx/H52vmuL7L008/
vWQf+Rm/+c1vkp8VQgghhBBCCAOg5mA89NBDzSabbNLMNNNMpb+k5oPUPgm1
rpps+eWXb2699dbsp4ee6Oxrkn/7mc98pmg4tf7/4Ac/WPQB1+Qdd9zRcx9V
zTO+++67i2Ykr8X1XF/v/e9/f/PJT36y9ArRKXhwRuI8qsnF/YGGI0taPhYf
Ey1GFhb/lLnvMoTqfPZOH5XPl5dPn9wWW2xRcnVoYzScEEIIIYQQQgiTh7pW
PXXjjTc2yyyzTKmb1WLqWbmkDv+76jnzzjtv8UT0Oh8ojG6qbmhWuJlUevPo
AJ3Zwq47M63NFP/+979fMpp6RU+Q65e3RxZO1R1qHu+cc8xZsowffPDB5vXX
X2/hnY4s6pw63//rrruuePZoXvrPZvzUjOPMae/sTzPPyqzxM844o2RY69d0
/xgtedEhhBBCCCGE0CuyRe2pn3baaSU3ttazM8wwQ5kn4/C/az/V5z//+Waf
ffYpnojRnBMSekfdLmeFVkLDMcu7zjmqGo6smjXWWKP0Pb344os9v6aZSDSj
s88+u2TsdOoNXpMHZ43V12hOPfXUVl5vpNHpxzF7/PHHH29uueWW5vjjjy+z
3/XC+Uy751Tpv+Sxkouzyy67NJdddlnpp/rTn/6UPrUQQgghhBBCmATM2zEz
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
7/5LW6Gh8r6YQUcHce2YRUfXqPre5EK/ocMPVL/p1HDova5b3h2ZXWau0Z1l
ybmWeXn0ZXmOeC3vi9ePv7B6ezxXeHvmnXfecu17BnnO0LBXWmmlcg+SC7b5
5puXvi7zH+lahx56aHPssccWfUtOnb2Xa665pug/tB8+Jj1c3i//0kD1rhBC
CCGEMDTUdbLeKX5va0p9Itac9g15v+3vdWOPz2yg5ZdfvuSS1LnOSy+9dPGD
99vcmJrPYb9Shq19UPOM6+cxsTV77avhq+fLsW9qX5Tv3eca2sH+uuxb1yh/
WO2jqjk46jiemLZyaWRU2Ae3V67equdb5q7acaeddiq1UFv9G6OV6q9SX+6y
yy6lJudbmPr9UxcPYP3c1b/0HZqxepS/gI8gn/3IxP2YtuC6oFvI0q++rM68
a7MP6be0DN5PPjzPMt9fOvyk9rXW/im9wnwytBavORAdZzAO9zvPGrMC3INk
c/meyHWn+dB6aDxyu2r/lhx2GVLbb799s/vuuzcHHnhgeWbTnu01yGM2542v
p2b28PPYg6Cr+gzdd/l39C7Se3znfKa574UQQgghDA00BmvXq6++uvSL1LnJ
1sVjxowpOY3mbHQjS9K+OX1HLkDdd7SONLvD+k/ffr9gTSpHUr1gD1Zmpc+g
c470262reTT08tB8+HasiWk4oR14muiIsm7Mtu/MSqHhqF3UJOqNNnJpnDs6
Hk+a/f56vtV0PD/2wPXzJMe4N6q/So2ofuQbUH/O+KkZi4ZTP3eeHBoOb4Ie
T31X6svUkSOT6oOjL9BTap5+5323zj70faTp8q94hvGkuE/QJCZ1HmLNL3bf
3nPPPYuOSMMZat2m+1njPfsudPp7PHv41vQf0nXsp9C06TueSZ7PvKL2GMwZ
qN6e+eabr/RH+8zsw/D00Hto07J6fIZ8TXQe9zr7EvZtfE6574UQQgghDA18
MvIDTjzxxFIb1bWi9R5PtuwBa+Bu1NP26XgUrAdrjrH/zrxV62499/2CvVr+
cnu4vPrWxp37/5O6vubVUNvb59STpk8kuZO9U+eJm/NiFlV3n43aRM1h/ksb
uTTqE/1Rso/0FKqX6jXur/oa1Db+THKMe6fW648++mjRP/me3Eu684f8vTqd
30IvlV4QOnH6qUYW1Q9Jg6Ep6GOkSfCe+C5W/bb7HswDqhdp5ZVXLvdy+xJ8
cvRBfp6JXSc1b4cXTN4MrwoPC32DzkEz5nWhjdBMuvWk7qP6g/y+eqVq363/
bV9AHxV9iCb54Q99uPze/zD1PxQ96j3v+fuyJzCh99f2UTN7vCfaD63H85xm
5jnme8bzpkfNXC66qUwez3e58nqlrQPk7sjbsa8jh4hPpz778r0MIYQQQmgP
61prXB5ra7eqQ+gR0QukPrIW68bazDqNB8f+XdU73sm3M1zxPtWN8iW9h1qr
T+56uHOu9c0331w0hzbmWo921AE+R3vArlVaox6/+rmri/RQuWbbyKWpegIP
zmqrrVbqLfVY/X6oEeVX82v1k045XKm5Wr4vcox4qfR/0Go684fUzVXDkU3F
r6N2rDOWw8igzivTz8r/wQcni42OIpetu5+q8/qghbiH6yuSsS9vXM+d3KS3
u068Ji8YDYJ/lB/MLDrPR55SvhTeMDqO1+jUFbuPmtvkOeq+JEtLXrGsbs9H
Pk0aiZ7AOeeYs3j8PvuZzxb9/6PTfLTkyU011bsHXcOpmT30Ir+z16U50Zb8
LnxNMnrc73yetB3atd+dZ0c/64477lj6zsxTtx6QQ8SnY32QuVkhhBBCCO1C
t7CvxtNgvdmZY8PrMLF5SnV9LedXHaV+pl1Y+1ljyxq179nrfIu6nlaTD8Yh
R0MfhjU6/zi/+dvl3Uyqx52+IEPHHqV6dLB+/9F28PHLcqgZFfVz58fhmzLP
hWeMdujc9vp6vgNqFDWbPer6eupD9eTJJ5/cVzrlcKfqdO5LtDi9UnK4uv1W
1WehHpbRauYdL2H2+0cWv//978v3mI5qT8BzhZ6qX9J1wdfiPvA/esdU4+kS
PCV6oWgM/Fq8InojJzUXp+Zs0wjdC/gq5ZzZs6Bn0Dg8L7r9QFW/oXWYj8cL
5PenA/G6eubyC9KAvScZzbL/q77jeew1vE/5PnSeeeaep+hBnq/6oHiS6D7y
j+29eHbpO7R/MMP0M5T3rqfqIx/+SPm++D3pXm14e6qO6rnv95G7Yx2gn9p7
9d2luzlv1gg+d5qOfGm6Tu2/ync1hBBCCGHSsXaSV2h2klrIGk+Nqla1V2jd
9U77lbQJcy/4zK0VrQ/9Vf+DLIFJXSdPDNqNdbP14GAcp556aukBM8PDmvid
8m4mVcOxrrdXazasNf9g/f6j7eCRcr1251PUfBT1ks+81kq9vp6Zvvoo1Iqd
fh//m0Y3sXzvMDBqH8vvfvu75sUXXiy6qtpWXkfn3LGqM6tf11prrVIT03DS
rziyUOPTcGgudFL9dfpczYqigdR7AR2HhtN9H6ajuE/QOtyPeXFo6jJcJiUX
p+qJPKj6iOk4nou0IJ4gPUb6oiaWr0zfoMPI5taXpVfZz6BP8vj4e9qGvQ4z
HR988MHy82Uw+z35fzz/vN+LL7q4Ofvss4vnzIwps6Y8e/U5e37J/dlg/Q2K
93OlFVcqezD0n7m+PFf5nvg9fRb/84zrzdtT8+7qnk3NU6Yj8cbRmczN8jvQ
pGhURx99dPnc+HP0WvlMo7eGEEIIIUwa1sXWT/o/+KCtwdTA1nfmfahb1UPv
hLxYGSEbbrhh8VrXdZ21m31xeQI8NAPF7+B3UaMNxqE2l5Xg95WD2ZYvvc5T
l53Awz9Yv/9oO3he1AT2fF2z3fvtrl9aoj+njun19dRnfp497k7/jdpMH4fX
Mbfmj//5x+Zvf41u0BZVx3F/cR/hq+KvotF1+nCq3uxc+XM1Dyc14cjENWFP
gZ6jl5IeIKtGTsvCCy9cMpPcA7rzy6ofhtbjecKjR0fhrZmc/taq53iu8QLS
UegTrk2+F9djp/5fr0+eIXOf5MXQjial38817M95Tstn85q8SHSfR7//aNF5
7JHIoqFzXnLJJWVGH936uOOOaw4//PCiV9GzaaCe0Z53erc84+V68fX43d1P
+Ylmm3W2ZuaZZi7PcnsQPkv3Wc8zGtWk9hXX+zGtiFfRz7fOoLfx58gO01+s
R42G5X3Zq+H31XOV728IIYQQwrjY09Q3ZD/PGk5NZL3Fg20fz1pQ9sA7YV1p
r9Ca2L5bXbfZ7zz44IPLv/NnBor1nTWnfczBOIrXXObARz/a6rxYa3hrXvWm
zMvB+v1H26EWsNdb9cbumqH6v/w557bX13Nt+HnddVndX1cz2ht/7RevFQ0n
tIcaTp+F3BIeBB4D9yrfqc7vmXMjv1qfG88Un0b29UcmVddT48tK0o9Dz+BV
ueCCC0p2Pm2CF4SG0/19de+gJbhWPPv4T2k4k/v69iToMDLqeWToODyn3Tpv
vT5p+XqMeHboLhPrS+7Ga9lr8X69puc2ffLNN94sfUh0LPlbcuw8r+mdtSeY
PuX3e/zxx4u/h97leeqZfMcddzQ33HBDc8UVV5T9F54e/b777L1Ps9222xU9
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
ry0+JhlZvL6TMp89hBBCCGG4U/Nk7Evby6o5NZ///OdLfznPSC8HXYg3uvoh
6EL2xuUQWscO170xmYhXXXVVs+2225Z1/UA9SbQbmTf2Fe0Jxo8xuLzwwgul
P2+VVVYptVFn3a4eUNvz6vRKzX3g41Av0Dp9b6rfR82hhnjooYeKxy0MPs6J
/f1nn322ueCCC0pN3unD6qyPebToazxb6vgwuqjfXx4sOh7Pxqqrrlq8HDSc
er24dmQaL7PMMkVX8MyiwQwU2o//nhZkHhavjZ/f6StxjeoB1Wtrb4XmP1Kp
uisNx+fCW+v+zKMqk8/7P/jgg8s91oy57u9zPap/SZaO7zf9nh+Hls9LS9cf
SL92CCGEEMJwoeYWqz832WSTsXuPPOTyFa19Tj/99OJt7uU4//zzSyYFP3Sd
6eSv1q1mWv3ud78blvvf6kD+bnWgvVC99uYRV4/FO+k2+jXoYd63GRwXX3xx
2QcMgwu/ix4pOTiu6Xo+7N3ON998JfPiySefbO31JubT4v34+te/XvaAe8k/
DZNHva85L+ZA80bR7vS11V4V+/f66fRx0mjlZfhvBjIPL/Q3zrm+HvcE/Tt0
PRqO+3f1ebhmaAJmJ5555pnlucBT14sOLwvG89HeyQILLDBen677Fb2C/iA3
x/NoNPlH6nlx75RXdd555zW77757yY7X02YuuXkAPidz2LufydWPY+/EXhHd
/vbbby/+vJqNk+97CCGEEPqJug+on8RsT3mAtAlrHutJWSHWTdaZvRw80Wa2
6megC9V5G2rpc845p/glhuP+t7WyNbN1PQ1HRqI9UXujnf76CR3WkrI2zNfw
OZofO9J98MOFmudkb9v56vZdbLjhhiVzoS30AOoF1GOh16K+ntpi3XXXzRzx
KUzNM5Y14jpQk7uf2Zeveca+n3rrZp999lLbqaN77YsJ/Um9Xpx/mfq+r/qa
6hzG+n22t6EXmH5gJlWvfZH0g6rh6OvsnpvnGUmbkK/sd6IZeR6NFup58Rn7
Lnt+Oj9yp/nmeHLoaTSuaT8+7Xj7KtWPQ1Onx7kH8PDU7KuBzr8MIYQQQhgq
+F70GZx22mll5m5d+7Rdd8oqlP1oVo++qe48X+tX69jhSvXh8GCr9b7yla+U
dTwvTud8G+tFf2+96H3yL5khzX+hFytzTacMNDLXrf1anpjuXGE6ixqAPtfG
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
5ei4IYQQQhhKeFysRWXRWB/yFDs23njj5pJLLil9J2qWtqn9C/a0ttpqq7Gv
a+1rv/uUU04p66ThTvSb/kAN5Frbd999i4ZSzxNthcZitgzNpS30PXTmO9XX
m3mmmZvttt2u9DzYyw9DS50TTbszM0y2iRq8c6a43JH555+/Ofnkk9NHNcqp
ufWuA1k3tN/Ovju59Z4D5sy537Sh93lN9xMa84ILLjhO35b71+c///miL/LR
Jldr0qi59nQc2X/0Nt5M/dvmiXXn4sg85n/afPPNS//r448/XrzLw33OQggh
hBBGHvYTaTjWh3o++AIcMhjtMw7WfnPtS1dXq5vr68oKlStKu+FTHu5Ev+kP
1NxqLn1S1ujduRXmnplR1Ra8ZXKcuufK2+OVqXDOOeeUPIYw9Kjl1GJ6UA4/
/PDiB6w5YFXDMVtOjqwevH7QlcPg4XqhvcoWlm/ded93rdBw6Cxm0LW1/+H1
JvSc4Reh4chp0uOXefeTjvMoM8gahBeHx+nAAw9sFl100aLhdubiyMOi4dD+
V1pppeIPtl6yB5Vc4xBCCCGE/iH6TX9Q+2TOP//8Zq655hovr3LppZcu/TG8
GG3kGsiM0huo5u/M21EX8OrLJG0rbyf0jj4VGo5Zw+bMy+HSO9Htc+ANlE0t
ayR12+jF3oLvr95j9b7rg5Yy1mc388xl3t0111zTis9Ov/Gzzz5bZt7r5XFt
0oo6+zJ5C++4446iR4TJg47Di+MZIL9ohRVWKJ+pOV+0m/o517mc5lMdddRR
Zc/JPpfnS+Z/hRBCCCEMf6Lf9AdqbTX3VVddVeZC1/PEX0HD0bsn66mtOby0
Ivvhm2yySfFu9Gu+02iBH5CG45zo3ezW3arPwZwqvRa8WsmLHb3oUaLh3HPP
PaWnhrbXmXPVdq5WnX+lJ2vDDTcs+lCnvlhycMaMaU466aTk4AyAOu+L9qU3
Su+4/DIz2mk4nXo/DUcOkefINtts09xwww1jNZwQQgghhDC8iX7TH1ifW1/z
V9i/rr0x9XzJqTFXpi0/fJ1TI/NSrVVfRxaOdb+5azz7YXhBk9FHpffNNfHB
D3ywmWqq//VVyDJde+21i7eKHyL5F6MbWonsYNoJDaXeU2qNL1NFvgqtp41c
Gn2ZfB/mhnf2ZX7oQx9qZp999vK8+d73vpd83QHyX3/7r+Yvf/5L8U/Kudlh
hx1KL5xzy6dZzy/vE/1Mr6U5D3xWzk3yzUMIIYQQhjfRb/qDmlPL777kkkuO
zTep52vuuecufhlzqt56662eX+8Xv/hFc+uttxadxiy3zuvCzF+6zg9+8IMW
3llok9pH5dzJcJ/1c7MWDaeePzUbPW799dcvfyZ9VKMb518Oiuxr+knVhatP
gwfn3HPPLTpPG3lu/CF6pPh6OnPY9fjwicj/v+mmm5rf/OY30REGwn/9j4Yj
Q4inht+JlrvaaquV7LI6u73mYtHjPefdDy6++OJBm/cQQgghhBDaIfpNf3H/
/feX/BnnpzOvwj4qT4U9VH0KvUID8Fr6pMyf7qz/Zavoq5IRHoYftD71tl6U
7rpNfU77k6HEB/Hggw+mj2oUU3NTeO14YvRNuT7q991su7333rtkJtF0e6XO
L6cV6PnkCem8Nl2XZ5xxRmv3sdGO+7iZCscff3yz8sorl2e8Z0fnjHHaGY1e
v5V8NTn5yTUOIYQQQhieRL/pL9Tb+l/0NnTOF7F3fswxx5TZZ9bevWLeFX+N
nOLOeVfvfe97y3xa+SptzrsK7VLPn94YfVTddbJ+iuWXX75k4aiV28i8Dv1H
zU156KGHmh133LHoJ515Ka6TVVddtcyebyOXpvaB8hGus846RVt0bdYsr1lm
maX8HmYpeTaF3qh+PM/wCy+8sNl6662L76lzPp2/yj7iy9NHRz9r6zkSQggh
hBDaJfpNf2FdbYaQc2XObz1f8kfNjpVH+stf/rLn16nzacwQ5u3pzsE138S+
bur+4YneE30Q6mTXi5qtM5+2+qjU0PJLeSvU8WF0Ii9F3b7WWmuVjKTOXJo5
5pijzKLit2srl0Ymsh4q/Vk8P/X1ZOLooYqu2C68TD7PSy+9tNloo42K3u9z
l41V+6noOLLq9VKddtppzfe///3m9ddfjw8nhBBCCGEYEf2mv+CpkEmpplJb
1fPF/77bbruV7Aj9EL0iQ8e1IQPTDJP6Otb4NBwzqGQrtDWvPLSLGlutzTNx
wQUXlCyczjliNb9UbtJBBx1UdJ7MbR690HxpvwcccEDRgrtzaXi12sylqT1U
m2666TjXJU3ac4jmKMfYdZz7S+/U+V80ed6mvfbaq3itOvPNaTjuCc6HHl1z
7JwDGk4IIYQQQhgeRL/pL5588smy9jYHunPfeqaZZiqzYK+88sqSYdwrajQ9
OK6N+eeff5xZV/63fXP1nF6INuaVh8Gh9lHpf5E38uEPfbh597vfM/Zc6sNb
ZZVVSj6G7NLM/RmdyLv9yU9+UjLQzbcb7FwamoBe0COOOKJo0fREr0Ub9uxZ
ZpllmhtvvDE5xi1Dl/d8cO/2bJ933nlLP6zPvbOfasYZZ2zWXXfdouHwfMaH
E0IIIYQwPIh+01+Y+WxWzFJLLVXW3fV8WW9vuOGGJX9SHdYranjZCWYUqfu7
55WbIX7VVVeVbAV/LgxPqg539913F31vzjnmLBpOPY9TTz112W9Xq8moTb08
OuHPoOHwYcnX0kPVnUuz8847l167n//85z2/nl49PXvuIYsttli5Dmk41d9H
V9C7+fzzzyfHuEVo7TQc/idz4Q855JCiz/Ny1jx859v58Ezhu6L9xocTQggh
hDA8iH7TX/C/n3DCCcUzwTtRz9c///M/N6uvvnrZL33xxRd7fh09CzQcdT+t
aELzyuVh/vSnPy0enDC8oemZA73BBhuU3Jvqd6jzqPTImVdl9gy9J4xO+PvM
m+r291WflnuPe1Cv1P6+Bx54oOSt0ApoBvX15DXtu+++pUczfX3tU3ONfb47
7bRTOd+yh/TL1fu8+4N8aRlZnit8fNF3QwghhBCGlug3/cWPf/zj5uyzzy5+
CWvr7txPM6H1OLQBDccM8ZVWWmmc/dnBmFceBhdZxs8880zxNCy44IIl56JT
w6kenLPOOqtcY2F0UnNp5M985jOfGft9//CHP9zMOeecZTYUja9Xqj4sx1jm
zqKLLtp8/OMfH8dPKGdXdtNLL73UwjsLnVR/5c9+9rOi0R9++OGlJ1bWEQ2n
05/nXJg9Tv+l79FwQgghhBDC0BD9pr+YWO7ntNNOWzKFZdGq09vCjHC+HrUV
n0Z9vTm+NEdz4gknNo8//njW831AndtsZtjmm2/ezDrrrOPMo6LPmROvx8qf
MX9MT00vqNH9DK/rGtF/4eDv0atjHz/ZtMOLzlwaM4pq3+T73ve+Zvrpp2/W
XHPN5t577y1ZKG3kJNFm+Pi687Xr/ezggw9u9X4WxsV5/PWvf12yq3fdddei
7doL6M7D4dmj6dHTaG5t3B9CCCGEEMLkE/2mv9CvdPnllzdbbrllWVPX8/Wx
j32srL31HFhft4VaTh6G2k0NV19PbXfMMceUGbNvvPFGa68XBgc6CQ3HPCoe
m/XWW28c/5Z6jYajZpahpEdGjdbL66nv/Qw1+hNPPFGuJQf/hnnVNB01YDSc
4UPNpbniiiuKH6PW8bKMff/5ZDwv1Pxt5NmaeyVzZ//99x9n7pU5VGbqbbHF
FuUeEwYH31Hn0TqALnfkkUeWXqruPBznY+aZZy7z5c0g7/X+EEIIIYQQBkb0
m/7C7BCZn86LmVP1fE0zzTTNfPPN1+y5557F494WDz30UKn15evUPFPHv/7r
v5a1vn+fXMv+oforjj766JIRO/X7py61eT2v7gHyMK6//vpyb5hcbUUtSM+j
2ai7b7nlluKvOPHEE4unQ5+GWVd6MWTh+l1oSsnBHh7UXBp+DHk3MnA6fXdt
9036GTKKaYoyterMK6/ptfXt3HHHHUVXypy7waN+b513PXLy6Xmgao+lw/+m
qW233XZF3/O9zXkJIYQQQpiyRL/pL+QVXHPNNc32229f9kM79Rv1+O677168
Dm1h7oi5Vt35oq4Nc7D0V9mLD/1B7Ze4+eaby176jJ+asWg49byqme2/m1Gv
N049PzkajhqQbkOzce9Ydtlli65oRjTNz3WjT8u1yuujD/DUU08tPVu8GPHi
DC3VN+UcqtP57Hgx6vWh7861YVYZn06v0Ir4sOiF5lC9973vLRpOzdXmKbzs
ssvKzCtaQRgcqg/nZ6/8rLn927c3Bx54YNHTak5W9eG4Fr7whS80m2yySZnv
nvMSQgghhDBliX7TX1gvq3V4JDrPl3zRL3/5y2XGr7q7LR5++OFSY/P6WMvX
17OGl02h7uadCP2DGl2miNnBSy655Dhz6NXP8i/4HtwX1OiTUp+ZSexeIu/a
rBr1Hb3GfaQz97oeanR+LhqkfCW+HJqAOVmyccLQwl/DX0d/cz3U86bnzryo
c845p5Wc69rXZw6VbB2v5Rqsr0frO+6448rso8xFG3xq/9ytt95aenRlVtsb
qFk4vrfOj3+u58131vc+fZAhhBBCCFOG6Df9xauvvlp6UvhseNk782ftlfPl
qHXawj68dXx33m3m+/Y3ztntt9/e7LPPPiV3RG1WdRX1mT4Ze/CySfhi3gn3
kWuvvbbMnl5iiSVKFm3Vbjrnztej1oI0Qb15PD9bb711yUel4aQWHFrkbMk5
+drXvjbOHCo5WwsvvHCp3dvK2XKuZSLRnueaa64yA2lC/Xy06zC40NJoOLS5
6667rtltt92KDssL1anh6K2Sj+Tf82AmzziEEEIIYcoQ/aa/qHW3Opmm0nm+
eGLUwG2eLz/LTCLXgtfo7KOQtXPbbbe10kcRpixmQtUsbB6L7pyTT3ziE82Y
MWOaE044oXh19LlMaN6Qf242uRrONbnIIouMMwd6Uo86n9r16/pOHs7Q4vPn
peKxc1/pzBX2nODJk12k3m9Da5OHKxdppZVWamaYYYaxr0fb48s57bTTmhdf
fLGFdxYmBfcHGVZXX3118VtV/b7qvDWfSA8kvx2dX7ZWdNcQQgghhMEl+k1/
Qb/heeF94YGp58va2hq77XktvDw8Pd05GLw/PEC8QDxBob+o88TlT5sbLK9U
n0Q9v3wx5pup3eTH0mhoNd345/Qd/TRLL730eHPmJ/V4z3veUzQce/pHHXVU
6adJrtLQUet3fqh55plnbN3OT+XZsNxyyxXt1p9rI7+25rLTijtz2WseE22w
zVz28PbU+8Ozzz5bsqz4sJyXzpnivudy0VZYYYXSa/f000+3pueFEEIIIYQJ
E/2mv9DLYkbIAQccMN68Xedvs802ax555JHWXk9fg3kkvBHq6/p6s8wyS7PL
LruMzbAM/cnLL7/cfOMb32g233zzkkVT583UPiq1O18Er4W+Jtdf56Fmu/LK
K8e7fwz0kK+y7rrrFr+F+0736+WYMofvtBnvrg2aWnf/jOuCZke7o730+np0
Av13tET3lk4d0XW52aablSyuaANTFtnSdDPnmk7TPYdQpj0NZ7XVViszqZJf
FUIIIYQwuES/6S94EngTZM929jVUv4TcWHVOW8hCVlOZRdKdS0HXkZHgGgr9
ifnNamfzm9Xp6rFODUe9pqdlv/32K/WZPJzOQ33v3jHQvqnug8dLZq2ZZ+ed
d954r5djyhw8frJp9c8ttNBCRbvlkarZRb7/O+ywQzlHNNxeX8/P8LO65+p5
Tfcdedr333f/ZM9DC71R54PZEzj66KPLTPnO/jb3CvcMGTnWCvox9WWGEEII
IYTBIfpNfyFjQM/LEUccUdbM9XzZE+Vd2GCDDcrM77aw9yrnxgzozv4aNZb5
wvIRzDQP/YnMUfvl995zb9H+eB94ubp1QbOdZdPIre08ttpqq1Lfu/Y69+UH
etRcDbPUeIK6Xy/HlD34+ehpdLXOOWK0OteEa4a+2+vrmEnuGUSn6dQHeH5o
OF7LzPu2+rXC5FF9n4cddliZ6e5ZUPW82uc2//zzF0+mP+c5ZR55CCGEEEJo
l+g3/cUbb7xR8m2OOeaYkklTz9f73ve+Zvrpp2/WXnvt0uvSFmbMmFHEm2GN
Xl9PTa92v+LyK5pXfvpKa68Xpiy8DDSc559/vjnt1NNKVizPTef+Og1HvS7/
Qs9e5+E6MJOIdsOv06t+U3M1+D3MPep+vRxT9nAOqnbTOUfMOXJNmDNG8+v1
dWR3ef7QbtzL6uvUrBX5TOZh6eualHn2oV1kidNwZGHxXXbnZVXdddFFFy2e
LXsINJwQQgghhNAu0W/6izfffLNk0sgksS9ez5esEjNd11hjjTILqC3km9gf
NzNYnV5fT10n01JNFb98/2Pe0L333tscdOBBzRc+/4WedZgcOdo85pxjzuaU
k08perLM7DA01LnyvHjWB926bc2vOuOMM0o2Eq0tfqkQQgghhPaIftNfyCKQ
SWOPc4455hh7vqp+s/rqq7eu3xx44IFlX7Uz34R+o7/lkksuKRm4ob9RZ/E2
XHrJpc2888w75PV6jhydB4+OzHa9OXwgYWjQaymjWM7NmDFjmk9+8pPj9E3y
6vHprbPOOiUbLX6pEEIIIYR2iX7TX1T/Df1mSvlv1E0T0m/4b6LfjAzG6jeX
XtrMO+/4+o09dn0t6jOHjByH2k1vTZ0v3dahb8vPrq+TY2gO51o+rftLd3+c
c972eaqvVTO062slb2t4oN+Sn4YPShbOsssu23ziE58Ye75qXpFnk+eGHOxf
/OIXyZwOIYQQQmiJ6Df9Rc2/OfbYY8fJv1HzTDfddM1aa63Vev7NvvvuWzIr
O/un5J5sueWWmTcyQtA/dd999zUHHXTQOHPNap1e85Wcd7W0e4XD/vsHP/jB
8ertXg4/Rx0vh6e+To6hOXgpZNzQht1jOs+RWp2+0+Z5qq9Fy3FN1ddznfF0
mJP24x//eKi/LqMaWow5iJ4zcthk4bgOOjWcf/qnfyqav97bJ554omg+0XBC
CCGEEHon+k1/Qb8xH/yoo44aZ/6U+to+qOwB86nawvwps2HMFunML1bXbbPN
Ns1VV13VvPJK8ov7GXXViy++2Jx5xpkl/1qtXM+zXFK6nXuBOeLmDZlJpHfO
sdpqqzX/9m//VrSdztzZgR727mUX65cxq7jztXJM+WPTTTctM+2WXHLJog9X
ja7W6c77UkstVea9+7O9vh6NxmvRED2D6nVBD1h66aWbww8/vMy7D0OL2VKe
Rfw1W2yxRXkWybnufB65NtwzrrzyyqLxmx0WQgghhBB6I/pNf2Gmh31PdYzz
U88Xv8KMM85Y6qg254fbO919993HmzfCg7H99ts311xzTfoZ+pg6f8o1s/VW
W49XN9PsvvKVr5RzTaujHT7yyCNjD+ff/GjznTv76wZ6qAHlOtECeLs6XyvH
lD9cF/oxTznllGauueYax2flr+p2fTS33npr853vfKfn17vtttvKa2288cbF
i1OvC5qemfI777xzyf8KQ8vf/va3ouH86Ec/Kt9TWj5Nv14btd/S9eGcXXvt
tWWtEUIIIYQQeiP6TX+hz+X+++9vDj744HH6XGpupLpXjd0WaqVddtml1G4f
+chHxr6ea2WnnXZqrr/++pKbEvoTuTevvvpq882rvtksvdTSY2dFV3+Fa+rt
5ozxXtF13Cc+97nPDbiPqr6e+TVmmJ922mnFExSGlpp3cvfddzfLLbfceH1N
7gvnnntu6WmSbdsrb3d/07vH/9Xm/S30xu9+97vih3IN8GHx6vHs1fNG06Xt
7rfffkULdI3Qi0MIYaTgOUnTfuutt8oz7KWXXir3xR/84AfFD//AAw+U+Z7y
9+uhX92eh/uiPydr0prHmsrP4Fd0r0zfaQhhQkS/6S/MXrnrrrvKeni22WYb
e77UVepnXnb5OG3hucJ7IY+y0x/vtfhybrnlllL/h/7kV7/8VXPvPfc2Bx10
cDPHl+Yo2g0dxeF/zz333M2pp5460bnN/pk5wWeeeWazwAILFB9YZ30/qUd9
vTnnnLN4y6xrZGyEocf6kQdHb5Mezc4+ORlcMlB4Z/TT9Ir5ejx/J5544jjz
9Wof36qrrlqujTA8UF/QcJyTPfbYo1lwgQWbj330f3PSZCbpfVt++eVL1n1b
Ol8IIQwXaDd//OMfSz1Fp7nooouaQw89tGTur7feeqWPdJlllmmWWGKJZvHF
Fy89wl/96ldL//lGG23U7LDDDiXvnfdUv6k9DBqQe2v07hDChIh+01+Y5fHt
b3+7ZNLMOuusY8+XDFmZIVtvvXWr58vP8jO7+2q8tt/B7+J3Cv1F3S964YUX
iteF50UObWfdJe9EvUyjU1f/+c9/Hu/n+Gf+nf0kPRSycOTPyrGhyUyK74be
w9tFj9T/Vz1dmTs8fKAJyyv3vXevqefPOZNvLgfltdde6/l16nzq8847r3h7
6uvoxzHnyhrYtebazb7k8MGesbpDveI5RG/z/a++OtcNH+cNN9xQ+m1z/kII
/Q5txTPL/Y+P5oorrijeUT5RGo39Desq/b91Vqf1jvsjT6k9CbNc7Y/Ke6fn
WG/7GRdccEHx6PDihBBCN9Fv+gteF/W0vU4emM7zJWvA+plnpi3eqW674447
WqnbwpRF/UR7kaXEs+V8dp5f64qFFlqo2Weffcr15M/6byb2c/RW3XTTTeWa
mG+++UpWEg3nnfQbaxnrGOsXe1CXXXZZ0ZRoN/p2wvBAH6Uck8Huo7SHyWNo
HSxzq1Pno+EsssgiJSNH9sqErscwNKhheGt4bPTZ6ZuqfVTOnfuB8ykrS/+b
85zzF0LoZ9z3ZIBdd911zY477lh6SPlG6xxFnnW6jbWQ51enpl11HJ5lf849
k79Vz7raa9555219PR9CGDlEv+kv1Eg33nhjWQfPMsss4+R76j1xHh977LHW
Xk9fhLkwrg09WvX17LHye9oLV2+F/kKftu++Otk+ke97Z+6NfOqtttpqkufD
+3n2oOTYujatY3i2uudOd/fDuIbpRPac5Og8//zzxTMchhd6882CXnjhhct5
q+dRJg39j+42KdfJO2E/8/e//33xaejHq+vd+nrm4Fkr69ubkB8sDA01z/jR
7z/a7LnHniXz3HVSz53vuyx0M8T0Fsh5cJ5DCKHfsLdkj8l97Jvf/GbxFuo1
r/mB1S9qr6NqMvZbrZuti/zVnqh1lsw/Pab+W73J/tu6XyE7TPZcCCF0E/2m
v3C+qtbfeb48Jzw/1M5tzmexV8oLqk7jk6iv5xl0yCGHlFy25JT0HzVHiQbH
49udezPPPPM0p59+esm2mVDuTTfWM1UT4iO++OKLiy9DrzcNp1u/UdstuOCC
Rbc566yzSs94+r2HL88991xz1FFHFW+Fvrp6Hq099fefffbZxX/RK3UeGl+f
tWu9Luvr2ZOUpZ3+uuFF7cf8+b//vLnl5v/xh/L0de4303DULHThieWhhxDC
cKfOfbCXalaiWok+XZ9XtBt9U9bktSfKPfHAAw8svVH+Kn9AtuT6669f+oJ5
kGeYYYai4VT9Rk9V9JsQwoSIftNfyA64+uqri6+Sdl/PF3+6vpU999yzefLJ
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
nrmhP3Dt3HrrrcVno//Onlidueuv/H8HH3xweaaoj0IIYbhhfaTfgvd8kUUW
KfWk+5c1sd7eddddt9zn3njjjeZPf/rTUP+6IfQlE9Nv6rwMfVBqFn3ZEzr2
33//0stoPoI1JI+vvT/7RTQcdaw6iMYhX+e8884rs4H6jeg3/cVDDz1Ucm66
fejWv3Jxvve97zWvv/56z68j28me6YknnljmhNTXse6WRyE/+bvf/W4L7ygM
JvU+ePLJJ5eetzovvJ7Pzjm+8kTaqr+j34wsJrbvWA9+VDNT29L/9EbRjt3r
ZHt15jTJU+fl0M8V+oM6j0puBA+O/TDPkqr/0eX8cz1z0eVCCMORzvlTK6yw
QqknaTh1X1MGjppTlj8NJ4Qw+UxMvzEDYamllipzUNUs9nu6j3vvvbf4GKxH
zb+0D6ivUc3KI/fRj350bJ6r/WuzlM3E8J1ta/06pYh+0z+oq83zlj+rl29C
87zlfrYxz7szL8V1UF/HM+rTn/50s9FGGxWtKAxP6vwwmvLFF19cMl/tD3X6
EM1M4Js444wzSs92m3Pgo9+MLKqP65prrilr1O7zSRuUndRWfonr9vzzz282
3HDDZsYZZxzv+e2+9Oyzz7bwzsKUwP3I9/zR7z/a7LLLLiVL0DOsnlf96bzO
G2ywQcnMd62NhPmeIYSRBx/8VlttVfo0rKPqfcxeAw+OutPzUC+V3nV96Xzx
1lj1GZncgRAmzMT0Gx4aPfXHH398+Q7aU5zQ4bvG82vPiJebhnHTTTcVb47Z
yXWeshqahmPvyL/vt7ni0W/6g1qP0/3VL9UHVs+XTApzWHkoZFX0imvfOnqv
vfYqfYSd14X+wm222SbXxTDGtcK/y6/FQ8hDZa+onkdrDj13dB1atXVFm/et
6DcjC+dIf/B1113XzD///BM8n2aqtnU+X3rppeaiiy4q3lZ6cX0dWSnmQuq1
kTsX+gfPMBlKV115VXl+8P519uXScFxHPJ+eLdZwIYQw3Kj5bPb0eeHrfYwn
noajx9i/k0lpZjHfoXw4+6vW1tboyWkPYcJMTL+p+ujZZ589WfMr1EI8Cbfc
ckuz9tprlzUlDaf6f9uun6cU0W/6A/W4Hga9tTwTNTugXn/2xPU20B79uV6p
1wVfmX3Rel3YM7V3uttuuzVPPPFEC+8sDAbqaB4Gc5Zly9KYac01b8KaY9VV
Vx20HNjoNyMLa009MPYoeG26zydNx4yhtvYv1Ply5b72ta+N4xvTuyl3QH+z
tXDoL+jEzhtPs+cYHZkXsJ5f6yqaHe3O+qxf53qGEEYu9vftpfKBuo919oM6
ZKXyCsgW5JfXo37AAQcUzUeGHG+OPg+Zg7zPPAJ0HXsk/bT/H8Jg0LZ+U/ez
+eHs/amJ7AXWnyuT79hjjy2enn7qe4x+0x+49lxX+hfUSp3ajXpc/oRnghqr
DV2fDqn27+67UT+ZPXXggQemfhrG1O+1jC8eX9qN68ShXtIHKmuirbykbqLf
jCxq/wtPnntN9/mUiWOPsS39mN/cz7Pu7fRp6F12/+MLfPLJJ1t4Z2FKUvM/
ef48W3gAO/sPeAStpfhzHnzwwb6d6xlCGLm4L7322mvlPmYv0zORhlPvY7zx
NBz7ZmbleIZZh8k54M1ZbLHFiq6z+eabN/vuu2/Rsz1bZbq5P0azDqOZtvWb
ij3tc889t/Rpd/bl+26qaWmq/TQ/oV/1m5ojRtdwL625QyP1vjex+b31OaGn
yrOkrb5a+wFyUXjNuue/yG3L/JfhiRrb7DC6jHlk1gk0t+59IT2k+l14Cgdj
TkL0m5GH+4oZU/Ybq35cD2tSfplXX321lfnP+pbNk95+++3j/xuB8PzJVOcB
5AWs1xNt2dpj8cUXL7ld1lvuESGEMJzwPLTP4DllP0GuvjrQ/YxuI+Og0yff
efDq2ItQc9F+zMjxM9SlZoXqDa57IdGvw2hjsPQb31e5x937gvaR6KjWt3TZ
fqFf9Zu6j6f+dJ9zvuu9biRqOPoS7Dfrd+meB0X3V4/LNm7rvdNmaDRm9dJs
6uvRcmg69gtoPGF4Uee+q31kcsl7tY7ozH9deumlm0MOOaTMF6PdDMb6IPrN
yIRnnP+ue11KU+HX8zzhAewVP0c/VvdziX4jf04Grus39Ce8pOY98ADyAk41
1bvHeklpOOqgnXbaqVwDroUQQhhu1Ll69sv0RdnDX3PNNUvflP4M63P3tO71
j3/m35kHav1uXS1nUm+y9bW+rPvvv7/0abXhZw2hnxhM/WZCvm7rDf2NMqp8
5/qFftFv3MNoNc6Z34fX5Prrry+ZL86H98B/aKa1flLnSS07UnLeXVOuLc8H
11o9T+7/zhsvul7atvAZmrnmeWKfoL7eZz/72ZK7T8P0GYfhgWvctc6jVfum
Pve5z42ts+t6wZx53gXayc9//vNB+32i34xM3IPkB6uxO9elPIG8ga6/NvLf
XJuuD/mPs8wyy9jXsa+p3nd962UO/UnNE5SntPpqqxdPIG9gd061NZXnmvuE
/8a9IkeOHDnaPqyfBrr/65knc8Dz8bTTTivPLfnF9jrsbegJtR6TReBeZ00t
r732tXfmH9Ny7LEdfvjhpaaxzh6sfbYQhiOD2T913nnnjTfX1PfzqKOOKntK
yb9pF/dTHhv+krPOOqtoZ3whfPxyFxx0BplEzq1sS5oOH0Jb82yHGhq/WfZm
CXX2E0wzzTQlu3iPPfZotZ+gzkfszifw93SdO+64o698ZiMd17g1BP3Sd5lH
gVeheiSqT4sn5/LLL2+tzp4Y1kPRb0Ye+oOXWWaZUmt3zr9zvXkuttXvIstR
Vrv7mnVvdz6KvirP99Cf1DxBHqpDDjm01Cu8gZ19nnyfK620UnmWu67oPfI9
c+TIkaPNwzNLrVBzGCaXuv6yz6rusLegXtGjfv755xefoWeZvJsxY8aUesX+
f50r0ZmHQMORmWNPRA6YtfZg9bmHMBwZjPxi32018qGH/u96Q31k9qX+/3PO
Oaf0dfN99AvDVb+pfgI9Uj5Ta/kjjzyy9Inyn/j9OudWuO/pE9F7aj6J39sM
C3t3aoF+7yPVq6RnabDzaOqc8u985zvFBzrddNON03/ju3T88ceX51Pmuw4f
fE/0TNM3Zd50rgvco2g3NJM999yz3BcHuk6ZVKLfjEx4umnnfH+ee/V88ou7
9tp6/tGGrVtpxTTj+jq0ZPd/Gv5Q7yuE3pmYz6quq5x7/442yGvLc5sjR44c
bR58LvYs25ofXNfRtCHaszpEDaPHWAaC59omm2xSnqVqx04thx+n6jj2ptWw
/eYLCKEX2tZv1Dt+pu/5euutV/pI+N+sMaxl6Tm01rbmp04phqt+Q7uhh+vj
OfXUU5uNN964+ExoF3XmaKfv0Hqv3vPktVrj2yfee++9x2ZK93Mf6bPPPlt0
w+65Z+at+mz0Lrz00ks9v07dF5Wh5pr2eXbus88z9zzNxRddXDydbeRchHZw
L3NPW3/99ctaoK4D6vfiC1/4QiMfzxpCzTTYOVHRb0Ym9hRXXnnl8fYNzdVw
n6Yh0hJ7pc5n5aXs7hdV55sr3ma/aBgaat/BBRdcME4uf32me9Y73/xdahn3
jRw5cuRo8+CJ0avZZt5WndlojUN7ke3vXmePQ5YlTcbMWHNC1Fn2QHimPVfr
uk2Ph31Uz1a+nhBGAxPTb/gz9CWecMIJRW/lS5vQod63B+i7TD/lN1D7yJWi
l1pH0hD4uWVK+P75PvZb3spw1W/o1jQLejXPjWyvzj6edzpqvwgvjr42+8bO
aT+dm05cfzIf1Elqp/o+rW133XXXkiPg+dArdU65TH3Ptc78FNe7njX7Fb/7
7e+av/w5dfdQU3MkeBW23HLLcq9zT+rsp3bPsz6xfz3YfVOV6DcjE74815K+
zU79Rqa6fUXrUnsYveJeTXfvzvuyZ0Kf3HTTTcvzNvQ3db/gtttum+Bc+hw5
cuQY7GMo5nKoRapvWo+obATrInVL7XtXh9X60n7FSJ3PEkInE9Nv6vwVfQTy
RKxHuw97jPfdd1+ZJXXdddcV7y5t1vfbHhF/h1qW90YWibrJ7FTaar99t4ar
fsNPoB+Nt8TvUT03k3o/rnmtalc5iOoAXp5+vf899NBDxfflOaMmr+/TvV1f
mfz7119/vefX0ftgf4CXw35A91xXfk/74rSb//pb/32OIw3ajcwb/XN6qmk3
nd+T2l9Hw6QB0m6mRB5U9JuRieejmc/yF91f6/ms+o3+4rb0G8/ggw46qHjH
6uvQb3hfec+j3/Q/tc+A/rzQQgsNeR2XI0eO0XcM1VzVOkfXa7oHet7Jd+O9
sfa2R8KTIwfMzJbkGIfRwMT0G/WNtaY9RDNI9aRM6PA9Mg+c52GDDTZoFl98
8eJlU8P6PtEFfM/0YuldGei+Y815GarMdZoTHUseZGcurvdp3SxnwDp5Sv0+
7k/6ch588MGiRztXnX6CyT1kt8hwcb55FWkcfv5QZ91P7uehn0n2bGfuj/s7
jcUz57nnnivXfK+vx3NGv+Qzo5vVz7Hm4uvPoSWFocUzXD+gvRvzDrpzkWpf
J72Z9uz6mZJ509FvRibuDausssp4/hu+wFNOOaV5+umnW+mfejv/jedU2/P2
wtBQcz/5R+nPQ13H5ciRY/QdQ6XfVKzlPPP0b/EX1HV+7aPiTeQl8Gztp3yO
EAbCxPSb2vNkhpveEzXqhA7ahew8nhS6jcyRqaeeumg3/r09SDWuXhK5sQPN
vanrl6HKXfe78w51z0OvOZFyBvQeTanfR+8OT9A111zTLLvssuPlLEzuUXON
9c6ffPLJxUsk/2Oo8+4n5/Mwe8rMIOvbmvtTe5pkAjl/+mJoU72+Hu+NPptu
Pc95UKNlbu/wwPNeRoi6h4Zc87jq+apz5eltcrlkeMuTmlJEvxmZ1Pzibj+k
md7Wvj/84Q9byy/mf7WH0p1f7O/NxtP/HPobax/PLntg5uxWv2eOHDlyTKlj
qPWbuh9nf0TPgbV3Xc+5J8rskCWhFkjuZBjpTEy/6fWovhSZUvQAHm96wEDn
ueh/4Ekfqtx1s+3kmq644oql16K+T1oV3Yrnw7yhKfX7yF255JJLyqw9mTdt
redqzq/rgd4x1Hn3k/N5XHzxxc3uu+8+zhzdqt/QEu1R81DR7nt9Pb2Cu+22
W7PccssV31J9Pfql7GTeNLlEYWiofj16zD333NMccsghRVfrzCvmvbEe4ZPw
3aXRTumeweg3IxOeGLp6d665fNlzzz239L22NT9cJoo+Z8+BzuevnlHezMwP
73+6c6rr8961ZYa4fnfrt6HON82RI8fIPQYjv3gg2BuVZdHdd8BnL0+CttTG
8zWE4cxg6Tc1B8Qe4BprrNEcffTRJXvE6w3Ef8MPss022wzZfcu62/qYdmO9
VN+nGpCGo4afkusnfhL7cLSKyckrfqfDe6HheC+07KF+Xgzk8+Cp6HxP1rqu
Retef27++edv5XrwWt1zw4d6fyL8D3UuG+/BfvvtV2aFq3E6tRvXuuuhZrQP
xdzJ6DcjE5rhUkstVbJvOuf/6dMzQ8gMvDbysWWx85bJZu+cK137n61x4wPs
f/i1aMzyHWaYYYax59lahEfaDElruKHeR8mRI8fIPdqeHz5QHn/88ZLrYR2u
16NTvznrrLOKP74Nf2sIw5mJ6TdqUl4Ca0J1vHk6Ezpk6ek5VGf4c34GT5u6
1t6jdaS62SyrE088sexLDsSHI5PK67WlU+TIMRiHa3+HHXYoWddDuT8xmuGh
cV+TtSVfmg+iW2er/kB9j+4tA+3r7JXoNyMT+o0sODphpzeSxswn+Morr7Ti
7/Ysta7eaaedxsnV18dpLbvzTjs3jz/2eAvvKAwFf/3LX5s//Mcfin958803
L/thnfs1ZrBYf/EG2x8b6j7mHDlyjNzDOsS+2KTWb9Zi9WiDmuNOQzIzhsfU
Wq7eD9veHwlhODMx/YZ2Yx4RjVMfjRpnQofee5qsNaQ/Z49I/apmkl1sf4iG
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
9gvx0bCPt7CDGkUyV6iFIkeFmhb6hZOJi65Rvr5mb4kcqvvuu6+ufN3qN7UB
81f2nMk2YU+yPLcY/wX91Pn8rP0rBQ2I7Hxqzcpzdphnc58XmbMj/yTnOnEd
ea7wTOHaUh9V2mcs5x2R2U1PAuqm+a6yxqll301G/aZ1QQ3MFVdcEevt0n7e
aI5kMTLOkjVfFOQDoGPTG6A05yz3d7Svam2DdsM8iLkFXtlyHY7nHZr12LFj
I+uoXp5rIiIi0nwsSr+hlj73JiIjnPX+wg72xNk3QuehVooaE+pz2A9nncVa
l9opdA483uSMT548OWpb6mleqX5TXfJ6PmcqlffnyH3QWTehJ1LzVEm/ofx6
+GrIg+a+Ls/ZIbf490N/H9+feqk9q3U4j+gUPJdmzpw5vxal1MfHkXO0qMXE
z0feCHpyve1Pq9+0LnhejBs3LjSV8n7e9EpDUymin3f+nuAz5HlOjQ3acn49
eq3y/Gfc4lkotQn+ZTQ48q7JMMp15nk/gj877bTTzDESERGR+SxKv6FOhDUq
a2L0CupSFnbgScBTQw4I+gxrXHIoWE/nvGL+m59BS7j22mvTq6++Wje5xRn1
m+qS+5nhvTnhhBPiXi3N66S/GfUz+GSmT59ecb+h3JedjCbOYceOHWOPuzxn
h732v82qfD0m/yTrGbkHM2ternX28ZXXFbA3jefvmWeeifVNve1Pq9+0LmbM
mBE963fdddcF6mB4Bh977LFp0qRJ8WyulHzf3HvvvfHcy77A/HrUejJeff75
5zWd393WKdf78jXkWceYxvMN/yH5OOpwIiIiAovSbxpz5P0i/Nt4f1nnst5i
jYu+Q90Da+Abb7wx1mX1WI+vflNdmLtyDZjL0vccjZA953zvoR0OHDiwsPVR
zr3h9+HvyPUJ2U/GNS8yZ6etg96Ws27QzC677LLUu3fvn/RPQ1fmO4deTL3B
mDFjordkvenBGfWb1gXaMRlM2267bVp99dXnX0fGDHysd911VzzHKoVe03g3
yJkjF7l0LOb5RD0hdZ38XD3pmW2FnONGr7IjjjjiJ8857h08VNxLzCvqpc+D
iIiIND+V6jd5vsh+EWtc6rdZW6HZ4E+gN8/1118fuRTUTNV6P99FoX5TXXIO
zciRI8NTnusFOFjTk4WDD4PeLuw5VwpeDjKaqAvEZ1aq3aBRsuddZM5OW4dz
SPYrfoJhw4ZFjif1caxpSnM9+L5xPehfRx0d62Wyiut1faN+07ogh3bw4MHh
N11llVXmX0f+P95AcriLylXn+8J3AK2otK4QvysaNzne9dRXsC2BdvPcc89F
jhsZ+OXPOfYjmFOgz9HL02soIiIiGfat6RmFr+GYY46JfbvGHPjE8SeQdYwH
GM3muOOOi7kqtSXkGuesm3pef6jfVIdcN8V7RWMkj6m0H3rOvaFXGvdapfkn
OVeCGj/6r++9996RIZlfb8UVV0wbbrhh6AdokpXm7LRZ/t9y5Mcffozzh1bG
uveWW26JbHP2nbO/Kp93NDO0Ydaq9Pa58sor02uvvVb3/gL1m9YDzw7q+Hg2
4D2lxi9fxy222CLytan/LKL/87x58+IZhWZNDld+Hb4z9CrHu4aPTWqLXJdL
thd9C7lXyPAq9xcyr+LvqcfjWouIiIhkWBOgrVC3wNyS7NfGHOzxcdCHihw+
+pmyFmNuSU4ja7Os3dTzHpL6TXVAu2H+yr41PvMOHTos4DPPn4ccbWrzKs0/
yd8H6qL69esXWg2aTWk/EDQdtB3m1pXm7LRV0G7+8d0/4rmDz4n8Tuqh8Cmw
/izNY8X3lPvhkeWJRwdNmPui3v0F6jetg5x3zjjIPgbeG9bi+TqS6X/NNdcU
ltuP5wx95pxzzonxp1Rfxrd21FFHhb9DagvGJ64dtW39+/dP/2Pj/5FWXmnl
n8wn2ANjXsUzrh79yiIiIiLVRv2mOuT6PnpAkfOQc7FZ0+M332STTeKacG2K
yJVgvowug3cMXzu+j9LXo3aHmio0B/uBNJ6sx1ETgM47ZcqUqLHcc889I78z
57Dm85371u21116h0XHe33vvvbrWbEpRv2kdZN0XbRHvBNpNvpd5fnAdqYUh
swbPWKXwHeC1hg8fHtnq+X7Bt9alS5d4JqJnS+3AM4vrj+5GP3A0PerOS+8T
9gvwMF9++eWh9YmIiIhI01C/aXmY71LbR40A9VH4zEu1FPaaqeEjAwKvF2vc
SiFTYuLEiVFLiG5Q+nrkO1ErmDOSzb1pPGg33HesZcnmxMtEbQn+GrS53H8l
X1++W4MGDYq+dc8++2xoZt988021P0ZhqN+0DngWoEny7Nhuu+0WWJNTR0Ue
DfldRdX75eybAQMGhN+m9Pm+++67h5+t1p/vbYnsz2JvgMx19GrqfsvvE/Yo
Lr744phL1GOfBxEREZFaQf2mZcn9VfCZs0bBZ1OaB4qWQk42n4+6Pdb0leTQ
ZF8Iv4v8XNZg1PHk1+O1eQ/0uKJGsN76VFeLnPfAWgSNjcwgch34vpBlU94X
POtkaHX4n6gjmDx5cqvNgVC/aR1wf+ee96V9APDv8cw9+OCD47lRFPSdJvv2
t7/9bfjW8uu1b98+9e3bN/Kh+L5JbUDOFz3A77zzztSnT594vpXmI+XxhX0D
aoXrtc+DiIiISK2gftOyoN2gpeAzZx1fnifBOuWwww5LV111VXh0Ks2hyXVT
ZFRwfnIGS/m6iLoqXq/ec1daCrQb8lr5bnDu8NJQX4K3iR65uX6gVJfj+3XA
AQfEPjQZEKxDW2sOhPpN6yD3xzv99NNjHV66Lt9ss83S7373u6gXLIpXXnkl
sqB23HHH0EDL+xbdftvtac67cwp7PakM6t34HlN7S9402g2em3zd8FCRy46n
ivGFZ537AyIiIiJNR/2mZUCHwUtD/jWZN+xV0sultD8HayLWLePGjYs9bfIg
mwoaDK/59ttvR/8j1lmsgUr78TLXxiuC7/3xxx8PbUkWTu7fRRYI3xn6ez/w
wAPhS0D/olaK70w+v9QOoN9QK0U9Ab2nyKnm51nv0gu+Neo2GfWb1gG1Uzff
fHP4xchYz9dvzTXXTLvssks688wz45lWFC+88EK8Fh5ENM/8emhFo0aNCt3z
ww8/LOz1pGnkZyG9IcjvoraNMbi0Xxg6do8ePdJll10WWW/WTYmIiIhUjvpN
y4B2w17lXXfdFet93ntp/6e8n43P/KGHHgrtppJ+4Wg3ZFc8+eST6fjjj4/a
h1VXXXX+66Hd4L1BR7rnnntin72I/NHWSl6vvPHGG3ENyeGgdmTbbbZNG26w
YXxfSn1UaDd4cNh/xnPDfUkuK/Uh+HZa+z60+k3rIOd0HXjggWn99deff/34
b3p5o0XzM0WARsrzitdCHyqtP8Tbwft49ZVX07zPW1+9Yb3Bs5Ac4ptuuin6
ktG/kJq6fL3QbtCsTzzxxOhdZt2UiIiISDGo3zQvrNGZt9JPmsybM844I225
5Zbz+0jnDGHW+fTnYK+S9VAlNUz8W/wd1CJQ28M+eWmdFq/JfDvngbJ/bt3U
guR8G87j7P8zOzJApj48NerQTvz9idHzG/9UaT/w7KNCJ6PfCusXerXjuZk2
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
n90rr7wSNY89evQI7TW/HroBPjh6Vr/zzjsFfDJpiDzO8B3gnFODiscm70fk
nCi8auwNcM3wRVnXJiIiItKyqN80TJ7Xsra/44474vejyeB9YX1T3o+D/2ZN
uP3220cfKjJ02aNsap8pXps1zuTJk9MJJ5wQ6xz2xbk+zKfz62bthrwIfCT4
Vj784MOq+27Qbr6Y90Xkj3IOn3322TT14alxLtnjxVPDHvvw4cNjzcC5RX/a
aaedIo8EbwR1FHw26jnIsMHnhB8Azaoh7aZ0v5jfwx4/9Rj0kOIeopaNXBuy
p3l/6EutJd+52qjf1Cc8a6i5pKcQGnQ+T3z3eLbgI6ReplKyLk4PPvRoakzJ
kM6vRy0qXju03KbUm0rjyOMMz+Q+ffqEdoOPMT9fGWvQwHkuX3DBBbGXQK8p
c9xFREREWhb1m3+S1xNkMOLB4LzQaxu9gawZNBH0k9122y3yANBpSutz+P9o
OZxDfoZ6nPvvvz/Nnj27UbmOrGW//PLLyHxB75g6dWr4d8jmoE6oXLfJOcVb
bblVOuTgQ2JujSbR2HVx3g/n36BhsK/K70DTYG6P/sR8fe77c9P/nfN/4zpQ
34R/ZuZrM0OjwkPDnixZyczvn3j8idBIqEmi5oLPgXZy+umnx7mkHzeeGq7b
tttuGzVQ1H6xjlucr6Y0cxgdh3/DWpx1JvoW9y76D78bTQifDa+NDoYvqbHX
RRqH+k19ka8Xfduo9+QZl/UUvmN8N4cNGxa9pNE6K4XnC3Wdt956a2jSvBZe
j+zz4JpcddVV8QzmGSTNQ65V5dmNdsO4Wuq7yc9XvFHsSeC/ouch/6Ye8tRE
REREWhvqN/8kz2Px6qNBoDmghZC1Qv9ttADmtbzOwvSFXF+AJkEuALoPNUJo
BI3xl6PdzJo1K3IhyDumvwd7ntT9sP/J2qZUN0K7oRbo90N/n26/7fb47OhP
rMcasy+KdoNuwxoOrYY1GvVNM2fOjHUtmgxZzQ8+8GD6jzv/I/QYcnjwz4w9
d2xkWNBjm9wM6h4OPvjgtO8++8Y14f3jV+L8ULu0ySabxLmkRgK9hXNK72b2
e/HL5LXD4rSbXDfGvyP7Jvf6JpOIPu70+6YuikwPNC0+C7oNn6+x10Uah/pN
fcF14PtOHz16UGU9JdfO8PxDw0ZTLkJPob8RGu+5554bunR+LZ5vjD3ksvPd
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
n2oL/w3azezZs9Nf/vyXNGH8hNC5yCvCb0MG8eqrrx5aTal2w38zN9p+++2j
Ju3qq6+O2jXyjsg5poe7iIiIyOJgzsDeH/PHG2+8Meru0W2YZzD/yNoMPS3Z
A6RWm7kd2gz9Lznw3KDzsE5n7slcG28wHuFll102/j89SQcOHJj+9Kc/RS6f
9VSNQ/1GRIpG/aY6lNYp83muueaatNdee4WHlX2Q/LkZd3l+UmNz1113Vdxv
Ko/3jz76aHhrd9xxxxjry/tNoSPxnmbMmNGm+x/l68R541qhe732X69F/t+k
SZOi3zqZw+g21LuV6jU5t2j55ZePuRNzJTQesqDJE3rttdda7HslIiIirQfm
cuwB4dvOOXt57yhrN3ip8fv26NEjHXroobEvR20UXm72BMnGYS6IPoMXmyw+
5pzMPZm/oOEwt+HP+vfvH15h67sbh/qNiBSN+k11YOyjRwD5cPTtPvDAA2Nf
BO2m1AeDl4N6nKuuuiqel5X2m2K8nzZtWuTq7rzzzvP3aUrPM+M3GgPjdFvP
0c250py3F154Id16661p9Ohzou6J7L/NNtss9qyYIzHPKf/+oN3w9+QInXrq
qaH50OeB8RHPM98p97FERERkSch5ifRJoGa7V69eMc/INVH4qcndowZ+jz32
SMccc0zsNTGPZA5DNjF7eMwFp06dGjnHzE3IzGGegk7DOh1tgd9LXRVaEHNG
cvqYu6rfLDnqNyJSNOo3LUvOu/nkk08iOxg/Kvly7I+w31G67l933XVj7KV/
ANoB/o+mUj7e77///jG+l/pEVlxhxRhLqAUiI5n6oLYG9/iXX34Zfbn+9re/
pekvTU+PP/549PuiDzh7V3iTyvtJlftt0MU6dOgQtVJc31GjRsW8p9LcaRER
EWm7MJejTyXZeXvvvXfM5Zh35Hp76qQOOOCA0GzI5Xv22WfDS82cBg8xvcGZ
47Avxf/SZ5w1+5tvvhnza+Y8t912WxozZkx4ctinQsNRv2ka6jciUjTqNy1L
zr0lB46eQ4yxfE60m9L+RNRRMS6PHj06snHRbhgzmwrjPeMD4/0+++wTeyqM
9/n10G423GDDqAUiF6ct6gxoa3hi6AFFztCVV14Z91vfQ/qGf4aeYHikGMPK
+0mV+2343gwePDj2sx544IHwWTFnsl5KREREGkve/0OHueGGG8IHvNFGGy1Q
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
O6OXVfk+gIiIiIhIaybrJn/9618jD2fIkCExR0Y/KdVwyMXBt04vaDSPTp06
Rf/xzTbbLP63Y8eOqUOHDrF3yr/l5+ntyu+gr1XXrl0jL5meRNRglefpqN80
jPqNiBRNtfWb3N+PTH2ecfQnZC+BfQDGkvw+eEYz1uDrvOeee9KcOXPiPTU2
l01EREREpDXwxRdfRP8OMmvw0uDF6datW2gFWZNhDk3+AHpOzifgyBoPuQX8
zJprrhk1U2g6/I599903/O6TJk2KzB3qtspRv2kY9RsRKZpq6zfloMvgrWEf
Ac9nfh/sAWy33XbhvaHeSkRERESkLcPcHA2HbGI0Fubs9PUYNmzY/Jooeo2T
P4Dega+G2qhcH8WfrbvuuuHFIePmkEMOScOHD08TJkyIbBx+J2v6ReVMqt80
jPqNiBRNrek3+Tk3dOjQheo31O2q34iIiIiI/JPsZ6cXK9mQeNXRYMgkJt+m
b9++4c0hZ5I8HA7+mz/j7wYPHpxGjhwZfWHRbdBe0GwW53PPecrTpk2L30Fv
EXJ2rrnmmqi3Kufrr7+OvVrWFgMHDkwHHHBA+IbQDNAOFgdeo/POOy/yfPba
a6/QRfi8tYr6jYgUTa3qN+XPOfUbEREREZGFg85CLiR6CvPp3BOcjJxnnnkm
eoOTeYxfhYP/5s/4O37m1VdfTbNmzYqe4p9//nloM4vLKMg5ljmLh9+HHoF2
w9qhnO+//z40HF7jhRdeiEzk6dOnh25AlsLiyPVivOfHH388tJuF1XXVCuo3
IlI06jciIiIiIiLFon4jIkWjfiMiIiIiIlIs6jciUjTqNyIiIiIiIsWifiMi
RaN+IyIiIiIiUizqNyJSNOo3IiIiIiIixaJ+IyJFo34jIiIiIiJSLOo3IlI0
6jciIiIiIiLFon4jIkWjfiMiIiIiIlIs6jciUjTqNyIiIiIiIsWifiMiRaN+
IyIiIiIiUizqNyJSNOo3IiIiIiIixaJ+IyJFo34jIiIiIiJSLOo3IlI06jci
IiIiIiLFon4jIkWjfiMiIiIiIlIs6jciUjTqNyIiIiIiIsWifiMiRaN+IyIi
IiIiUizqNyJSNOo3IiIiIiIixaJ+IyJFo34jIiIiIiJSLOo3IlI06jciIiIi
IiLFon4jIkWjfiMiIiIiIlIs6jciUjTqNyIiIiIiIsWifiMiRaN+IyIiIiIi
UizqNyJSNOo3IiIiIiIixaJ+IyJFo34jIiIiIiJSLOo3IlI06jciIiIiIiLF
on4jIkWjfiMiIiIiIlIs6jciUjTqNyIiIiIiIsWifiMiRaN+IyIiIiIiUizq
NyJSNOo3IiIiIiIixaJ+IyJFo34jIiIiIiJSLOo3IlI06jciIiIiIiLFon4j
IkWjfiMiIiIiIlIs6jciUjTqNyIiIiIiIsWifiMiRaN+IyIiIiIiUizqNyJS
NOo3IiIiIiIixaJ+IyJFo34jIiIiIiJSLOo3IlI06jciIiIiIiLFon4jIkWj
fiMiIiIiIlIs6jciUjTqNyIiIiIiIsWifiMiRaN+IyIiIiIiUizqNyJSNOo3
IiIiIiIixaJ+IyJFo34jIiIiIiJSLOo3IlI06jciIiIiIiLFon4jIkWjfiMi
IiIiIlIs6jciUjTqNyIiIiIiIsWifiMiRaN+IyIiIiIiUizqNyJSNOo3IiIi
IiIixaJ+IyJFo34jIiIiIiJSLOo3IlI06jciIiIiIiLFon4jIkWjfiMiIiIi
IlIs6jciUjTqNyIiIiIiIsWifiMiRaN+IyIiIiIiUizqNyJSNOo3IiIiIiIi
xaJ+IyJFo34jIiIiIiJSLOo3IlI06jciIiIiIiLFon4jIkWjfrNkfP/99+mr
r75KH3/8cZo9e3b629/+5tGI46233kpvv/12jAucvzlz5sS1njt3bpzTzz//
PM7vd999l3744YcWv74iIiIiIkWifiMiRaN+s2SgLfBMe/rpp9PNN9+crrzy
So9GHFdffXX605/+FGPCLbfcku644450zz33pIcffjg99dRT6ZVXXgld57PP
PgsNR0RERESknlG/EZGiUb9pmB9//DG8N++++26666670tixY9OgQYNS3759
PRpx9OvXLx111FExHgwePDidcMIJadiwYem0005L55xzTho/fnyaOHFiXPup
U6emJ598Mj333HPppZdeinEC/857772XPv300/T111/HNeHaiIiIiIjUIuo3
IlI06jcNg07wzTffhJ4wcODA1KVLl/TrX/86tW/f3qMRxwYbbJA23HDDGAs6
dOiQNt5447i+m2yySYxfnTt3Tttuu23aaaed0m677ZZ69eqV+vfvH/fB6NGj
w79z7733pr/+9a9xj+CH4tqIiIiIiNQi6jciUjTqNw1DLQ81PbynXXbZJS2z
zDJpqaWW+sl58ijm4Nwut9xyabXVVgu9B10HPQf/zsknn5wuvPDCNGnSpPTg
gw/Or7vCm/Phhx/O13T05YiIiIhItVG/EZGiUb9pGGp1qJ266aab4vXRF372
s59VXedorQfnlnO87LLLphVXXDGtuuqqMWbg3+nYsWPaaqut0vbbb5/22GOP
dMQRR6RTTz01XXvttWnatGkx5ujLEREREZFaQP1GRIpG/aZh+Nz0T0Ij2Gab
bX5yfvCKrLXWWlWvT6rVo127dmm99dZL66yzTlp77bXjXK255ppxPfHYMH6h
03Ael1566cVqY1nfWWmllcKfs+OOO6bDDz88jRo1Kt14442RnfPCCy+kN998
M33wwQctdt+KiIiIiJSifiMiRaN+0zCL02/QI37zm99UPR+4Vo8+ffpEls0+
++yTevbsGedq5513Dg/N1ltvnTbffPO00UYbhabzi1/8Yon8Tfz9z3/+89B9
1lhjjfDm8Ht22GGHtP/++6ehQ4dGHvKjjz4atVVcQxERERGRlkT9RkSKRv2m
YRal36Ah4Bchf/ekk06qen/uWj0uu+yydPHFF6dx549LY8aMSf/rrP+VRo4c
mU455ZQ4b8cff3w68sgj04EHHhj6DvnFXGdyojfbbLPIisa/w/VfYYUVFpk/
lDUd9Bwycw466KB4HTw5f/7zn9PMmTPT3Llz9eOIiIiISIugfiMiRaN+0zCL
0m/QbvCLdO/ePd1yyy3xMx4/PWbNmpXeeOON9PrM19Nrr72W/mvGf6VXX301
ruH06dNjzKJPOP298MtwrzFuTJgwIZ111lnpd7/7XTrggAPi2uOzWWWVVULD
WZQvhzosMnPWX3/9tOmmm6Zdd901DRgwIJ133nmRecx70o8jIiIiIs2N+o2I
FI36TcMsSr/J9Tt77713evzxx1vs/bRW6BnF/fXll1/GPYDGg2/m1ltvTZdc
fElcd/qJc765J7fccsvoQ06mDlk4i/LlrLzyynEf7bXXXpF1jB/nL3/5S+Tj
fPrpp+nbb79NP/zwQ7U/voiIiIi0MtRvRKRo1G8aRv2m5cgaDj2/5s2bFz3B
6f315htvxjXHp/Pwww+nyZMnp3HjxqXBgwdHH6qNN944xsGF+XK4Tmg45CdT
69ajR4907LHHRj7O888/nz7++OPQcEREREREikT9RkSKRv2mYdRvagu0He4R
ekxNmTIlMnWOOeaYtOeee6Zu3brFPYNWg2bDNSq/n6m/oq6KvJ0LLrgg3X//
/emVV16JXlXffPNNaEgiIiIiIpWifiMiRaN+0zDqN7XF999/HxoOtU94c8jU
wZdz7733pssvvzwNGzYsaqU6deoUGk75/YxHBw2H3ub0v6JHFjoOfcfff//9
qKVSwxERERGRSlG/EZGiUb9pGPWb2gatBc3ls88+SzNmzEj33HNPZBXjyaFX
OV6bdddd9ye5x2TlLLvsspGJvN9++6Uzzzwz3XXXXZG789FHH6W///3v5uKI
iIiISJNRvxGRolG/aRj1m9oHDee7776LzJz33nsveoWTUXzTTTdFD/Hf/va3
kX2DhlPaqwoNh57k6Dtdu3aNnuOjR49OTzzxxHwNR0RERESkKajfiEjRqN80
jPpNffLV//dVeuftd9IjjzySLrzwwhiHyC7u2LFjWmONNaL3Oz3g8/VEx2nX
rl3q2bNnOvfcc6PXOH3PP//889CGREREREQag/qNiBSN+k3DqN/UJ9//4/vQ
cMglfv3116MX+Q033JBOOumktOOOO8Y4hIaTrydaTvbicJ2PPvroNHHixLjX
0HBERERERBqD+o2IFI36TcOo37QOvvzyyzRr1qy4l0899dSoqdpqq62iVxW6
DfVUWcdZfvnlIzeHPuNXXXVVeuqpp+K+JDfZbGMRERERWRLUb0SkaNRvGkb9
pnXAvYuGw/310ksvpdtuuy10HK4fdVM///kyoeFwoOGQlcO4RT3VGWecEdnG
c+bMsT+ViIiIiCwR6jciUjTqNw2jftO6QHuhBzlazAMPPJDGjBmTevfuHWPo
mmusGT2pyDXOGceMV/SxGjFiRPS24l5AB1LDEREREZGGUL8RkaJRv2kY9ZvW
B9oLtVDvv/9+evHFF9Ptt9+eTjvttLTD9jvEfYaGk68zGTlrrbVWXHvGMu6D
N998MzQgNRwRERERWRTqNyJSNOo3DaN+07pBx3n33XfDizN8+PAYmzp06JBW
WXmVqKnK13vVVVdNW265ZRowYEC65ZZbokc5ucbWU4mIiIjIwlC/EZGiUb9p
GPWb1g0+GjQc7rtnn3028ooPPvjgtEmnTULDydd7mWWWCQ1n8803T4cddli6
9NJLY/z69ttvQ8MRERERESlF/UZEikb9pmHUb9oGWcd55ZVX0vjx49Phhx+e
tthii7TaaqstUE+18sorp44dO6ZDDjkk+pHz85999pk+HBERERFZAPUbESka
9ZuGUb9pG+RcY2qiXn/99ehPNXDgwLT11luHhlN63bOGQ+7xuHHj0quvvqoP
R0REREQWQP1GRIpG/aZh1G/aFug46DBvvfVWuvHGG9PgwYPjuq+xxhppueWW
m3/9ufYbbbRRaDgTJ06MPJx58+bpwRERERGRQP1GRIpG/aZh1G/aHmgwXPd3
3nkn7v0TTzwx7bTTTqHhlF//TTbZJGqtrrzyyuhLZR2ViIiIiID6jYgUjfpN
w6jftF3QYehNRS3VsGHD4v4r9+Ew/pJpTF8q7lvGva+++qrab11EREREqoz6
jYgUjfpNw6jftG1yf/H7778/fDg77rjjAj4c+lIxBnfp0iUNGTIkTZkyJX5e
RERERNo26jciUjTqNw2jfiOAJoM2g0aDVsO4i3aT7wc0HbSdk08+OT322GPp
448/jkxjEREREWmbqN+ISNGo3zSM+o0ANVGMadyb1EpRM8XYm+8HaqrQcHbd
ddd0wQUXpKeeeio0HBERERFpm6jfiEjRqN80jPqNQO5LNevNWZFVTGZxp06d
0gorrJCWXnrp+fdF+/btU9++fdNll12WZsyYkb755pvoSy4iIiIibQv1GxEp
GvWbhlG/kQwazhfzvohe4fQMP+CAA9IGG2wQGk6+L1ZaaaXUoUOHdNhhh8X3
Zu7cuaHhiIiIiEjbQv1GRIpG/aZh1G+kFDw45NpwD5577rlx/du1axf3w89+
9rO01FJLpWWXXTZ17tw5xjiycD744AP7iouIiIi0MdRvRKRo1G8aRv1GSsl1
VGTbPP/88+nf/u3f0g477BC+m1INZ+211049evRIo0aNStOnT0/fffdd/DsR
ERERaRuo34hI0ajfNIz6jSwM9Jh58+aFv2bQoEFpiy22WCDP+Be/+EVaZ511
0n777ZduvfXWNHv27MhAFhEREZG2gfqNiBSN+k3DqN/IwsBLg4bz1ltvpcmT
J4eG8+tf/zr8N9wfZBqj4Wy55ZZpxIgR8R167733qv22RURERKSFUL8RkaJR
v2kY9RtpCDw49Jm65pprUs+ePdNaa60VvcTzfUId1R577JFGjx4ddVRk51hH
JSIiItL6Ub8RkaJRv2kY9RtpiFxH9dRTT6XTTjstde/ePa255prz75Pll18+
rb/++qlPnz7pvvvui9wcNBwRERERad2o34hI0ajfNIz6jSwJc+bMSbfffnsa
MmRI2nTTTaMHFTnGHMsss0zq2rVruuCCCyLz+NNPP6322xURERGRZkb9RkSK
Rv2mYdRvZEngPnn77bdjzNt9993TaqutFhpO7kfVvn37dNBBB6UJEyakWbNm
VfvtioiIiEgzo34jIkWjftMw6jeyJJBpQ13Uc889Fx6czp07p1VXXXX+/bLK
KqukzTbbLA0cODD95S9/SV9++WWLfJ9EREREpDqo34hI0ajfNIz6jSwJP/74
Y2g4eHBuuummn4x71FCh4fTo0SPdcMMN4cFBwxERERGR1on6jYgUjfpNw6jf
SGP47LPP0osvvpjGXzo+vjsrrbRS3Cv5vtlkk03Sqaeemh588ME0d+7car9d
EREREWkm1G9EpGjUbxpG/UYaA/2o0HCmPjw19e/fP2288cah4eT7Zt111037
7rtvGjduXHr99der/XZFREREpJlQvxGRoqkX/Sbnh/Tr1y/qT9BMWuJ4+OGH
05QpU9Ipp5ySOnXqpH4jS8TMmTPTeeedl/baa6+0zjrrLHAf48FhXHziiSfS
119/nb7//vtqv10RERERKRj1GxEpmnrRb+jlQ0+fX//612mXXXYJD0NLHHvu
uWdklmy55ZYL5NGq30hDfPDBB+nRRx9NI0eOjH7i5Tk4u+22W7r55pvTu+++
GxqOiIiIiLQu1G9EpGjqRb+hD/PSSy8dOg66ycorr9wiB7UvvN4vfvGLeH31
G1kSvvrqqxgDJ02aFPof91LOweFeZswePXp0eHA++uijar9dERERESkY9RsR
KZp60W/yuneppZaKdXBLH2g3vL76jSwJ1ESh4dArfMCAAXEvo+Hk+6d9+/ap
b9++6Yorroh8JRERERFpXajfiEjR1JN+U0uH+o0sCeTgjB07Nurw1l577fn3
D7WAW2+9dRo2bFiM2+g99CAXERERkdaB+o2IFI36jfqNNB/vv/9+uu+++9Lw
4cNTx44d598/yy23XFprrbVS796907Rp09I333xjjrGIiIhIK0L9RkSKptb0
mw8//DA99thj6YILLki9evVKXbt2rerRuXPntPnmm6cNN9ww9Br1G2kMX3zx
RfQJv+aaa+K7tPzyy0ctHnWAZDnttNNOafLkyTG+m2MsIiIi0npQvxGRoqk1
/YbXefvtt9NTTz0V/XmuvPLKqh6XXHJJ5Mz2798/NBz1G2kMfGfQcOhDf9BB
B6V11103NJyc5URfszFjxsT9/vHHH1f77YqIiIhIQajfiEjR1Jp+w2t8+eWX
4cN56623wrtQzePFF19MU6dOTeecc048Z9VvpClMf2l6OmnYSZF5Q/ZNvo8Y
G4899tjoU8WYKSIiIiKtA/UbESmaWtNvyHDldf7+97/Ha+JdqOYxd+7c9PLL
L6fLLrssdenSRf1GmsSsWbPiHurTp09q167dAuPhbrvtls4++2zHQxEREZFW
hPqNiBRNrek3tQafm/7O1157bdpmm23Ub6RJkGP8wAMPpFP+cErapNMm8+8j
eoqTa4wH55lnnonvmH2oREREROof9RsRKRr1m4ZRv5EioCbwjTfeSFdfdXXa
ZuttIv+G+2iZZZaJMXyvvfYKfYefa4vfMxEREZHWhvqNiBSN+k3DqN9IEXz3
3Xfp888/j+9Sz54900orrRT3UM4x3m677dLEiRPT7Nmz01dffVXttysiIiIi
FaJ+IyJFo37TMOo3UgQ//PBDaDhPPvlk9DLbaKON5vejR8PZYost0tixY6OG
6pNPPqn22xURERGRClG/EZGiUb9pGPUbKRKysEeMGJG267Zd+uXqv5x/P228
8cZp6NCh6c4770xz5syp9tsUERERkQpRvxGRolG/aRj1GykSMnAuuuiitP9+
+6f11l1v/v1ET6pDDjkkXX755dGrSkRERETqG/UbESka9ZuGUb+RIiHfZvLk
yem4gcelDr/qMP9+WnPNNVP37t3TmWeemV599dVqv00RERERqRD1GxEpGvWb
hlG/kSL58MMP07Rp09KoM0elzTbd7Cd9xAcOHJheeOGFar9NEREREakQ9RsR
KRr1m4ZRv5EimTdvXox71El17dp1fh/x5ZZbLq2xxhrpgAMOSH/+858j65jM
YxERERGpT9RvRKRo1G8aRv1GiuTbb79NH3/8cbr99tvju0Xv8NxDHA2nR48e
6Z577ole42g4IiIiIlKfqN+ISNGo3zSM+o0UCZ4aNJxHHnkk9ezZMy2//PJp
6aWXnn9fdevWLd10003p3XffTV9//XW1366IiIiINBH1GxEpGvWbhlG/kSL5
8ccfQ8N54okn0oEHHhi5xfhu8n3VuXPnNH78+PTKK6+EB0dERERE6hP1GxEp
GvWbhlG/kebg+eefTwMGDIgeVCutuNL8+2rzzTdPo0ePDn3no48+qvbbFBER
EZEmon4jIkWjftMw6jfSHLz00ksxlnfp3CWttupq8++rTp06pREjRqT77rsv
vf/++9V+myIiIiLSRNRvRKRo1G8aRv1GmoMZM2akUaNGpe7du0cNVb6vOnTo
kI477rh08803p9mzZ1f7bYqIiIhIE1G/EZGiUb9pGPUbaQ5ef/31dOGFF6bf
/va3ad11151/X7Vv3z717ds3XXHFFXHfiYiIiEh9on4jIkWjftMw6jfSHLz1
1lvp6quvTv0O65c2aL/B/PtqnXXWiXvq/PPPTzNnzqz22xQRERGRJqJ+IyJF
o37TMOo30hxQGzV58uR03MDjIsM431fUUlFTRW0VNVYiIiIiUp+o34hI0ajf
NIz6jTQHixrPV1999dStW7fIMH755Zer/TZFREREpImo34hI0ajfNIz6jTQH
9Ja6//77Q6eh51S+r1ZdddW01VZbpaFDh6YXX3yx2m9TRERERJqI+o2IFI36
TcOo30hz8MH/z957QFlZpd26o7t/FWjxgCC/ZDjAIB6yCCL5ErRJEkUQQTgE
8QJDCZJDA0qWJEFaAR0iIHIlJ0G4RIFBbmJjXeQQVESgQVpb1+3ntVf1ZlNV
pF071J7P6DW0saja9aW11vzmO98LF9z69evdoIGDXLGixRKvq4cfftgVLFjQ
Pf/889aDij7jkRhk7/AZr1275v75z39G+nAJIYQQQsQc0m+EEKFG+k3KSL8R
qcE333zjNm3a5IYNG+aKFy+eeF09+OCDLkuWLK5UqVKuTZs27vXXX4/IID/5
888/dwkJCabhCCGEEEKIu0P6jRAi1Ei/SRnpNyI1+O6779zWrVvdqFGjbP72
19Xvf/9799BDD7msWbO6okWLunLlykVktGzZ0r3//vuWwfPDDz9E+nAJIYQQ
QsQc0m+EEKFG+k3KSL8RqcHFixfdl19+aT6XkiVLJl5Xv/vd7xI1nEceecRl
zpw5IqNy5cpu4sSJ9hn5rEIIIYQQ4u6QfiOECDXSb1JG+o1IDS5dumTz9YQJ
E6xWKvi+i/RgTfHmm2+67du3m1coXiH758cff7RjwHPg0KFD5kk6cuSI9YAn
Iwh96/Lly+7q1avu+vXr7h//+Ic9K3/99ddIf3whhBBCRBDpN0KIUCP9JmWk
34jUgJqk/fv3u0mTJlm/qUjrNdJvkgbt5uzZs3YcZs6c6YYMGeL69etnx4Z8
6Y0bN5pHCV3n5MmT7syZM6bnxOvzUgghhBD/QfqNECLUSL9JGek3IjXAf0Of
p7fffvsm/YbaqQceeMBqp/LkyWNzfWoOfgZrCH4mP1v6zW/gnfnll19Mu1mz
Zo0bM2aMe+GFF1y1atXcU0895erWreu6dOlieg41cNOmTbNnBGuexYsXuxUr
Vlj+8+bNmy3niOOIzrNnzx477wcPHrT1D32+Tpw44U6dOmVrJvQfesvj6+G4
f//99+bt4TkU6O3hs8nfI4QQQkQ30m+EEKFG+k3KSL8RqQH78l27drlxY8e5
UiX/Uz/ltZtixYq51q1bp3qfKX5GiRIlEjUc6Te/gT7y008/mebSvXt3u/fz
5cvnHnvsMesP9vjjj7sCBQrYeSK/qGzZsq58+fLuySefNH2nSpUqrmbNmq5e
vXqucePG1g++Xbt2rmvXrnbcBwwYYGsgtJ8pU6a42bNn23rp008/dStXrnQb
Nmww3Qe95/Dhw/YMYg3IueCZhI7DZxRCCCFE9CL9RggRaqTfpIz0G5EasA9H
G0EjCew/lS5dusQ5kmycZcuWpergZ/Cz0CP42dJvfgNt5MaNG27dunXmtUmf
Pr37wx/+cMf1Z+RQ8/Uc00yZMtnxzZ8/f2JPMfKha9WqZc+PZs2aWa941kpo
RX369HGDBw92I0eOdOPHj3fvvPPOTd4ensdr16612i2ePeg8O3bsMD2QNaD3
96D74O85fvy4PcO++uory+xhLXn+/Hn37bffmg/sypUrid4e8n7k6xFCCCFC
g/QbIUSokX6TMtJvRGrA3pnamuHDh7vixYsnXldcU8yX+GJWrVpl835qDrwe
eEOoo8qQIYP0m3/jc4upnWK9Qj+wwPqyu9Fw8DWh43BufU8x+sNny5bNZc+e
3eXKlcvlzZvXznuhQoVc4cKFzdfDOSDbGm8Pzx7v7eGZXL16dVe7dm17/jRt
2tRquzp06OC6detm/p7+/fvbtTV69GjLWJoxY4abM2eOZfZ89tlnpv9s2bLF
1ozHjh2zui08Yeg4/O5CCCGEuH+k3wghQo30m5SRfiNSA/JNyEcZNGiQ7dX9
dcX+Ho8GdTbUzqQ21Ae9/PLLNkdzPUu/+Q3vv9m2bZvr1KmTnRPOTaRzpQNz
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
943wz3Tp0pk3h5wk1k70ZhI34/041FZ9/vnn1rPqpZdesvoz9K8sWbK4hx56
KPE698eVNTX3IV+/YcMGq3VEIwu3H04IIUTaQvqNECLUSL9JGek34n5Au6Ee
g9oO9ofoNRkyZEi8jvBZoOvgqQhn3ymP9JvogvyjvXv3Wi4LWg3XSqCGgwbR
tWvXsPeZjyW8H+fChQvWe5yebvSr6tSpkx1TPG++lsofV3qQc29Wq1bNelS9
99579nf5Pmg4QgghxL0g/UYIEWqk36SM9BtxP1y/ft3m7gULFriaNWvaNcO1
4/NUK1WqZNcWvourV6+G/fNJv4kuyObFV4MHhPNSuHBh0xYC6+3I3qXejh7Y
1F2pb1Ly+PkNLYb1KH3a6VVFz3GOZbqH0t3Upypz5syubNmyrn379qbhcH9w
/3IfS8cRQghxt0i/EUKEGuk3KSP9RtwPeGrw1gwbNsyVLFnSrhve+aPdZMqU
ydWvX9+tXr06Ynkm0m+iC99fiSzd6dOnu1atWllGiz8v1PqwhmrcuLH1KyPz
BQ1HJA1eHO4r7i/WpFzPH374oevdu7fVVP13tv82DccfX3pWoeGwxq5du7br
27evZRt7DUcIIYS4G6TfCCFCze30G95FvvPOO5YJuX//fnfo0KG4Gvze7K95
XgX2DZJ+I26HzzNhHx7cF9r3v+nSpYvbvXt3xDI2pN9EJ+gy1NxxDsqXL2+Z
LfhEfL1P2TJl3fjx4+3a+f777yP9cWMGr8cz3/Xr18/V/1N9V7x4cfPiBObi
oOOQlUO91aBBg9xnn31m61WOtfpTCSGEuFOk3wghQs3t9Bvft7Z///5u8ODB
bujQoXE1+L179OjhGjVq5HLkyCH9RtwRPkcV/Y88DbQ/5mp//XAtNWzY0HoX
0w86Uki/iU7w1JDfgm7AsydbtmyJ+gIaDlktrV9obbku6BHizvDzHetp1svz
P5pva2fmPnLFfS4OWhkaDn9WqlQp16ZNGzd79myrWZNeJoQQ4k6RfiOECDW3
02/884XMBbId6Z8TT4Pf+8knn7wlh0L6jUgJ9t/UTjFnP/vss1aTwX6Q/SF7
Q7w3ZHGsWLHCeuVECuk30YnvW0aWMbU+9Lh+9NFHb8lp6dmzp51DPCHKwblz
fv3lV/fzTz9bn6mFCxdanRT1UtwHPOe918nrOORG08dq2rRpbtu2be7cuXOW
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
epfPffZ9u5o1a2baTrwfp/vF5/zQ575r166ucePGtkdFR1RdmhC/If1GCCGE
EEIkBVms5Nw+/PDDVlvj1130f8O7QQ4VtYwiNuH80ZuvZcuWLk+ePIkeK7w4
7AVYW8+bN8++jkxe6lTT0rjTPk7U6iYkJJhmiXbp7wN6h9NDHA0Mv4i4P/Dy
4enD24fHL1u2bKaXDRs2zB0+fDjSH0+IqED6jRBCCCGESIotW7a4hg0b3lJf
U65cOeuTfPToUcujErEJnhIyW8aPH2/n9L/+64HEXuKcb7QJ9gL0+SO7N9K5
Z6Ee6DJoOLfj0qVLVsdDJhB91/19QB3V008/7QYOHGj9JMX9If1GiNsj/UYI
IYQQQiQF+RPPPfecy5w5s3vwwQcT111ly5Y13wZ7KnroidiEuiB6wK9cudK1
aNHC5cqVy6VPnz7xPNNfnP7xZPa+++67btmyZWlqbNu2zX7/20FND1409hlk
F/vj4/utjxkzxrRMcX9IvxHi9ki/EUIIIYQQScH+tnnz5raPJ/PDr7vKlCnj
pkyZYp4D6mpEbOJzeffv3+9GjRplWUePP/544nnmnHPuCxYsaDVzeE3S0iDf
5072OeTprl271vXv3988Sf74oHc1bdrUTZ482Z04cSIMZyxtI/1GiNsj/UYI
IYQQQiTF9u3bzZfBOous1kT9pnQZN3nSZNv3S7+JfegnvnDhQtftlW6uYIGC
t/SLT6uDvlEbN2687fE5e/asW758uevVq5crXLhw4t8nM6hVq1Zu5syZ7m9/
+1vqn6g7xOctnz592nSPXbt2mZeOPHIGXiJyqakJQ3dCn0I7SS4L6KeffjKf
HfuwL7/80p4LR44ccefOnXM//vjjbT8Pz4gDBw5YPSZ/l71aoG+P78Fn4Gvw
RQ0YMMB0skyZMplW3L59e8se4lwFjp07d1p/NH5Xfmch4gHpN0IIIYQQIimS
02/IACELhP0f2SAitqE+iH39n4f/2ZUoXiLVdZNoGXeq37Bf+uyzz27ZL+XN
m9e1bdvW/eUvfzEdIVpAzyBPecGCBeZd6dixo/U9f+aZZ1zdunVdgwYN3Asv
vOBee+01N3XqVPMW8TuS6ZyUhoPWcujQIfPFoKU8//zz7s0333SrVq0yDed2
oMu88cYbrlGjRvY8Cd6vod3Qc2r06NH2OdFuyIYmgwkNJ1++fJYbzfkKHBx7
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
No32bquORs+ujOa3VX/rs4V1N1VPEx0d7ZmNept0V5U3Xm2v97Xm2OjXq+6o
Xr16PuepW7du3hOlZ9Wz6/OoMibNP05OTvaaoMAOKbIbAEB2RH4DAKFFfoNg
0M/9+lr+0zoNzXft27evzxbRz+rBRn5zbcoN1KejXjblCTt27LDExESfV6MZ
Rqq30c4w9RIp51BOcaV+ofz581upUqV83s3IkSP9ezl93lCOp/dAv6dea9Xj
KLvTP9MMHdWg6GP9NJvRbB19bM3y1fwc7c/WzGB9H6iMpmPHjt6fpdoZ7b2q
X7++Va9e3b931HNERUX5MwX6un5tDnO1uhr1Aeoea0eUMh/V1mh+jfIgZVbq
JWvZsqXPNFZtj55dGZbqgJRHqcZGOQ0AADkJ+Q0AhBb5DYJB82A130M/96u2
IXCvVPOgPEA1HerLCTbym2tTdqOeJfUkLVu2zN58801r37697/tWHYkykUBP
kfIQ5RlXykO0a0nft6kPSX1C2kmlnOXZZ5/1rEV9SspbHn/8cc85NLNXPUW6
H/pYmnWtDEZZiD4PaXeZPrZ2aVetUtV3zyv7U26i91I1QJqPrExJu57Us6T6
Fz2HnlP1QJnNbi6tq4mJifEs8qGHHrJ27dr5/B/db/UCane48kjlUbpvqjtS
DrZ3716/W/ocq+xGtUYAAOQk5DcAEFrkNwgGzSXR7NoWLVr4z9iBe6XaBeUD
kydP9nsXbOQ315aWlubfV2k+jPII7cPW7JbrzTn02qp3SK+ralI0p1eZi/KW
2JhY/z0197dI4SL+PZ3qWa63RykzRx9HeY5yHX1sPYMyHz2TciA9u77v1Owe
PXutWrU8v1L/le6wMqiePXt6P5Rqg1SbpB1Vymr0vav6v0KxTw0AgBsJ+Q0A
hBb5DYJBe5l1p+Lj4712IXCvtINHd2r06NE+4yTYyG+uTr1TqpMaNmyYvyfK
XZSzqH7levORwOcLfb+mehUd7aXSPJnfRP7Gf0/tYMqTJ6/XtGRFbcz1nMD+
bvVV6T5qDpPqfbQjTbOWVSekfGbo0KGeO2rHlvqftKdKdTVr1qzxnkDNStbn
S9XWpKam+oxl7YpSdsMMGwDAzYb8BgBCi/wGwaDeqDlz5viOH/XfBO6V+nDU
M6Ofk5UdBBv5zZWpl0c9PZoNrLnE6kG6dE9YuE6gTkYZj55HuY8yIGVBmj+j
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
hrobAAAAAABuLOQ32VNgr9TRo0ctOTnZvvrqK5s/f76NHDnS4uLifI/Urbfe
mv5+RkRE+LziIkWK+Pxizbp58803beXKlV6zAwAAAAAAblzkN9mTspvDhw/b
hg0bbObMmdavXz9r0aKFz7KJjo727EbvYeD9VHajnVP16tWzAQMG2AcffOBz
ipXdnDlzJtz/OQAAAAAA4BrIb7IHzRM+ffq0zyVWr9O6devsk08+sXHjxvns
YeUyd9xxR3qfVOB9zJs3rxUtWtQqV65sDz/8sPXp08c+/fRT2717t508eTLc
/1kAAAAAAOBXIL/JHpTd7N+/3xITE33WcN++fa1ly5Z277332p133um1Ncpq
Ls1u9L+V6TRq1MheeOEFr9NZu3at7du3z7Mb9oMDAAAAAJA9kN/cWDQ7+Pz5
8/6+pKSk2K5du2zz5s32+eef2/vvv2+vjXrNOj7d0erWret1NT+tt9Ffa9dU
sWLFvOZGs3AGDhxoc+fOtZ07d3oORG4DAAAAAED2Qn5zY1F2oz1Q6pFavny5
TZ061fr372/t27e3xo0b2z2/vcdiY2KvWG+jo+ymdOnS1qRJExs8eLBnPqq5
2bt3r/++ym7YLwUAAAAAQPZCfhNayk60O0ozg48fP26pqam2Z/ce2759u88T
/vLLL+0///mPzZgxw15++WXr0KGD19ook1E2c2lWE6i3yZcvn0VFRXkflebg
PPnkkzZs2DDfC75nzx7m3AAAAAAAkM2R34RWILvR3qdvvvnG+6JmvzfbXn/9
devdu7fFx8f7nOE6depYlSpVLCYmxmttlN0oq/lpfqPspnjx4v7vP/fcc74T
XPnP1q1b7eDBg8y5AQAAAAAgB7hafhOo6/j9739vH330ke3/fj/nCuf777/3
3iTVuexO3u19T3o9k5KSvKZm27ZtPr/mv//9r61Zs8ZWrlxpixcv9v3dkyZN
sqFDh9rzzz9vzZs3t1q1almZMmV893dERMTPeqMuzdU0+6ZcuXKe27Ru3drn
Gb/77ru2fv1631FFjxQAAAAAADnH1fIbZQfKcKpVq2avvvqqLVywkHOFM3/+
fPvXv/5lc+bMsXdmvWPTp0+3t99+2/72t795Tc3w4cNtwIAB1q1bN++F0s4o
zaZRn1PNmjW9xkZ9T9HR0VaoUCGvs1FGc6XsRkfZTWxsrD3wwAOWkJDg+8O1
D3zjxo2+EzwtLc3Onj0b7msFAAAAAACy0NXym8DR3JUnnnjCevXqxbnC+fOf
/+y7ubt06WLPPvusdezY0WcNt2nTxlq0aGFNmzb1rKZqlapWulRpK1iwoOXO
nfuK2cylR/U3+vcKFCjg/VHly5e36tWre/ajHivNxtFsYtX1KLOh3gYAAAAA
gJzrl/KbwD6ju+66i3OVo2xFvUxly5b12hj1QJUqVcprarTHW/Nrbr/tdovM
H+mZjLKZX8pv9O8p66lYsaI1a9bM63fGjh3rtT7qwdJ8G/VsHT16lHobAAAA
AAByOM23VQ4wc+ZMn6Vytb4dTtYevc7qk9KMIeU0qrFR9lOpUiWrUaOGNWzY
0GfidO7c2UaNGuXzcjZs2OAziU+fPh3uawMAAAAAAEIosAtJdR0NGjS46txc
TtaewBziEiVK+Iwh7Zz64x//6LNy3nrrLe+NWrZsma1bt873VGlGsmptlN2w
TwoAAAAAgJvL+fPn7cSJE7Z8+XKfr1uhQgWvBYmKivJ5upxrH71O6o/SPij1
Sum1U9+U+qfUR6WeKr2md999t91zzz2+Y0rzcDR/+JFHHrF27dpZ9+7dbeTI
kTZjxgz77LPPfF/VgQMHqLMBAAAAAABOc2+V4ezYscOmTp3qc1Y0b0WzcJQ1
3HvvvZxrHL1O9evXt/vvv99nFSuT0dzixx9/3LOZTp062YsvvmiDBw+20aNH
25QpU7y2RjujVqxYYYmJid4XpRob7R5Xf9QPP/xAnQ0AAAAAAPgZ7TBSr87c
uXN9X3ifPn2sd+/eYd/vdKMfvU4DBw70fVDaFf7aa6/ZG2+8YePHj7fJkyf7
XKF58+bZ0qVL7auvvvKcLCUlxedGKzcDAAAAAAD4tbTDSBmO5qyoFmTTpk22
ceNGzi8cvU5btmzxfVDbtm2zb7/91rZv325JSUm+1ys5Odn27dvnmY1eX/Wq
aeaQsht2fgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAI+D9Inexf
     "], {{0, 670}, {1136, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1: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
3+tg4zDBYY5DvcMvjhRHtqPEcZ3jKcfXTs5O6U5fOTU5PXE2c+Y5lzrXO992
obuEukx3qXW54kp0Zbvmu25yveiGuvm6Sdxq3C64o+5+7lL3Te6dowijAkbJ
RtWOuu5B8+B4lHjUe9wbzRwdN7psdNPoZ2McxmSOWTnm1JiPnr6eBZ7bPW+N
NR47fmzZ2Jaxf3q5eQm8aryueNO9o7znezd7P/dx9xH5bPa54cvwneD7lW+b
7wc/fz+FX4Nft7+Df7b/Rv/rbBN2Insp+3QAISA8YH7A4YC3gX6BxYH7A/8I
8gjKD9od9GSc8zjRuO3jHgTbBfODtwarQ1gh2SHfhKhDbUP5obWh98Psw4Rh
O8Iec1w5eZw9nGfhnuGK8IPhr7mB3Lnc1ggsIjqiIqIj0jgyNXJD5N0ouyhx
VH1Ub7Rv9Ozo1hhCTGzMypjrPCuegFfH6x3vP37u+PZYWmxy7IbY+3FucYq4
lgnohPETVk+4He8YL4tvSgAJvITVCXcSnROnJ/44kTgxcWLNxEdJY5PmJJ1K
ZiRPS96d/ColPGV5yq1Ul1RValuaQVpWWl3a6/SI9FXp6kljJs2ddC7DIkOa
0ZxJykzL3JHZNzly8trJXVm+WeVZ16Y4T5k55cxUi6kFU49MM5jGn3Ygm5Cd
nr07+z0/gV/L78vh5WzM6RVwBesET4VhwjXCblGwaJXocW5w7qrcJ+Jg8Wpx
tyRUUiXpkXKlG6TP82LytuS9zk/I35k/UJBesLeQXJhdeEhmLMuXtRdZF80s
6pS7y8vl6umB09dO71XEKnYoEeUUZXOxCby8n1e5qL5U3SsJKakpeTMjbcaB
mUYzZTPPz3KbtWTW49Ko0m9n47MFs9vm2M5ZOOfeXM7crfOQeTnz2ubbz180
v2tB9IJdC6kL8xf+XOZZtqrs5RfpX7Qsslq0YNGDL6O/rC/XL1eUX/8q6Kst
i/HF0sUdS7yXrF/ysUJYcbbSs7Kq8v1SwdKzX4/9uvrrgWW5yzqW+y3fvIK4
Qrbi2srQlbtWGa0qXfVg9YTVjWtYayrWvFw7be2ZKp+qLeuo61Tr1NVx1c3r
HdavWP9+g2TD1Zrwmr0bLTcu2fh6k3DTpc1hmxu2WG2p3PLuG+k3N7ZGb22s
daqt2kbcVrLt0fa07ae+ZX9bt8NiR+WODztlO9W7kna11/nX1e223L28Hq1X
1Xfvydpz8buI75obPBq27mXurdwH9qn2/fZ99vfX9sfubzvAPtDwg+MPGw8y
DlY0Io2zGnubJE3q5ozmzkPjD7W1BLUc/HH0jzsP2x6uOWJ6ZPlR6tFFRweO
lR7ra5W39hwXH3/QNq3t1olJJ660T2zvOBl78vRPUT+dOMU5dex08OnDZwLP
HDrLPtt0zu9c43nf8wd/9v35YIdfR+MF/wvNFwMutnSO6zx6KfTS8csRl3+6
wrty7mr81c5rqdduXM+6rr4hvPHkZsHN57+U/NJ/a8Ftwu2KO4Z3qu5a3q39
1fXXvWo/9ZF7EffO30++f+uB4MHTh8qH77sWPaI/qnps87juideTw91R3Rd/
m/xb11P50/6e8t+Nft/4zOXZD3+E/XG+d1Jv13PF84E/l74wf7Hzpc/Ltr7E
vruvCl/1v654Y/5m11v221Pv0t897p/xnvS++oPrh5aPsR9vDxQODMj5Cv7g
VQCDFc3NBeDPnfCekAEA4yK8P0zWvvkGC6J9pw4i8J+w9l04WPwAaICd5rrO
bQVgH6xOCyA3HGuu6ilhAPX2Hq66osz19tJy0eCLh/BmYOCFFQCkFgA+KAYG
+jcNDHyAb1TsJgCt07VvTU0hwrfBN54adMnmAPi8aN+hn8T4eQ80HviAz/t/
AV+GlqQ=
       "], "RGB", "XYZ"], Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{345.7109375, Automatic},
   ImageSizeRaw->{1136, 670},
   PlotRange->{{0, 1136}, {0, 670}}], 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsnQe8JFWZt8/kYYYZhmFgYIYkDCBRwiJIBkGGJDDEIecchjhkUGRFQRRB
QAwUKIgBSbrifrqwrlkUFV3FAOYEhlVBJPV3zq1pb1VX377VXXXOe06d5/n9
/p/fMl1V7617+3+6n+6uftUxZy44YaxS6pzJ+v9ZcPTiHc8+++gL95uh/48D
zjjn5BPPOP643c449/gTjz97y2PG6f+ozG0nKDVeAQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACApyyt83edVkeulhwKABoP
3QMArqF3AMA19A4AAPjC0aq4Hpn8Wmec4FwA0GzoHgBwDb0DAK6hdwAAwBe+
oLqvSSbzBecCgGZD9wCAa+gdAHANvQMAAD6wps4rauQ16aNyowXFS2rkc5iN
ud2fdH6sc6/O+TorC8wLIA3dUw90D0B56J16oHcAykPv1AO9AwBQnStVvjN/
0/F/P68zQ2y6cCi7JnXLyzq36cxyPjWAHHRPPdA9AOWhd+qB3gEoD71TD/QO
AEA1xur8XOX78Sidpzr+28lC84VElTWpnZ/qrOp6cAAB6J76oHsAykHv1Ae9
A1AOeqc+6B0AgGrsrPKdaL6Xynw/1Zs6/vvXpQYMiM416Qid/bvkEJ0zdD6g
84wqrkuPqvSxAkCToXvqg+4BKAe9Ux/0DkA56J36oHcAAKpxp8r34R1L/vua
qtiV60kMGBCda1KZ9/FP0blVFc/1QkszAvgC3VMfdA9AOeid+qB3AMpB79QH
vQMAMDjTdZ5T+S7cOfPvX+z4t7e7HjAwBlmT2ny+Y9t7ap8OwB/onnqhewBG
h96pF3oHYHTonXqhdwAABucEle/BX6r8e6GP7/j33+qMczxjSFRZkxZ0bPuj
2qcD8Ae6p17oHoDRoXfqhd4BGB16p17oHQCAwfmyyvfgWzv+fRmdf3TcZg+X
AwZGlTXp1R3b/qn26QD8ge6pF7oHYHTonXqhdwBGh96pF3oHAGAw1lH5DjR5
dZfbfaTjNh93NWCAVFmT1u7Y9tej3N5cH+RUlX6P/Vd1ntT5m84LOn/Q+ZLO
1YrriIB/0D3147J7zPsSdlRpvzys8zuV9o7pnx+r9Pe2r+L9C+AX9E79uOwd
834p8/s6VOc6nf/W+Wtm+y/2MziAI+id+nHZO1l21blLpd/ZbHyt+U6Rb+hc
qjO7j/0AAEhhnrtlO3Ck75zareN2/9SZ2cdxYvJUVdakvTu2/e8+jzVSXta5
SWdCH7MA2MRV98TkqVx1z1EqPY9luucxnXX7mAPAJq56JyZP5fIxzwdU775p
0nmF5uCqd7I03VO57B3DZJ27Ve/+MeeY92wCgM+Y57vmNY9sd53a47a/7bjt
aX0cKyZPVWVN+lTHtpeUPNbPdR5S6XeJXbskH1OpW83u784+ZgGwhavuOUrF
5alcdc8tmdu9ovN9ndt1rtF5t85XOvZlemheH7MA2MDlY56YPJXLxzxJx+2N
U/2eauZ5hWbgsncMsXgql70zRueTmdv/Xee9OqfoXKDyj3me19muj1kAAFzS
7XWm5Xrc/pqO2z/ax7Fi8lSDrEnGd769Y7s/66wwynYHqt6v45n9XtKx3y1K
zANgE1fdE5unctU95ryaLl+ss/IIt9lW5d3rZ0vMAmATl495ko5tm+ypXD7m
WaTS38tClX6m0jwv30Y187xCM3DZOzF5Kpe9c1jm9r9Safd0cmXmNj/RmVhi
HgAA13xU5Tvwk6PcfoOO25tsWPJYMXmqzjVpP535XbKXSt+f9E6dX3RsY9bl
Ol+buy+z74tq3C/AILjqntg8lavuMddpKPMe7a0z+zX+dW4/PwxAzbh8zBOT
p5J+zNPU8wrNwGXvxOSpXPWO6e4nM9vs1uN2j2Rud8IgPxQAgEWWVWnvZXtw
nxLbfatjm3fUPFcTPFXZzzp3i3ld8F6Vrv91cnHmGFfXvG+AfnDZPbF5Kh+7
5/HMMXated8AZfHhMU9TPZV07zT1vEL4uOyd2DyVq97ZMrPd46Pcdq/MbR/u
66cBALCPeS94tgufVuWeJ5/Zsd3vdcbXOFcTPFWVNekzOoeoes+p4Y7MMQ6r
ed8A/eBr9zTBU/nYPZ/LHOONNe8boCw+9E5TPZV07zT1vEL4uOyd2DyVq955
U2a70Z6Xmmsvtn2vmW9qPz8QAIBlzHdAZbvwhpLbLa/S787Mblvnc7omeKoq
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
/9kH/weQB/9nH/wfQBH8n33wfwB58H92wf8BAJQH/2cf/B9AHvyfffB/AEXw
f/bB/wHkwf/ZBf8HAFAe/J998H8AefB/9sH/ARTB/9kH/weQB/9nF/wfAEB5
8H/2wf8B5MH/2Qf/B1AE/2cf/B9AHvyfXfB/AADlwf/ZB/8HkAf/Zx/8H0AR
/J998H8AefB/dsH/AQCUB/9nH/wfQB78n33wfwBF8H/2wf8B5MH/2QX/BwBQ
HvyfffB/AHnwf/bB/wEUwf/ZB/8HkAf/Zxf8HwBAefB/9sH/AeTB/9kH/wdQ
BP9nH/wfQB78n13wfwAA5cH/2Qf/B5AH/2cf/B9AEfyfffB/AHnwf3bB/wEA
lAf/Zx/8H0Ae/J998H8ARfB/9sH/AeTB/9kF/wcAUB78n33wfwB58H/2wf8B
FMH/2Qf/B5AH/2cX/B8AQHnwf/bB/wHkwf/ZB/8HUAT/Zx/8H0Ae/J9d8H8A
AOXB/9kH/weQB/9nH/wfQBH8n33wfwB58H92wf8BAJQH/2cf/B9AHvyfffB/
AEXwf/bB/wHkwf/ZBf8HAFAe/J998H8AefB/9sH/ARTB/9kH/weQB/9nF/wf
AEB58H/2wf8B5MH/2Qf/B1AE/2cf/B9AHvyfXfB/AADlwf/ZB/8HkAf/Zx/8
H0AR/J998H8AefB/dsH/AQCUB/9nH/wfQB78n33wfwBF8H/2wf8B5MH/2QX/
BwBQHvyfffB/AHnwf/bB/wEUwf/ZB/8HkAf/Zxf8HwBAefB/9sH/AeTB/9kH
/wdQBP9nH/wfQB78n13wfwAA5cH/2Qf/B5AH/2cf/B9AEfyfffB/AHnwf3bB
/wEAlAf/Zx/8H0Ae/J998H8ARfB/9sH/AeTB/9kF/wcAUB78n33wfwB58H/2
wf8BFMH/2Qf/B5AH/2cX/B8AQHnwf/bB/wHkwf/ZB/8HUAT/Zx/8H0Ae/J9d
8H8AAOXB/9kH/weQB/9nH/wfQBH8n33wfwB58H92wf8BAJQH/2cf/B9AHvyf
ffB/AEXwf/bB/wHkwf/ZBf8HAFAe/J998H8AefB/9sH/ARTB/9kH/weQB/9n
F/wfAEB58H/2wf8B5MH/2Qf/B1AE/2cf/B9AHvyfXfB/AADlwf/ZB/8HkAf/
Zx/8H0AR/J998H8AefB/dsH/AQCUB/9nH/wfQB78n33wfwBF8H/2wf8B5MH/
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
dE+l7UKOgP/LYt5rcYDjY/oC/o/eqbRdyBHwf1k2VOm6DwB58H81HmPLvRcV
jrH4I3/qez+nv/dHhf3MmceaVHcE/V/sJAr/V1vonbAi7P9iBv9H91TaLuQI
+7+Ywf/RO5W2CznC/g8AuoP/q/EYOx12ZeEYR1/9hb73s9sJ17MmOQj+T4xE
4f9qC70TVvB/YuD/6J5K24Uc/J8Y+D96p9J2IQf/B+Al+L8aj7HwkvsLx9hh
4eV97eOy+19qzVxpTdYkB8H/iZEo/F9toXfCCv5PDPwf3VNpu5CD/xMD/0fv
VNou5OD/ALwE/1fjMc65/deFY8xYYfXWJZ98vvQ+tj3wosI+FGuSleD/xEgU
/q+20DthBf8nBv6P7qm0XcjB/4mB/6N3Km0XcvB/AF6C/6v5OHPX2rxwnK32
PafUtrud8O7WmDFjWZMcBf8nRqLwf7WG3gkn+D8x8H90T6XtQg7+Twz8H71T
abuQg/8D8BL8X83H2eu0W7uuKZvNP6G1+K4/dt3mlPd8r7XuVgv+dVsz69Rl
lmdNshz8nxiJwv/VGnonnOD/xMD/0T2Vtgs5+D8x8H/0TqXtQg7+D8BL8H81
H+fSe19ozV59o67rkplhjY13HlqfXrvnaa0Ntj2otdyctYrrwUk3Dq1BijXJ
avB/YiQK/1dr6J1wgv8TA/9H91TaLuTg/8TA/9E7lbYLOfg/AC/B/1k41knX
P9aaNGV613VptGyz/+KhfcyZx5pkO/g/MRKF/6s99E4Ywf+Jgf+jeyptF3Lw
f2Lg/+idStuFHPwfBMZknS10Fuos0rlI53yd43T201lPZ4zYdPWB/7N0vBPe
+Whr6RmzS69FZj7zXfTt7efMY02yHU/9Xwzdkyj8n5XQO/7HY//X9O7B/9E9
lbYLOR77v6b3Dv6P3qm0Xcjx2P81vXegPMvqnKnzPzovqNF75M86n9E5XGcp
gXnrAP9n8ZgXfvT/WtsecGHh+hLZTJi4VOs1Ox3ROv2WJ3LbzpnHmmQ7Hvm/
2LonUfg/a6F3/I5n/i+m7sH/0T2Vtgs5nvm/mHoH/0fvVNou5Hjm/2LqHRid
pXXepvN3Nfrfwkj5i87bdaY7nr0q0fg/yVz+wCtDr1Hte9btrV2PfUdrp8Pf
0trj5Pe0jnjL51oXf+JZ8flijQf+L9buSVQk/k8y9I6f8cT/xdg9Ufk/ydA9
/sUT/xdj70Tl/yRD7/gXT/xfjL0DvXmdzi/U4H8Pnfmdzr5Of4Jq4P9ItBH2
fzF3T6LwfyTSeOD/Yu0e/B+JNh74v1h7B/9Hoo0H/i/W3oGROUCN/P7Pl3W+
qnOVzsk6++vMV+lnws/WuV2N/Pf0CZc/REXwfyTaCPq/2LsnUfg/EmmE/V/M
3YP/I9FG2P/F3Dv4PxJthP1fzL0D3dlL5yVV/J0+q9K/z5kl9mGuC7m1zsdV
+ncU4t8F/o9EGyH/R/fg/0jEEfR/sXcP/o9EG0H/F3vv4P9ItBH0f7H3DhRZ
W+dvqvg38TWdOQPuczOdr6vw/i7wfyTaCPg/uiclUfg/EmmE/B/dg/8jEUfI
/9E7+D8ScYT8H70DnRiX+yVV/Jv4T5V2dBXG61yjUk8cCvg/Em0c+z+6Z5hE
4f9IpBHwf3RPCv6PRBsB/0fvpOD/SLQR8H/0DnTjIFX8m/iVzowaj7Fejfuy
Df6PRBvH/o/uGSZR+D8SaQT8H92Tgv8j0UbA/9E7Kfg/Em0E/B+9A934rir+
XcwXnUgW/B+JNo79H90zTKLwfyTSCPg/uicF/0eijYD/o3dS8H8k2gj4P3oH
OtlCFf8mviE6kTz4PxJtHPo/uidPovB/JNI49n90zzD4PxJtHPs/emcY/B+J
No79H70D3XibKv5dHCs6kTz4PxJtHPo/uidPovB/JNI49n90zzD4PxJtHPs/
emcY/B+JNo79H70D3fiWyv9NvKLq/Tx4iOD/SLRx6P/onjyJwv+RSOPY/9E9
w+D/SLRx7P/onWHwfyTaOPZ/9A50MknnRZX/u3hCdKIi5n6RnS9xcEz8H4k2
jvyfL91jrld7qs5tOl/VeVLnbzov6PxBpd+XdbVyc13bROH/SKRx6P986Z5x
OjuqtF8e1vmdSnvH9M+PdT6is++S29kE/0eijUP/50vvjNV5tc6hOtfp/LfO
XzMzfdHRHPg/Em0c+j9feqeTXXXu0nlK5x86z6j0M8mX6swWnCsWNlDF94R+
WHSiPJuo4t9t4uC4+L8BsvoG2+f+lmautGaUM4QeR/7Pl+55qcsc3fKyzk06
EyzOkij8X9/x4T7vwwyhx6H/86F7jlKp7yvTPY/prGtxFvzfAPHhPu/DDKHH
of/zoXcMH+gyRzb4P8/jw/3ehxlCjkP/50vvtJmsc3eXmbIxLnAPqQEjYTdV
PO//LjrRMOZ59rdVOtPfVaT+b5v9F3e9f2y59yLx2Trjw3rgwwyhx5H/86V7
2v7v5zoP6dyhc+2SfEyl7wHMzninxVkS5Yn/o3fCmyH0OPR/PnTPLZljm8/i
fF/ndp1rdN6t85WO+UwPzbM0izf+j94Jb4bQ49D/+dA7hqRjBvPev+9l/u8o
/R/dE94MIceh//OldwxjdD6ZmcO4nffqnKJzgco/7nleZzuZMaPAvP+78+9i
sehEw1yu0nn+onOZitD/XXb/S61pM+d0XZOmLrNC67L7XhTvsGx8WA98mCH0
OPJ/vnSPee7b673m5nWIS1R+zi0szZIoD/wfvRPmDKHHof/zoXuM//v5kuOu
PMJttlX59wh+1tIsXvg/eifMGUKPQ//nQ+8YFqn0dYaFOuuo9Dn5NpmZovN/
dE+YM4Qch/7Pl94xHJaZ4Vcq7Z9Orszc5ic6E51NFxfHqeLfxYmiE6VspNLr
4Jh5TlD5ORMHx/fC/x12xWe6rkftHHzJfeIdlo0P64EPM4QeR/7P1+4ZifvU
8JwXWTpGojzwf/ROmDOEHof+z4fuMdcTLXMtga3V8IzmfYJzLczihf+jd8Kc
IfQ49H8+9M5IRO3/6J4wZwg5Dv2fL71jXmd4MjPDbj1u90jmdie4GC5CfPm7
yDJe55tLZnlEpX8LUfq/DbY9qOea9Oot9xHvsGx8WA98mCH04P+6crEanvNq
S8dIlAf+j94Jc4bQE5n/64fH1fCcu1rYvxf+j94Jc4bQg/8bImr/R/eEOUPI
idD/bZk5/uOj3HavzG0ftjxXrPj0vtA2Fy2Zw3wfzFpL/lt0/u+Cu//cGj9x
cs81adz4Ca3z73xavMfa8WE98GGG0BPZ53/LYq4L2J7zMEvHSJSw/6N3wp0h
9ET2+d9++JwanvONFvYv7v/onXBnCD0Rfv63G9H6P7on3BlCToSf/31T5vij
vYfCfEfI80tua67RPtXuaFHi03UhDeYzMe3f+QWZ/x6d/9vzlJsLa9C6r9u3
8N/mH/8u8R5rx4f1wIcZQk9k3/9RhiNV+v2/ZsYfq3RtskGihP0fvRPuDKEn
su//KIv5/MMv1fCcG1g4hrj/o3fCnSH0RPj9H92I1v/RPeHOEHIi/P6PezPH
X1Di9t/I3H5zi3PFik/fCz1O52tLZnhMpZ8DbhOd/1t5nS1yv5dJU6a3Ft/1
x6H/zf73FdfYWLzH2vFhPfBhhtDjyP/51D1tjOe7YEnMdw6Za/T/UA3PZ/pp
NYvHT5Sw/6N3wp0h9Dj0fz52z0jsqYZn/KmlY4j7P3on3BlCj0P/53PvROv/
6J5wZwg5Dv2fL73zv5njb1Li9h/L3N7WZ65iZpLOiyr/d/GE0CznLTm+ea/n
ph3/FpX/O+3mHxRee9pk56OH/m2TXY4p/NvJN3xHvMtMfFgPfJgh9Djyfz51
T5tHlSqskya/1tlX5V+TsEGiBP0fvRP2DKHHof/zsXu6MU3nKWX/MbCo/6N3
wp4h9Dj0fz73TpT+j+4Je4aQ49D/+dI7v8kcf+USt78pc/vTLM4VM+a9dtm/
C/MdczMcz2C+A/ofS47/ti7/HpX/22b/xYV158ir/mvo38z/dv7blnsvEu8y
Ex/WAx9mCD2O/J/Bh+7JMpL/azuJN+uMtXj8RAn6P3on7BlCj0P/Z/Ctezox
rzU8pIbnu8/isUT9H70T9gyhx6H/M/jaO1H6P7on7BlCjkP/Z/Chd/6aOf6s
Erd/R+b2F1qcK2aMb+vsuWMdHt88n/7SkuOaa2st1eU20fi/y+5/qTVt5pzc
72P6rJVblz/wytC/m/9dZtYquX+fuswKrcvue7H2WRZ94KnWwRff29r9pBtb
Ox3+ltZuJ1zfWnjpA61z7/ht19vbWA98mGHo96LP7/Hv+FrrwAs/0drj5Jta
rz/8qqGZzGPHE975qP69vOzsb+SMW388NMf8497Z2umwK1u7HPW21r5n3V7b
DA79n3T39GKKSt83b96X/Ac1PN+Dyt77ABMl5P/oHf9mGPq9RNQ7jv2fz91j
rvl3mxqe6wfK7mN1Mf9H7/g3w9DvJaLecez/fO2d6Pwf3ePfDEO/l0i6x7H/
86F38H/+sYUq/l18w+HxF6lhH73DCLeJxv8ddsVnCq85mdeosrfZZv8LCrdZ
eMn9tc2wz6KkcE2MbMaMGdNabf1tW4dc9qC19cCHGUwOvfzTrfW22q81eeoy
I85iYpzZa3Y8vHXqTd8f6Dj7n/eRwj7N30L73y++57nWG465Vv8880ac4ZJ7
/lHL79+h/5PunrLMVun75dsznm3pOIkS8n/0jj8zxNo7jv2fr91jXg99vxqe
6Uc6cywfU8z/0Tv+zBBr7zj2f772TnT+j+7xZ4YYu8ex//Ohd/j8r598VxX/
NnZ1cNw1dZ5dcrxbe9wuGv+3wbYHFbrmlBsfz93G9F7nbcz3VVU99qIP/Kz1
qo126tm9nVl/mwNbF3/i2drWAx9mMDn+uq+3Vl1vm77mUENr5dih64a056lj
TTrhum+0ll1xjVGPbdatOv4GHfo/g1T39IuZqT3fDy0dIzH7l/B/9I78DLH3
jmP/Z/Cte4z7SzKzmNccbLs/g5j/o3fkZ4i9dxz7P4NvvWOIzv/RPfIzxNw9
jv2fQbp3+P4PPzlYFf8ufqnq/czJel3+2+WZ412rc8kIyX5v9Lcy//24GufL
IuL/Lrj7z63xEyfnfg8jfefUSmtumrvduPETW+ff9UyF9eip1jLLr9p3B5us
uu7WQ6+HVF0PfJjBZME5Hx46n4PM0c6ceZu1zrn9N5XXpGPe9j+tiZOnljpm
oP5Pqnv6xXzm92U1POOkGvbZSWL27dr/0TvyM9A7Iv7Pp+4Zp3NnZg7zGsNK
Nc7RCxH/R+/Iz0DviPg/n3qnTVT+j+6RnyH27hHwf9K9k/U4C0rs6xuZ229e
fTQYAXO9mfY1+LL5rEo7ugrmefPbdT7e5d+u6HLMfvLtirONhIj/2/OUmws/
o3kfcrfbmusRdN7WXK9hkOOa77pfdvarup7jSVOmtzba4dChax/scfJ7Wtsf
fFlr7c33LHS2+c6sKuuBDzOMdF7bWW7OWkPPUbc76JLWLke/feh/N9z+kNbS
M2Z3vf3s1TcsvU50W5P2PvODWRc3FPNe/BVWXb81b7P5rfW23r+1yrpbtaYu
s3y6JvX5OthIcez/pLpnEJ5Xw/NNqWmfWRKzb9f+j96hd7KR6h0B/+dL90xY
crv28c3r5CtWPH4/iPg/eofeyUaqdwT8ny+9kyUq/0f30D3ZSHSPgP+T7p03
ZY559Sj7m6yGn2+9XMN80BvzHbx/U8W/ja+qwV+H3lTn60v284ku/35Fl+P1
k0b5v85rMIwdO27E1zXO/dDvhv49e/uV1thkoOOaayl0ntux48a3tj3gwhGv
c3Deh//Q2mC7g3PbTJ46Y+D1wIcZjnrrI4VzarLOa/cael/4SNuZ6wjvs+i2
wvqhlqyTg65J02au9K///4RJU1o7LLy869+DOb65Jsml975Qy9+hY/9nkOie
flk7M9dfathfNxKzf9f+j96hd7KR6h0B/2eQ7p6JKv1u3/Zxv6fS6426RMT/
0Tv0TjZSvSPg/wzSvdNJVP6P7qF7spHoHgH/Z5Dsnddljvf4KPvcM3Pbhwec
C/pjL52XVPFv4+86V+rMLLmfrXU+qvKfl6vyHLzx1/877eYfFDppzY136bnN
WpvtVtjm5Bu+29dxj7jy/xX2Ya6rcMDij5Xavtv1cdspux74MIP5PEDnd4GZ
13/M90+VPZfmPfXdrh3Raz3rtSa1M325uUN/H67+FgX8n8HX7mlze2Z/n6xh
f91IzP5d+j96h94Z6Wdw3TtC/s8g1T3mGgKfztzWXJ9n+f7Hr4xz/0fv0Dsj
/Qyue0fI/xl8eswTjf+je+iekX4Gl90j5P8MUr1j3n/4VOa2u/W43SOZ251Y
ch6ojnks+ILqfv8wfzNfVunf6kk6+6n0+pHmf89S6fPXX4ywLf6vZ68uLpyz
fc++o+c2+513V2Gb1+19Vl/HXXOTNxT2scMhV/S1D/OaTec+VB/rgQ8zmPe7
d277hmOu6fv3aB4TdL5X3rx3fLTtRlqTxk+YNPD3XA0aIf9ncN095v3qZ+is
0GMm82+3ZfZlvqd828F+vFFJzDFc+j96h97pNr9E7wj6P4Pr7jGfb3koczvz
WYZZtf9U5XDu/+gdeqfb/BK9I+j/DL4834rG/9E9dE+3+V13j6D/M0j1zhGZ
2/5KpZ+r6iT7OeEnVfoZCXCHWQNH+v0Okp/r7F5hnkb7P/Oe4s7XQ8x7kC/6
+N96bmeudzBpqWm57aYus0LrsvteLHXcM9/306HXXbLbz1hh9b6/2/zM9z85
1J2q4/deZj3wYQZzLHPestvNmbdZ6/IHXh7o97n57qfk9mVeX7vg7r8MtCZt
f/ClztajdgT9n8Fl99y95Dbm9avv6Nyl826da1T6feTmcfCLHft7c40/ayeJ
OYYr/0fv0Ds+9Y6w/zO47J7s+4nNawo3qfTx9mix8dqDU/9H79A7PvWOsP9T
yv3zLXNt0c5eyfbRL7r8u43v33Tu/+geuseX7hH2fwYJz2Pe23d/ZhvzWeRb
dE7WWazzlcy//VNnxzp+UOibpVX6/phn1eB/D8+o9Bp/S1WcpdH+z3z3kOo4
d+YarGW23fj1RxW2NdcnKLOtec2lc9udDn/LQD+Ded2lc19l1gMfZjjwwk8U
thvt9cBeOe7arxb2d8hln+q5Tbc1yVyT49w7fuvkbzAbYf9ncNU9H+pjf3/W
Ob62n7A7iTmWK/9H79A7PvWOB/7P4Kp7Hhlw3xfU82PmcOr/6B16x6fe8cD/
GVw+39p4gH1/qo4fsgPn/o/uoXt86R4P/J9BwvOY22W/76xb/qjzxoo/G1TH
fBb8TJW+F2ak94tmYx67m7XCfNf0pJpmaLT/22Dbgwrn0axTZbY98qrPF7Zd
d6sF5Tp8q/0K255x608G+hkOuvCegdYDH2Z47Z6n5bYxr5Fd+NH/G/j3aV5j
HD9xcm6f5roZvbbptiatvuEOTv7+OuOB/2tju3vG6Wyn0vf0me/AekrnOZW+
/918x8cTKr2+xbE602v6mXqR6Djzf/QOveNT73ji/9rY7p5HSuyzW4L3f/QO
veNT73ji/9q4eL4Vrf+je+geX7rHE//XRsLzzFfpZ7B+ptLv+jX7/KbO5cr9
d6DB6Bhvu4XOISr9HPjFKn3PpnlfzAKddVX6/s7Qceb/zLVQO/tr6WVXHOq1
Mtub901Pn7VybntzTYTz73pm1G2XmbVKbjvjfQb9Oc65/dcDrQc+zDB79Y1y
2yw7+1WVf68zVlgtt0/znVu9bt9tTdp6wXnW//66xSP/lyWG7kl0nPg/ekd+
BnonH8/8X5amd48z/0fvyM9A7+Tjmf/L0vTecer/6B75Geie4Xjm/7I0vXcA
euHM/+15ys2FLtpy70V97aPb9Wx3O+HdPbcx163o3OZVG+1Y6Wfp/E720dYD
H2Yw6byGrI2s9W+7970mvfH09zlfkzrOoU/+LwYSHSf+j96hd3zrHY/9X9Nx
5v/oHXrHt97x2P81Haf+j+6he3zqHo/9H0DMOPN/K6+zRaGLTnzXN/vaxynv
+V5hHyutuWnPbc6/8+nCNutvc2Cln2X5Vdbtaz3wYQZz3d/OGWxklXW36ntN
OvCCjztfk0zwf2IkOk78H71D7/jWO/g/MZz5P3qH3vGtd/B/Yjj1f3QP3eNT
9+D/ALzEif877eYfFHrIdOog+1ppjU0K+zLfjz7S7c+49ceF22/6huMq/Twr
r7NlX+uBDzMs+sDPnKxJ5rFHv2tS2euS1B38nxiJjnX/R+/Iz0DvFIP/E8OJ
/6N35Gegd4rB/4nhzP/RPfIz0D354P8AvMSJ/+v2XvI687p9zvZ6PfBhhtPf
+6PCDOaaFOa5aJ3Z8dA3B7EmmeD/xEh0rPs/ekd+BnqnGPyfGE78H70jPwO9
Uwz+Twxn/o/ukZ+B7skH/wfgJdb9n7nm7LSZc6yuSUvPmD103Ydux/fh/eBe
zHDXM4UZ1njN652vBb6sSSb4PzESHav+j97xZAZ6pxD8nxjW/R+948kM9E4h
+D8xnPg/useTGeieXPB/AF5i3f+ZvlEW16N2Fl76QNfj+3A9WB9mMN/pNXbs
uL62afKa1HEO8X9uSXSs+j96x48Z6J1i8H9iWPd/9I4fM9A7xeD/xHDi/+ge
P2age/LB/wF4iXX/t8G2BzlZk9bdasGIM3R+l73E98H7MEPn98ePGTOmdd6H
fx/lmmSC/xMj0bHq/+gdf2agd/LB/4lh3f/RO/7MQO/kg/8Tw4n/o3v8mYHu
GQ7+D8BLrPq/C+7+c2v8xMm5/hk/YVLr8Cv/s3XUvz9cKZOnzsjt13zf+uK7
/th1jvW22q/Qg2e+76cD/UwHXfTJgdYDH2bIPO/8V/ZZlES5Jpng/8RIdKz5
P3rHrxnonRHPB/7PLVb9H73j1wz0Tj74PzGs+z+6x68Z6J7h4P8AvMSq/9vz
lJsL/fPqLfepZd+b7nJsYd+7n3hD19vucvTbC7d9/eFXDXTc9bc5YKD1wIcZ
Fpz9ocJ2c9d+rdO1wJc1yQT/J0aiY83/0Tt+zUDv5IP/E8Oq/6N3/JqB3skH
/yeGdf9H9/g1A90zHPwfgJdY9X/m+8lVR/+YxyB17PuIt3yusO858zbretsz
bv3J0Puvs7c138d0ySef7+uY5nvdzWtqncctsx74MIN5jXDy1GUK2x588b3O
1gJf1iQT/J8YiY41/0fv+DUDvZMP/k8Mq/6P3vFrBnonH/yfGNb9H93j1wx0
z3DwfwBeYs3/nXbzDwrdM3Hy0q2L73mulv2ba6wuveyKhWOccuPjXW+/5sa7
FG6702FX9nXMV2+xd2EfquR64MsM2x98aWFb42EGfX98Nub7x0a7jS9rkgn+
T4xEKTv+j97xcwZ6Zzj4PzGs+T96x88Z6J3h4P/EsOr/6B4/Z6B70uD/ALzE
mv/bZv/Fhe6p+zhbvvHMwjG22vecrrc9/M2fLdzWfEeTub5DmWOZdbtze9Xn
euDDDIs/8qfW0jNmF7ZfZtYqreOv+/pAv4dzbv9Na+sF57U23G7hqLf1ZU0y
wf+JkShlx//RO37OQO8MB/8nhjX/R+/4OQO9Mxz8nxhW/R/d4+cMdE8a/B+A
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
AAAAAAAAAAAAAAAAAADQC/8PdZjf8g==
     "], {{0, 512}, {1280, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{526.7578125, Automatic},
   ImageSizeRaw->{1280, 512},
   PlotRange->{{0, 1280}, {0, 512}}]}]], "Input",
 CellChangeTimes->{
  3.81822116009758*^9},ExpressionUUID->"9af9d55c-a955-4ba1-a3ba-3f6f21056b1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"A", ",", "B", ",", "Cin", ",", "S"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.818565133219778*^9, 3.818565144629911*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"036d0f87-57e6-4ae7-8840-50a7a756f8e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FullAdder", "[", 
   RowBox[{"A_", ",", "B_", ",", "Cin_", ",", "S_", ",", "Cout_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "\[Rule]", 
       RowBox[{"Xor", "[", 
        RowBox[{"A", ",", "B"}], "]"}]}], ",", 
      RowBox[{"S", "\[Rule]", 
       RowBox[{"Xor", "[", 
        RowBox[{"Cin", ",", "w1"}], "]"}]}], ",", 
      RowBox[{"w2", "\[Rule]", 
       RowBox[{"And", "[", 
        RowBox[{"w1", ",", "Cin"}], "]"}]}], ",", 
      RowBox[{"w3", "\[Rule]", 
       RowBox[{"And", "[", 
        RowBox[{"A", ",", "B"}], "]"}]}], ",", 
      RowBox[{"Cout", "\[Rule]", 
       RowBox[{"Or", "[", 
        RowBox[{"w2", ",", "w3"}], "]"}]}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.818197461503407*^9, 3.818197664499125*^9}, {
  3.818197746782916*^9, 3.818197749269566*^9}, {3.8181977797713337`*^9, 
  3.818197782496752*^9}, {3.818216091181158*^9, 3.818216096215043*^9}, {
  3.818216137730872*^9, 3.8182161407777233`*^9}, {3.818221301703631*^9, 
  3.818221304097012*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"722baf60-443d-4008-9495-884d47830db8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullAdder", "[", 
  RowBox[{"A", ",", "B", ",", "Cin", ",", "S", ",", "Cout"}], "]"}]], "Input",\

 CellChangeTimes->{{3.8190011188382597`*^9, 3.819001140762679*^9}, 
   3.819001286321891*^9},
 CellLabel->"In[49]:=",ExpressionUUID->"f5779e56-f81f-406c-b170-1cf9a247f0d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1$131707", "\[Rule]", 
    RowBox[{"A", "\[Xor]", "B"}]}], ",", 
   RowBox[{"S", "\[Rule]", 
    RowBox[{"Cin", "\[Xor]", "w1$131707"}]}], ",", 
   RowBox[{"w2$131707", "\[Rule]", 
    RowBox[{"w1$131707", "&&", "Cin"}]}], ",", 
   RowBox[{"w3$131707", "\[Rule]", 
    RowBox[{"A", "&&", "B"}]}], ",", 
   RowBox[{"Cout", "\[Rule]", 
    RowBox[{"w2$131707", "||", "w3$131707"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8504858634188547`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"6fc3d5ad-480d-4775-bd9b-3b00a9c3c42d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"RippleCarryAdder", "[", "N_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"FullAdder", "[", 
       RowBox[{
        RowBox[{"A", "[", "n", "]"}], ",", 
        RowBox[{"B", "[", "n", "]"}], ",", 
        RowBox[{"Cin", "[", "n", "]"}], ",", 
        RowBox[{"S", "[", "n", "]"}], ",", 
        RowBox[{"Cin", "[", 
         RowBox[{"n", "+", "1"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", 
        RowBox[{"N", "-", "1"}]}], "}"}]}], "]"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Cin", "[", "0", "]"}], "\[Rule]", "False"}], ",", 
     RowBox[{
      RowBox[{"Cin", "[", "N", "]"}], "\[RuleDelayed]", 
      RowBox[{"S", "[", "N", "]"}]}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.818197674530629*^9, 3.8181977000345917`*^9}, {
   3.818197796841597*^9, 3.81819794914038*^9}, {3.818197988759384*^9, 
   3.8181980592759542`*^9}, {3.818201338112533*^9, 3.8182013408865833`*^9}, 
   3.818201409566629*^9, 3.8182014953724403`*^9, {3.8182062112784233`*^9, 
   3.8182062141158457`*^9}, {3.818206404395948*^9, 3.818206405682653*^9}, {
   3.81822129416035*^9, 3.818221402542012*^9}, 3.818977713158691*^9},
 CellLabel->"In[50]:=",ExpressionUUID->"8ad18798-cbfe-40d5-95cb-b7006156314d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RippleCarryAdder", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.818198068472883*^9, 3.818198072097404*^9}, {
  3.818201271014511*^9, 3.818201271107622*^9}, {3.8182014342621193`*^9, 
  3.818201434347834*^9}, {3.818206419845345*^9, 3.8182064200610313`*^9}, {
  3.818207041553113*^9, 3.818207041690404*^9}, {3.8182150552094717`*^9, 
  3.818215057155386*^9}, {3.818215633125539*^9, 3.818215633250313*^9}, {
  3.8182214083832407`*^9, 3.818221409956518*^9}, {3.8190012417571497`*^9, 
  3.819001241834354*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"5b074532-88ad-450f-9569-48e67e505dc1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1$131714", "\[Rule]", 
    RowBox[{
     RowBox[{"A", "[", "0", "]"}], "\[Xor]", 
     RowBox[{"B", "[", "0", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"S", "[", "0", "]"}], "\[Rule]", "w1$131714"}], ",", 
   RowBox[{"w2$131714", "\[Rule]", "False"}], ",", 
   RowBox[{"w3$131714", "\[Rule]", 
    RowBox[{
     RowBox[{"A", "[", "0", "]"}], "&&", 
     RowBox[{"B", "[", "0", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"Cin", "[", "1", "]"}], "\[Rule]", 
    RowBox[{"w2$131714", "||", "w3$131714"}]}], ",", 
   RowBox[{"w1$131715", "\[Rule]", 
    RowBox[{
     RowBox[{"A", "[", "1", "]"}], "\[Xor]", 
     RowBox[{"B", "[", "1", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"S", "[", "1", "]"}], "\[Rule]", 
    RowBox[{"w1$131715", "\[Xor]", 
     RowBox[{"Cin", "[", "1", "]"}]}]}], ",", 
   RowBox[{"w2$131715", "\[Rule]", 
    RowBox[{"w1$131715", "&&", 
     RowBox[{"Cin", "[", "1", "]"}]}]}], ",", 
   RowBox[{"w3$131715", "\[Rule]", 
    RowBox[{
     RowBox[{"A", "[", "1", "]"}], "&&", 
     RowBox[{"B", "[", "1", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"Cin", "[", "2", "]"}], "\[Rule]", 
    RowBox[{"w2$131715", "||", "w3$131715"}]}], ",", 
   RowBox[{"w1$131716", "\[Rule]", 
    RowBox[{
     RowBox[{"A", "[", "2", "]"}], "\[Xor]", 
     RowBox[{"B", "[", "2", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"S", "[", "2", "]"}], "\[Rule]", 
    RowBox[{"w1$131716", "\[Xor]", 
     RowBox[{"Cin", "[", "2", "]"}]}]}], ",", 
   RowBox[{"w2$131716", "\[Rule]", 
    RowBox[{"w1$131716", "&&", 
     RowBox[{"Cin", "[", "2", "]"}]}]}], ",", 
   RowBox[{"w3$131716", "\[Rule]", 
    RowBox[{
     RowBox[{"A", "[", "2", "]"}], "&&", 
     RowBox[{"B", "[", "2", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"Cin", "[", "3", "]"}], "\[Rule]", 
    RowBox[{"w2$131716", "||", "w3$131716"}]}], ",", 
   RowBox[{"w1$131717", "\[Rule]", 
    RowBox[{
     RowBox[{"A", "[", "3", "]"}], "\[Xor]", 
     RowBox[{"B", "[", "3", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"S", "[", "3", "]"}], "\[Rule]", 
    RowBox[{"w1$131717", "\[Xor]", 
     RowBox[{"Cin", "[", "3", "]"}]}]}], ",", 
   RowBox[{"w2$131717", "\[Rule]", 
    RowBox[{"w1$131717", "&&", 
     RowBox[{"Cin", "[", "3", "]"}]}]}], ",", 
   RowBox[{"w3$131717", "\[Rule]", 
    RowBox[{
     RowBox[{"A", "[", "3", "]"}], "&&", 
     RowBox[{"B", "[", "3", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"S", "[", "4", "]"}], "\[Rule]", 
    RowBox[{"w2$131717", "||", "w3$131717"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.850485878863725*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"87e65de3-6fa8-4298-ae9d-8dedf5c07afb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CircuitWires", "[", 
  RowBox[{"RippleCarryAdder", "[", "4", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.818215291579522*^9, 3.818215302470811*^9}, {
  3.818215366782392*^9, 3.818215366919752*^9}, {3.818221466133597*^9, 
  3.818221467901963*^9}, {3.819001303438941*^9, 3.819001303525066*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"5fd8d3e4-fc22-4f4a-a885-38590f3988f9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "w1$131721", ",", "w1$131722", ",", "w1$131723", ",", "w1$131724", ",", 
   "w2$131721", ",", "w2$131722", ",", "w2$131723", ",", "w2$131724", ",", 
   "w3$131721", ",", "w3$131722", ",", "w3$131723", ",", "w3$131724", ",", 
   RowBox[{"A", "[", "0", "]"}], ",", 
   RowBox[{"A", "[", "1", "]"}], ",", 
   RowBox[{"A", "[", "2", "]"}], ",", 
   RowBox[{"A", "[", "3", "]"}], ",", 
   RowBox[{"B", "[", "0", "]"}], ",", 
   RowBox[{"B", "[", "1", "]"}], ",", 
   RowBox[{"B", "[", "2", "]"}], ",", 
   RowBox[{"B", "[", "3", "]"}], ",", 
   RowBox[{"Cin", "[", "1", "]"}], ",", 
   RowBox[{"Cin", "[", "2", "]"}], ",", 
   RowBox[{"Cin", "[", "3", "]"}], ",", 
   RowBox[{"S", "[", "0", "]"}], ",", 
   RowBox[{"S", "[", "1", "]"}], ",", 
   RowBox[{"S", "[", "2", "]"}], ",", 
   RowBox[{"S", "[", "3", "]"}], ",", 
   RowBox[{"S", "[", "4", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.850485881796727*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"01886b2b-b030-4a96-9032-338c729b0163"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Add", " ", "A"}], " ", "=", " ", 
     RowBox[{
      RowBox[{"101101", " ", "to", " ", "B"}], " ", "=", " ", 
      RowBox[{"111100.", "  ", 
       RowBox[{"A", "[", "5", "]"}], " ", "is", " ", "the", " ", "most", " ", 
       "significant", " ", "bit"}]}]}], ",", " ", 
    RowBox[{
     RowBox[{"A", "[", "0", "]"}], " ", "the", " ", "least", " ", "most", " ",
      "significant", " ", "bit"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"EvaluateCircuit", "[", 
    RowBox[{
     RowBox[{"RippleCarryAdder", "[", "6", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"A", "[", "5", "]"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"A", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"A", "[", "3", "]"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"A", "[", "2", "]"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"A", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"A", "[", "0", "]"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"B", "[", "5", "]"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"B", "[", "4", "]"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"B", "[", "3", "]"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"B", "[", "2", "]"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"B", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"B", "[", "0", "]"}], "\[Rule]", "0"}]}], "}"}], "//", 
      "Truth"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"S", "[", "6", "]"}], ",", 
       RowBox[{"S", "[", "5", "]"}], ",", 
       RowBox[{"S", "[", "4", "]"}], ",", 
       RowBox[{"S", "[", "3", "]"}], ",", 
       RowBox[{"S", "[", "2", "]"}], ",", 
       RowBox[{"S", "[", "1", "]"}], ",", 
       RowBox[{"S", "[", "0", "]"}]}], "}"}]}], "]"}], "//", " ", 
   "Boole"}]}]], "Input",
 CellChangeTimes->{{3.818198087073494*^9, 3.8181982055970592`*^9}, {
   3.818201525838945*^9, 3.8182016045506363`*^9}, 3.818201689807974*^9, {
   3.818201865485311*^9, 3.818201871828953*^9}, {3.818201904908296*^9, 
   3.8182019465103197`*^9}, {3.818202009961561*^9, 3.818202014247703*^9}, {
   3.818221417554091*^9, 3.818221439421311*^9}, {3.818977759084306*^9, 
   3.818977897160569*^9}, {3.850424058873032*^9, 3.85042406384863*^9}, {
   3.8504241975566273`*^9, 3.850424205614415*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"bac91c7e-61e2-41ff-afca-5630ae5eb044"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"S", "[", "6", "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"S", "[", "5", "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"S", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"S", "[", "3", "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"S", "[", "2", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"S", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"S", "[", "0", "]"}], "\[Rule]", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8504858864157295`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"d7ce15a9-484c-4f66-8dcd-cb05b16e0c54"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdderCircuitTest", "[", 
   RowBox[{"n1_", ",", "n2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"N", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"IntegerDigits", "[", 
         RowBox[{
          RowBox[{"Max", "[", 
           RowBox[{"n1", ",", "n2"}], "]"}], ",", "2"}], "]"}], "]"}]}], ",", 
      "bits1", ",", "bits2", ",", "circuit", ",", "output"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"bits1", "=", 
      RowBox[{
       RowBox[{"IntegerDigits", "[", 
        RowBox[{"n1", ",", "2", ",", "N"}], "]"}], "//", "Truth"}]}], ";", 
     RowBox[{"bits2", "=", 
      RowBox[{
       RowBox[{"IntegerDigits", "[", 
        RowBox[{"n2", ",", "2", ",", "N"}], "]"}], "//", "Truth"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"output", "=", 
      RowBox[{
       RowBox[{"EvaluateCircuit", "[", 
        RowBox[{
         RowBox[{"RippleCarryAdder", "[", "N", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MapThread", "[", 
           RowBox[{"Rule", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"A", "[", "i", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"N", "-", "1"}], ",", "0", ",", 
                  RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", "bits1"}], 
             "}"}]}], "]"}], "~", "Join", "~", 
          RowBox[{"MapThread", "[", 
           RowBox[{"Rule", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"B", "[", "i", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"N", "-", "1"}], ",", "0", ",", 
                  RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", "bits2"}], 
             "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"S", "[", "i", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "N", ",", "0", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], "]"}], "//", " ", 
       "Boole"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"FromDigits", "[", 
      RowBox[{
       RowBox[{"Last", "/@", "output"}], ",", "2"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.818203597222488*^9, 3.8182039158303347`*^9}, {
  3.818203948010116*^9, 3.8182039966918364`*^9}, {3.818205964465108*^9, 
  3.81820597229646*^9}, {3.818207136177443*^9, 3.818207194467804*^9}, {
  3.818214631308132*^9, 3.81821464893091*^9}, {3.818215617498685*^9, 
  3.81821562067139*^9}, {3.818216227581669*^9, 3.818216231770103*^9}, {
  3.818221446202075*^9, 3.818221456341751*^9}, {3.850424089273725*^9, 
  3.850424091063938*^9}, {3.850424234792309*^9, 3.8504242404257793`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"0cb1f78c-8298-4983-9266-2da67dba8328"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AdderCircuitTest", "[", 
  RowBox[{"17", ",", "51"}], "]"}]], "Input",
 CellChangeTimes->{{3.8182151665673227`*^9, 3.818215177548192*^9}, {
  3.818215582741866*^9, 3.8182155874717417`*^9}, {3.850424256126902*^9, 
  3.850424258986704*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"f15b533b-b017-4cd2-b98a-51bf9f31e5a7"],

Cell[BoxData["68"], "Output",
 CellChangeTimes->{3.8504860525240564`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"49c82139-a15f-4bf2-b723-8f0e7225df05"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"AdderCircuitTest", "[", 
    RowBox[{"1000", ",", "#"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{
   "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
    ",", "8", ",", "9", ",", "10"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.818203999458919*^9, 3.818204054471336*^9}, {
   3.8182155643452168`*^9, 3.818215566225862*^9}, 3.8182156022532578`*^9, {
   3.818216247761476*^9, 3.818216262908536*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"bd0a9932-e4d1-4938-b25e-088ef1f34ba9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1000", ",", "1001", ",", "1002", ",", "1003", ",", "1004", ",", "1005", 
   ",", "1006", ",", "1007", ",", "1008", ",", "1009", ",", "1010"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.850486072534269*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"a817af89-50e2-4c74-a874-58c9bf8cc76e"]
}, Open  ]],

Cell[TextData[{
 "Fun facts:  \n\t1. This model involves asynchronous updates, which is not a \
standard choice.  Synchronous updates of each gate\[CloseCurlyQuote]s t+1 \
value based on all gates\[CloseCurlyQuote] t value is more standard for \
recurrent circuits.  For feedforward circuits, these two update semantics are \
equivalent in terms of the final state.  Can you find feedback (recurrent) \
circuits that behavior qualitatively differently?\n\t2. How long does it take \
for a circuit to finally stabilize, given that the circuit is one such that \
it always will stabilize eventually?  For feedforward circuits with N gates, \
the expected number of gate updates is O(N D),  where the depth D is the \
longest path from an input to an output.  For feedback circuits, the expected \
time is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"O", "(", 
    SuperscriptBox["2", 
     RowBox[{" ", "N"}]], ")"}], TraditionalForm]],ExpressionUUID->
  "51a91ebe-ff68-48f1-9d40-cc10e75a01d7"],
 " and indeed might be that bad.  Why?"
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
  3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
  3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
  3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
  3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
  3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.8189993552509623`*^9, 
  3.818999368113265*^9}, {3.850424127002109*^9, 3.850424129960703*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"555a464f-7918-48b4-95c8-b671f3e848b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Turing machines", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818263922110901*^9, 
  3.818263928075458*^9}},ExpressionUUID->"c08464d4-e8c1-49b0-8226-\
73bdd4916409"],

Cell[TextData[{
 "A Turing machine consists of an infinite 1D  tape on which an input string \
is written (here \[OpenCurlyDoubleQuote]011B\[CloseCurlyDoubleQuote]) flanked \
by an infinite repeating background symbol (here \[OpenCurlyDoubleQuote]0\
\[CloseCurlyDoubleQuote]), coupled with a computing head that may be in one \
of a finite number of states (here \[OpenCurlyDoubleQuote]q1\
\[CloseCurlyDoubleQuote]) positioned to read a specific cell (here the \
leftmost \[OpenCurlyDoubleQuote]0\[CloseCurlyDoubleQuote] of the input).  The \
computing head follows a finite set of rules: based on the current head state \
and the symbol being read, it may write a new symbol then move left or right \
while changing into a new state -- we will represent these as a set of rules ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h", ",", " ", "s"}], "}"}], " ", "--"}], ">", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"h", "'"}], ",", " ", 
      RowBox[{"s", "'"}], ",", " ", "d"}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"ff52ad3d-7475-42a9-9e85-d59dc4ff4ce1"],
 " where ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],ExpressionUUID->
  "cc0bbdae-9044-41b0-ad27-16f21d06ca33"],
 " is the head state, ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "b2cd9db8-1161-4e75-b5d9-7b0557543a54"],
 " is the symbol being read, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "'"}], TraditionalForm]],ExpressionUUID->
  "9aeef605-f5fd-45fc-a415-bbc923d1eca3"],
 " is the new head state, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", "'"}], TraditionalForm]],ExpressionUUID->
  "0e296bd8-ece3-4b59-9db0-42a2a91bfa09"],
 " is the symbol being written, and ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "c175b890-4afb-4b9b-a6a0-d5b41519b798"],
 " is the direction of movement, either +1 or -1.  If there is no rule for \
the current head state and symbol read, then the Turing machine halts.  We \
will use the convention that a Turing machine always starts in state q1 and \
the tape always has a background of 0."
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
  3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
  3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
  3.818291863011408*^9, 3.818291897620373*^9}, {3.818999285756629*^9, 
  3.81899932381283*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"2860f2fe-53a9-449f-b6c3-2cc701cf1a86"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnQmUHVWZxy+dELIRAkRkCZo0JICGLRJJwpKEZISwBEhwAY8iMSRssmQB
EWQHhYksw6KEAxGGEBICSHAURGfA0QOKMCLo4KAHN1R2cHdkqPm+rq7Xr5u8
zqNffffed9/vd87fmKaq7v1ed6p+XXXr3tFzT5k9v805t2ig/M/sY86YtnDh
MWfOGS5/+eDJi45fcPKx82aevPjYBccunDi3n3zxcslHZPv+DgAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAKCDQZL3RZTJkhmEtGLa29vnTJky5XhCSHNm
2LBhB4U+j5C680/OlvMlmeTnTZ4skTqol1qzLbfcsiXSavVa1CxOnm2//fZR
ZeTIkR016p+h++IzQ4YMKb6/P0g8TyZQZ/G90mmuLNhE8prk/UbH94n+zvCj
0J3wyArJ8aE74Yn/dPn3N3kGDx788tKlS7N77723JXLEEUd0JHQ/fOboo4/O
DjzwwOD9sMztt9/ece3SP0P3xWcuvfTSbKONNvqf0OcRD6g7ZKE70QCTJM9L
xhu2cbjk+4bH9wl+lS4t5Vd6jg59nfAV/CrN4FfJ0+x+pdeUDxu38TnJvxi3
4Qv8Kl3wq0SDX6UZ/Cp5mtmvdpK8JGkzbud6ydnGbfgCv0oX/CrR4FdpBr9K
nmb2q09I7vfQjl6jF3poxwf4Vbq0jF8NHTr09/hV2sGv0g1+1RTMl3zVQztr
Jcd5aMcH+FW6tIxfDRs27Dn8Ku3gV+kGv2oK9pE846GdNZITPLTjA/wqXfCr
RINfpRn8Knma2a903JXOL/FB43ZOlNxn3IYv8Kt0aSm/Ou+884JfJ3wFv0oz
+FXyNLNfKftK/ij5jLOb/2pjyW8khxod3yf4Vbq0lF+dc845wa8TvoJfpRn8
Knma3a8UnQNLneFuZ+dYR0hekGxndHxf4Ffpgl8lGvwqzeBXyZOCXylDJP/u
bOdR+LzL3WRTwzaswa/SBb9KNPhVmsGvkicVv1JGSl6WDDM6vt4bu13yiGSw
URvW4Ffp0jJ+NWLEiJ/jV2kHv0o3+FXTomu/TjI8/gDJ0y6fG6IZwa/SpZX8
6mf4VdrBr9INftV0bCA5TPKKs39+d5pktXEbVuBX6YJfJRr8Ks3gV8mTgl/p
PFiPS34tmemhvWMl93poxwL8Kl1ayq8WL14c/DrhK/hVmsGvkqfZ/Wp7yasu
v4YO8NDeQMm3JXM9tGUBfpUu+FWiwa/SDH6VPM3uV1dJLvXU1hTJD12+Xo7V
PBDW4Ffpgl8lGvwqzeBXydPsfnWPZIFxG9MlD0hecvk6z83qVgp+lS74VaLB
r9IMfpU8ze5Xn5UsMzr2eyX/Ifmd5EyXf1bNDn6VLi3jV1tttdWT+FXawa/S
DX7VNOi7gr+VnOTy9QjL4nCXr7tziWRQicftifZ/kcvnRtX54d+Q/EXyY8kX
Je8ruT1ffuW7rlr48KtYavXhV1HUus0225j71cqVK7O5c+dmu+yyS7bJJptk
bW1t2YABA7Jtt902mzlzZnbFFVd4ux6F8iu97k+bNq3DATTitd7atvarkLVV
98EZ+9WyZcsqNdbKBhtsoL6TbbbZZtlOO+2UzZo1K7v44ovN+uTJr2I4V1n5
lc/aJrh83it9h3BiCcfbWvK8y99LtOQDkhdd7z/7b0quduU9k/ThVyHqqoW1
X8VUq7VfRVOr+tXChQvNzv8XXHBBNmzYsPVekw4++ODsnnvuMb8Oh/CrCy+8
MBsxYkS3mlPxq9C1FYnFr2plzJgx2XXXXVd6nzz4VSznKgu/ClHbRpIlktcl
ixs8lj5zvKHhHvXO3pK/ua7PQ++V6fqJV7j8eeePXffP6/qS2rX2q1B11cLS
r2Kr1dKvoqpV/er44483uR7puX/DDTes1DJw4MBs4sSJ2aGHHprtv//+Hfev
qms94IADzK/DPv1qzZo12UEHHdThj67TI4tam92vYqmtSAi/mjx5cjZ9+vRu
2W+//bK99tqrw6f69+/fbfuNN944W758eal9MvarmM5VZftV6NrGSn7l8jlA
+4pek08vpzvrRF3wWdf1Gdzl1r2mz4ckf6/a7sAS2rb0q5B11cLKr2Ks1cqv
oqvVyq/uuuuubIsttqicnyZNmpStWrXqLdudccYZ3a5D5557rul12JdfXX75
5Zl8tpW62tvbs1NPPTUJv4qptiIh/OrGG29cb5/mzJnTbZ8ZM2aU2idDv4rt
XFWmX8VS22jJcy6fG6sv6P2rrzm7+bSOc121P7WedhZVbftoCW1b+lXIumph
5Vcx1mrlV9HVauVXJ5xwQuWa8q53vSu7++67a26rY7OKbfX3fsvrsC+/mjp1
auW+zuGHH95R/9KlS5Pwq5hqKxKjXxXR+1rFPvqsvMw+GfpVbOeqMv0qpto+
5/K5sfqCjh37nssd7QuSPcvqVCd67KL2I9ezrTrrS1Xbj2uwbUu/CllXLaz8
KsZarfwqulrFr35k4Vdjx46tXFOWLFnS67Z6r0ufnRTbX3PNNWbXSJ9+tfnm
m2cXXXRR5Wsp+VUstRWJ2a/OPvvsbvvpz3tZfTL0q9jOVWX6VUy1HeXysfV9
Rdcz1PHt+lxT+3mLZMMS+jXC5WPPtGa9hzekjn1udl2f0xkNtm/lV6HrqoWF
X8Vaq4VfRVnr6NGjv1+2X61YsaIyHkef/d1xxx3r3UfHrRS1qg9YXSN9+ZW+
k3nbbbd1+1oqfhVTbUVi9it9B6DYR/89rF27trQ+GflVjOeqsvwqttpOkdxZ
0rE2d/n7ietzxnrQZ6Fv977dgqp97m6wfSu/Cl1XLSz8KtZaLfwqylot/ErH
UBX9rvd534knnljZR8fAW10jQ85/lYpfxVRbkZj9qvr5t87ZUGafjPwqxnNV
WX4VW2167+pTJR5Pfa2MNZ1PdV01r6hzn6lV+/ykwfat/Cp0XbWw8KtYa7Xw
qyhrVb+aP39+qef8efPmVa4nU6ZMqWufSy65pLKPvldodY3Er9KqrUisfnXz
zTd3PEst9tH3Ocrsk5FfxXiuKsuvYqpNver3bt1j6/vKh11+/WqUy1xXzV+o
c58dqvZ5rcH2rfwqdF21sPCrWGu18Ksoa1W/Kvt53OzZsyvXk8MOO6yufb70
pS9V9hkyZIjZNRK/Squ2IrH4lT770+fhOoZQ71sNHz68sr3OpVt2n4z8KsZz
VVl+FUttOi/DK5JdSzpewfmS60o4js5RUdR8bp37bFW1j6aReeqt/Cp0XbWw
8KtYa7XwqyhrtfArnduq6PNRRx1V1z76e351rWWOUakOfpVWbUVinl905MiR
2WmnnWbSJyO/ivFcVZZfha6tX2cfnpXs3MBx1oX26xlXztzw1WPOzqxzn81c
989pYAPtW/lV6LpqYeFXsdZq4VdR1mrhV9Vj1T/+8Y/XtY+Ol66u9c477zS5
HuFXadVWJFa/Gjp0aLbvvvtmixYtMvmZNvKrGM9VZflVyNr0Xb/bJE9I3tHH
Y/TGoZKHSzpW6J8B/KpxYq21Zfyqvb39EfzKT/Aru4TwK/051znse0bXIdhn
n30y+d2l27z2Ot+ujjMss0/41dsmZG26zo7OC2/hVorONfqJko6l89UX9Z5X
5z5bV+2j72hu0ED7Vn4Vuq5aWPhVrLVa+FWUte64444Ple1Xen0p+n3kkUfW
tU/180G9JvF8sLzgV+Wkr+Pbq/896PwMl112WWl9MvKrGM9VZflVqNr2kvxW
8s4+7Fsvui71mJKO9XnXVfOVde7z3qp9Xm6wfSu/Cl1XLSz8KtZaLfwqylot
/Er9pej3rFmz6trn2muvreyjc41aXSPxq7RqKxKrXxXRNTeL/XQ9g7J+fzDy
qxjPVWX5VajabnX5XPCWvCFpL+lYJ7mumlfVuc/+Vfs80WD7Vn4Vuq5aWPhV
rLVa+FWUtapf1XuPqd4sWLCgci3Ze++969rn/PPPr+wzatQos2skfpVWbUVi
9yudc7etra2yr67hWEafjPwqxnNVWX4Vqrb/luzXx33r5X6Xz39VBtNdV831
ek71WkIrG2zfyq9C11ULC7+KtVYLv4qyVvWrsn1D100p+l2vK1XPwajjga2u
kfhVWrUVid2vNCNGjKjse8opp5TSJyO/ivFcVZZfhartScmMPu5bL3rNet7l
48UaZWPJP1xe8//Vecx7XNfndGKD7Vv5Vei6amHhV7HWauFXUdZq4VerV6/O
+vXr19FvHUvVcy2VdWXPPfesXHuOO+44s2skfpVWbUWawa823XTTyr5lrZlg
5FcxnqvK8qtQtX3Z1T+evhF0/UG9j1XGGoTfdF11L1jPtvo5/rVzWx2jtm2D
bVuu7xyyrlpYre8cY61W6ztHV6uFX2l23XXXyrVE177pbVv1rwEDBlR8bPny
5WbXSPwqrdqKxO5XOs69+l3Cs846q5Q+Ga7vHNu5qsz1nUPU9gHJLyWD+rh/
vQyWPCS5SzKgwWPpXPDF5/Ss632txiurtv1qg+0qln4Vsq5aWPlVjLVa+VV0
te68887fsvCN008/vXIt0ffSe1vjWcfAF9tOmDDB9DqMX6VVW5HY/UrnbSj2
03cI67mnW08M/Sq2c1WZfhWqNl1r8PIGj1EPgzvbWuMae49T5yvV8WZF/d9w
+RrS1ejxF1Zto/cGd2ugzQJLvwpZVy2s/CrGWq38Krpad9999/ssfEPfj9Kx
V0Udu+2221uuKbrNJz/5yco2+kzxqquuMr0O41dp1VYkVr+69dZbOz776v3K
/F4Y+lVs56oy/SpUbbr/n1w+34M1+nnpmPrjGjyOzjH/B9f1OfzZ5WtcXyG5
SfKLqv+mWdxgewWWfqWEqqsWVn6lxFarlV8pUdVq5Veaq6++Ohs0aFClFrkO
ZBMnTux4V33GjBkd97Wqa9Ux7tbXYR9+pa4xderUt2T8+PGVWgcOHLjObSw+
gzL9KrbaioTwK/1ZXleduqa5jifsOb+oZsyYMb3ey327MfQrJaZzVZl+pYSq
Tedvr3deiEaZI3mshOPs4d76efTM312+dnZZWPuVEqKuWlj6lRJTrZZ+pURT
q/rVIYccYnZN0vfQe3pUz+jzknnz5pn1oTo+/GrJkiW91ttbLJ6PlulXsdVW
JNb1cap/xvUZYZlupTH2KyWWc1XZfqWEqG1Hl9/DGlniMWvxbskfSzqWPnPU
sf06du0ll78boHU87vI1s8uad6vAh18pvuuqhbVfKbHUau1XShS1ql9ZPzta
s2ZNxzuBOuZd5w7V3+n1Hkd7e3s2e/bs7IYbbjBtvzr4VVq1FYnNr/TnW3+v
2GOPPbJjjjkmu+mmm0z65MGvlBjOVRZ+pYSobbnkiwbH7cmRkuc8tGOBL7+K
BR9+FQs+/CoKfPhVTAk5/ipUfIy/Ch0ffhVjPPlVDFj5VQje4/L7Sr2Nq28U
nZ/hGZc7VjOCX6ULfpVo8Ks0g18lT0p+pTztbOdz17H5jzqb9Xl9gF+lS8v4
1YQJE+5N/dpbHfwqzeBXyZOaXz0oOcro2Dru6jXJeKPj+wC/SpeW8atJkyZ9
JfVrb3XwqzSDXyVPSn6l95R+I9nX6Pg6T9cXjI7tC/wqXfCrRINfpRn8KnlS
8qvPuHxuqoEGxz7M5fPEDzU4tk/wq3RpKb+aNm1a8OuEr+BXaQa/Sp5U/Gqm
y5/dvcfg2P1dPqb9owbH9g1+lS4t5Vc6H2Lo64Sv4FdpBr9KnhT8Suc0fVky
y+j4H5L81OXz0zc7+FW64FeJBr9KM/hV8jS7X+m6znpvyXIe1tWSJYbH9wl+
lS74VaLBr9IMfpU8ze5Xl0gecrbzJejnc5jh8X2CX6VLy/jVtGnTVuFXaQe/
Sjf4VVPQT/KiZHfjdvTzOcS4DV/gV+nSMn41ffr0lfhV2sGv0g1+1RSMlfzV
QzsPSD7moR0f4Ffpgl8lGvwqzeBXydPMfnWw5Mce2lkmOcdDOz7Ar9KlpfzK
ct3d2IJfpRn8Knma2a90DcBve2hH59Va7qEdH+BX6YJfJRr8Ks3gV8nTzH71
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
AAAAAADNyf8DCXRqoA==
    "], {{0, 142}, {600, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{600, 142},
  PlotRange->{{0, 600}, {0, 142}}]], "Input",ExpressionUUID->"96af6569-8259-\
4b34-862d-f3fb6009f3e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "Turing", " ", "machine", " ", "that", " ", "decrements", " ", "an", " ",
       "arbitrary"}], "-", 
     RowBox[{"length", " ", "B"}], "-", 
     RowBox[{"terminated", " ", "binary", " ", "number"}]}], ",", " ", 
    RowBox[{
    "leaving", " ", "the", " ", "head", " ", "left", " ", "on", " ", "the", 
     " ", "first", " ", 
     RowBox[{"bit", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"If", " ", 
     RowBox[{"it", "'"}], "s", " ", "all", " ", "zero", " ", "already"}], ",",
     " ", 
    RowBox[{"then", " ", "rollover", " ", "to", " ", "all", " ", "one"}], ",",
     " ", 
    RowBox[{"keeping", " ", "the", " ", "same", " ", "number", " ", "of", " ", 
     RowBox[{"bits", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "q1", ",", "q2", ",", "q3", ",", "q4", ",", "q5", ",", "halt", ",", 
      "B"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"decrementTM", " ", "=", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "mark", " ", "the", " ", "left", " ", "end", " ", "of", " ", "the", " ",
        "string"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q1", ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q2", ",", "0", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q1", ",", "1"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q2", ",", "1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q2", ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q3", ",", "B", ",", 
         RowBox[{"+", "1"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"find", " ", "the", " ", "rightmost", " ", "B"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q3", ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q3", ",", "0", ",", 
         RowBox[{"+", "1"}]}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q3", ",", "1"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q3", ",", "1", ",", 
         RowBox[{"+", "1"}]}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q3", ",", "B"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q4", ",", "B", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "flip", " ", "multiple", " ", "0", "s", " ", "to", " ", "1", "s", " ", 
        "and", " ", "then", " ", "flip", " ", "the", " ", "first", " ", "1", 
        " ", "to", " ", "a", " ", "0"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q4", ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q4", ",", "1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], ",", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q4", ",", "1"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q5", ",", "0", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q4", ",", "B"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q5", ",", "B", ",", 
         RowBox[{"+", "1"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "move", " ", "to", " ", "the", " ", "left", " ", "end", " ", "end", 
        " ", "of", " ", "the", " ", "string", " ", "and", " ", "erase", " ", 
        "the", " ", "mark"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q5", ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q5", ",", "0", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q5", ",", "1"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"q5", ",", "1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"q5", ",", "B"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"halt", ",", "0", ",", 
         RowBox[{"+", "1"}]}], "}"}]}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQvV6s2vdC0RvHD8xJASBaZfOtaBDdoiTTAKI3d3D3
gOj7M22mgOgbttdXguitptd2gejdbu8MLwLpbwUdLiC6+vY7fxAdsdc/AETv
0Q+NAtEsvJfiQLRO4YkkEK236yqYbmZ/kQaixaZMSgfRSlOv5YLoRx+j8kH0
lxybUhDt99n+GIhmTwh5G1T8xnH2s6r3IDrHm/U7iN7+zosxGEgz1Guygug7
0QzsINopSoEbRP9ZM0keRDcw1imDaLPZqpog2kFVURdEJ4llWYJo/xfP3UH0
vO8vwPQ6vVvbQoH02imFO0A0AEj8nUM=
  "],
 CellLabel->"In[92]:=",ExpressionUUID->"a33c8d4d-f8cf-45a3-a911-3c173a49a62e"],

Cell["\<\
Mathematica has a built-in Turing machine simulator with a lot of options, \
but we will write our own simple simulator here just to practice defining and \
implementing models of computation.  The instantaneous description of a \
Turing machine will be a list representing a finite portion of the tape, with \
most cells containing a tape symbol but one cell containing {head state, tape \
symbol}.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
  3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
  3.8182913912743073`*^9}, {3.818291432913884*^9, 3.8182917067108088`*^9}, {
  3.818292474389621*^9, 3.818292481882544*^9}, {3.8182933648700447`*^9, 
  3.818293412750305*^9}, {3.818294844761196*^9, 3.818294866053067*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"b99da1a8-b11e-4b25-9966-88779968e5f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"OneStepTM", "[", 
   RowBox[{"rules_", ",", " ", 
    RowBox[{"{", 
     RowBox[{"lefttape___", ",", 
      RowBox[{"{", 
       RowBox[{"head_", ",", "symbol_"}], "}"}], ",", "righttape___"}], 
     "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"action", "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"head", ",", "symbol"}], "}"}], "/.", "rules"}]}], ",", 
      "newhead", ",", "newsymbol", ",", "direction"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "action", "]"}], "\[Equal]", "3"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"newhead", ",", "newsymbol", ",", "direction"}], "}"}], "=", 
        "action"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"direction", "\[Equal]", 
          RowBox[{"-", "1"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"{", "lefttape", "}"}], "]"}], "\[Equal]", "0"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"newhead", ",", "0"}], "}"}], ",", "newsymbol", ",", 
             "righttape"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Drop", "[", 
             RowBox[{
              RowBox[{"{", "lefttape", "}"}], ",", 
              RowBox[{"-", "1"}]}], "]"}], "~", "Join", "~", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"newhead", ",", 
                RowBox[{"Last", "[", 
                 RowBox[{"{", "lefttape", "}"}], "]"}]}], "}"}], ",", 
              "newsymbol", ",", "righttape"}], "}"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"else", " ", "direction"}], " ", "\[Equal]", " ", 
           RowBox[{"+", "1"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"{", "righttape", "}"}], "]"}], "\[Equal]", "0"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"lefttape", ",", "newsymbol", ",", 
             RowBox[{"{", 
              RowBox[{"newhead", ",", "0"}], "}"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"lefttape", ",", "newsymbol", ",", 
              RowBox[{"{", 
               RowBox[{"newhead", ",", 
                RowBox[{"First", "[", 
                 RowBox[{"{", "righttape", "}"}], "]"}]}], "}"}]}], "}"}], 
            "~", "Join", "~", 
            RowBox[{"Drop", "[", 
             RowBox[{
              RowBox[{"{", "righttape", "}"}], ",", "1"}], "]"}]}]}], "]"}]}],
         "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"else", " ", "no", " ", "rule", " ", "applies"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"lefttape", ",", 
        RowBox[{"{", 
         RowBox[{"head", ",", "symbol"}], "}"}], ",", "righttape"}], "}"}]}], 
     "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.81829171661699*^9, 3.8182917180851994`*^9}, {
  3.818292428835403*^9, 3.818292437556432*^9}, {3.818294870876472*^9, 
  3.818294918881916*^9}, {3.818294949113165*^9, 3.818295054847907*^9}, {
  3.818295085786396*^9, 3.818295736712208*^9}, {3.818295861818022*^9, 
  3.818295890564746*^9}, {3.818295946404739*^9, 3.818295954399802*^9}, {
  3.8189993954451437`*^9, 3.8189994125075893`*^9}, {3.850424399035733*^9, 
  3.850424405394506*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"50a13ee7-c513-4549-8a17-9be5f5e7bda0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPointList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"OneStepTM", "[", 
      RowBox[{"decrementTM", ",", "#"}], "]"}], "&"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"q1", ",", "0"}], "}"}], ",", "1", ",", "1", ",", "B"}], 
     "}"}]}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.818295892348485*^9, 3.81829589531065*^9}, {
  3.818296008273988*^9, 3.818296031642624*^9}, {3.8182979585719337`*^9, 
  3.818297963886669*^9}, {3.818559984902068*^9, 3.818559987421144*^9}, {
  3.818560023133453*^9, 3.818560029466403*^9}, {3.81856007987796*^9, 
  3.818560116486121*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"5f3243c3-1027-4ba1-bcad-12a957cfc6ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "Turing", " ", "machine", " ", "that", " ", "copies", " ", "the", " ", 
      "bits", " ", "in", " ", "a", " ", "B"}], "-", 
     RowBox[{"terminated", " ", "binary", " ", "string"}]}], ",", " ", 
    RowBox[{
     RowBox[{"e", ".", "g", ".", " ", "011"}], "B", " ", "becomes", " ", 
     "011011", "B"}], ",", " ", 
    RowBox[{
    "with", " ", "the", " ", "head", " ", "left", " ", "on", " ", "the", " ", 
     "first", " ", "bit"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "q1", ",", "q2", ",", "q3", ",", "q4", ",", "q5", ",", "q6", ",", "q7", 
      ",", "q8", ",", "halt", ",", "B", ",", "c0", ",", "c1", ",", "n0", ",", 
      "n1"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"copyTM", " ", "=", " ", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"memorize", " ", "the", " ", "next", " ", "bit"}], ",", " ", 
        RowBox[{
        "marking", " ", "it", " ", "as", " ", "being", " ", "copied"}], ",", 
        " ", 
        RowBox[{
        "and", " ", "start", " ", "moving", " ", "to", " ", "the", " ", 
         "right"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q1", ",", "0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q2", ",", "c0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q1", ",", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q3", ",", "c1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"pass", " ", "through", " ", "old", " ", "and", " ", "new"}],
          ",", " ", 
         RowBox[{"deposit", " ", "new", " ", "0"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q2", ",", "0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q2", ",", "0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q2", ",", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q2", ",", "1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q2", ",", "n0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q2", ",", "n0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q2", ",", "n1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q2", ",", "n1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q2", ",", "B"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q4", ",", "n0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"pass", " ", "through", " ", "old", " ", "and", " ", "new"}],
          ",", " ", 
         RowBox[{"deposit", " ", "new", " ", "1"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q3", ",", "0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q3", ",", "0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q3", ",", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q3", ",", "1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q3", ",", "n0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q3", ",", "n0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q3", ",", "n1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q3", ",", "n1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q3", ",", "B"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q4", ",", "n1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"write", " ", "end"}], "-", "of", "-", 
         RowBox[{
         "string", " ", "marker", " ", "and", " ", "initiate", " ", "return", 
          " ", "run"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q4", ",", "0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q5", ",", "B", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{
          "move", " ", "left", " ", "through", " ", "new", " ", "bits"}], ";",
           " ", 
          RowBox[{
          "either", " ", "enter", " ", "some", " ", "remaining", " ", "old", 
           " ", "bits", " ", "yet", " ", "to", " ", "be", " ", "copied"}]}], 
         ",", " ", 
         RowBox[{
         "or", " ", "first", " ", "hit", " ", "copied", " ", "bits", " ", 
          "in", " ", "which", " ", "case", " ", 
          RowBox[{"we", "'"}], "re", " ", "done", " ", "copying"}]}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q5", ",", "n0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q5", ",", "n0", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q5", ",", "n1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q5", ",", "n1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q5", ",", "0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q6", ",", "0", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q5", ",", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q6", ",", "1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q5", ",", "c0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q7", ",", "c0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q5", ",", "c1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q7", ",", "c1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "move", " ", "to", " ", "the", " ", "leftmost", " ", "old", " ", 
          "bit", " ", "that", " ", 
          RowBox[{"hasn", "'"}], "t", " ", "yet", " ", "been", " ", 
          "copied"}], ",", " ", 
         RowBox[{"then", " ", "go", " ", "to", " ", "step", " ", "1"}]}], " ",
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q6", ",", "0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q6", ",", "0", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q6", ",", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q6", ",", "1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q6", ",", "c0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q1", ",", "c0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q6", ",", "c1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q1", ",", "c1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "clear", " ", "the", " ", "tags", " ", "on", " ", "the", " ", "new", 
          " ", "bits"}], ",", " ", 
         RowBox[{
         "so", " ", "that", " ", "they", " ", "are", " ", "just", " ", "0", 
          "s", " ", "and", " ", "1", "s"}], ",", " ", 
         RowBox[{
         "then", " ", "return", " ", "left", " ", "to", " ", "reach", " ", 
          "the", " ", "copied", " ", "bits"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q7", ",", "n0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q7", ",", "0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q7", ",", "n1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q7", ",", "1", ",", 
          RowBox[{"+", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q7", ",", "B"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q7", ",", "B", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q7", ",", "0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q7", ",", "0", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q7", ",", "1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q7", ",", "1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q7", ",", "c0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q8", ",", "0", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q7", ",", "c1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q8", ",", "1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "clear", " ", "the", " ", "tags", " ", "on", " ", "the", " ", 
          "copied", " ", "bits"}], ",", " ", 
         RowBox[{
         "and", " ", "halt", " ", "upon", " ", "reaching", " ", "the", " ", 
          "background", " ", "0"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q8", ",", "c0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q8", ",", "0", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q8", ",", "c1"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"q8", ",", "1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"q8", ",", "0"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"halt", ",", "0", ",", 
          RowBox[{"+", "1"}]}], "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.818291819846519*^9, 3.8182918430629807`*^9}, {
  3.8182919348343678`*^9, 3.8182922248792133`*^9}, {3.818292320360437*^9, 
  3.818292385893783*^9}, {3.8182925587262993`*^9, 3.818292694694056*^9}, {
  3.818293647446134*^9, 3.818293796263789*^9}, {3.818293887464292*^9, 
  3.8182938904918633`*^9}, {3.818293970662077*^9, 3.818294006564089*^9}, {
  3.818294038263815*^9, 3.818294038678977*^9}, {3.818294071250917*^9, 
  3.818294076580577*^9}, {3.8182941267057047`*^9, 3.8182941388420267`*^9}, {
  3.8182941858883*^9, 3.8182948339984503`*^9}, {3.818564959950145*^9, 
  3.8185650332814302`*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"9de4e2b0-6066-4411-9129-7c14afd9e5b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPointList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"OneStepTM", "[", 
      RowBox[{"copyTM", ",", "#"}], "]"}], "&"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"q1", ",", "0"}], "}"}], ",", "1", ",", "1", ",", "B"}], 
     "}"}]}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.818295892348485*^9, 3.81829589531065*^9}, {
  3.818296008273988*^9, 3.818296031642624*^9}, {3.8182979585719337`*^9, 
  3.818297963886669*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"e5dd760c-7ddc-4084-aec7-1bd74a6ce102"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "it", " ", "is", " ", "always", " ", "a", " ", "good", " ", "idea", " ", 
     "to", " ", "automate", " ", "the", " ", "testing", " ", "of", " ", 
     "your", " ", "programs"}], ",", " ", 
    RowBox[{
    "to", " ", "increase", " ", "the", " ", "odds", " ", "of", " ", "finding",
      " ", "bugs", " ", "if", " ", "there", " ", "are", " ", "any"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"TestCopyTM", "[", "n_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"bits", "=", 
        RowBox[{"RandomChoice", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", "n"}], "]"}]}], ",", 
       "output"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"output", "=", 
       RowBox[{"FixedPoint", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"OneStepTM", "[", 
           RowBox[{"copyTM", ",", "#"}], "]"}], "&"}], ",", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"q1", ",", 
             RowBox[{"First", "[", "bits", "]"}]}], "}"}], "}"}], "~", "Join",
           "~", 
          RowBox[{"Rest", "[", "bits", "]"}], "~", "Join", "~", 
          RowBox[{"{", "B", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"output", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "===", "0"}], "&&", 
         RowBox[{
          RowBox[{"output", "[", 
           RowBox[{"[", 
            RowBox[{"-", "1"}], "]"}], "]"}], "===", "B"}], "&&", 
         RowBox[{
          RowBox[{"output", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "===", 
          RowBox[{"{", 
           RowBox[{"halt", ",", 
            RowBox[{"First", "[", "bits", "]"}]}], "}"}]}], "&&", 
         RowBox[{
          RowBox[{"output", "[", 
           RowBox[{"[", 
            RowBox[{"3", ";;", 
             RowBox[{"-", "2"}]}], "]"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Rest", "[", "bits", "]"}], "~", "Join", "~", "bits"}]}]}],
         ",", "\[IndentingNewLine]", "\"\<CORRECT\>\"", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<INCORRECT:\\n\>\"", "<>", 
         RowBox[{"ToString", "[", "bits", "]"}], "<>", "\"\<\\n\>\"", "<>", 
         RowBox[{"ToString", "[", "output", "]"}]}]}], "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.818303720562231*^9, 3.818303873920532*^9}, {
  3.818303930547661*^9, 3.818304086934389*^9}, {3.818304129772493*^9, 
  3.818304160463441*^9}, {3.818304202558915*^9, 3.81830420354904*^9}, {
  3.818560137632532*^9, 3.818560171167787*^9}, {3.8186479936612463`*^9, 
  3.818648010537941*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"dd0d3953-7bbd-426e-9437-15270699bc62"],

Cell[BoxData[
 RowBox[{"TestCopyTM", "[", "20", "]"}]], "Input",
 CellChangeTimes->{{3.818304163934773*^9, 3.818304168833902*^9}, {
  3.818304210030023*^9, 3.8183042104533443`*^9}, {3.8183042566870193`*^9, 
  3.81830428780826*^9}, {3.818648019831499*^9, 3.818648060743442*^9}, {
  3.8186481177825127`*^9, 3.818648144885418*^9}, {3.8186482040196753`*^9, 
  3.818648245061425*^9}, {3.81864833708239*^9, 3.81864834211487*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"ed37277d-c0a7-4c8b-9d90-c1d8ecdf6a3b"],

Cell[TextData[{
 "Fun facts:  \n\t1. Turing machines are Turing-universal!  There exist \
machines (with many variations both trivial and fundamental) such that given \
a description of another Turing machine and a description of its input, will \
compute the same output.\n\t2. Some of these machines are ",
 StyleBox["very",
  FontSlant->"Italic"],
 " small!  A tape alphabet of just 0 and 1 is sufficient, given enough head \
states.   Just 2 head states are enough, given sufficient number of tape \
symbols.  (See e.g. Woods & Neary, 2009.)"
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
  3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
  3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
  3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
  3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
  3.8187990644167767`*^9, 3.8187994442757883`*^9}, {3.81879947939328*^9, 
  3.8187994870359488`*^9}, {3.818799525931479*^9, 3.8187995419474573`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"eab7232f-b152-4217-8040-a64ec4714d7b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random-Access Machine", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818263922110901*^9, 3.818263928075458*^9}, {3.818296986461046*^9, 
  3.8182969908594646`*^9}, {3.818298062333235*^9, 3.818298065052231*^9}, {
  3.8183051291102753`*^9, 3.81830512947314*^9}, {3.818551668375237*^9, 
  3.818551673098476*^9}},ExpressionUUID->"1dc772ab-e0f3-4802-abaf-\
91d88fc81b7e"],

Cell["\<\
The Random-Access Machine (RAM) is a very simplified assembly-language-like \
model.  A single program is given, which executes while modifying information \
in \[OpenCurlyDoubleQuote]registers\[CloseCurlyDoubleQuote] (aka memory \
locations).  There an an infinite number of memory locations that may be \
used, which all initially contain the value 0 unless they are used as input.  \
All registers store unbounded integers, which may be positive or negative or \
zero.  Registers are indexed by integers (which may be positive, negative, or \
zero).

Again, there are many variants of this basic idea; sometimes \
\[OpenCurlyDoubleQuote]minor\[CloseCurlyDoubleQuote] differences have huge \
consequences.

CONSTANT(value,to)\t# set the register \[OpenCurlyDoubleQuote]to\
\[CloseCurlyDoubleQuote] to contain the specified integer \
\[OpenCurlyDoubleQuote]value\[CloseCurlyDoubleQuote].
COPY[from,to)\t\t\t# replace the contents of register \
\[OpenCurlyDoubleQuote]to\[CloseCurlyDoubleQuote] by those of register \
\[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote], without altering \
\[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote].
INC(reg)\t\t\t\t# increment (add 1 to) register \[OpenCurlyDoubleQuote]reg\
\[CloseCurlyDoubleQuote]
DEC(reg)\t\t\t\t# decrement (subtract 1 from) register \
\[OpenCurlyDoubleQuote]reg\[CloseCurlyDoubleQuote]
ADD[from,to)\t\t\t# register \
\[OpenCurlyDoubleQuote]to\[CloseCurlyDoubleQuote] is increased by the amount \
in register \[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote], without \
altering \[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote].
SUB(from,to)\t\t\t# register \
\[OpenCurlyDoubleQuote]to\[CloseCurlyDoubleQuote] is decreased by the amount \
in register \[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote], without \
altering \[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote].
MULT(from,to)\t\t\t# register \[OpenCurlyDoubleQuote]to\
\[CloseCurlyDoubleQuote] is multiplied by the value in register \
\[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote], without altering \
\[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote].
STORE(from,to)\t\t# the value of register \[OpenCurlyDoubleQuote]from\
\[CloseCurlyDoubleQuote] is placed into the register pointed to by \
\[OpenCurlyDoubleQuote]to\[CloseCurlyDoubleQuote].
RECALL(from,to)\t\t# the value of the register pointed to by \
\[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote] is placed in the register \
\[OpenCurlyDoubleQuote]to\[CloseCurlyDoubleQuote].
JUMPNEG(test,line)\t\t# if register \[OpenCurlyDoubleQuote]test\
\[CloseCurlyDoubleQuote] contains a negative value, then jump to line number \
\[OpenCurlyDoubleQuote]line\[CloseCurlyDoubleQuote].
JUMPZERO(test,line)\t# if register \[OpenCurlyDoubleQuote]test\
\[CloseCurlyDoubleQuote] contains value 0, then jump to line number \
\[OpenCurlyDoubleQuote]line\[CloseCurlyDoubleQuote].
JUMPPOS(test,line)\t\t# if register \[OpenCurlyDoubleQuote]test\
\[CloseCurlyDoubleQuote] contains a positive value, then jump to line number \
\[OpenCurlyDoubleQuote]line\[CloseCurlyDoubleQuote].
HALT\t\t\t\t# that\[CloseCurlyQuote]s it, folks!

We will represent the state of the registers as an association from integers \
to integers; the association will also contain the LINECOUNTER, which starts \
at 1.  Except for jumps, the next line executed will strictly be the current \
line number plus 1; if that line doesn\[CloseCurlyQuote]t exist, a HALT will \
execute.  By convention, the N inputs will be provided in registers 1...N, \
and the output(s) read from specified registers.\
\>", "Text",
 CellChangeTimes->CompressedData["
1:eJwdzk8oQwEABvCXNglpcZjGamZNWTn4kz+HtZ0ckPVSTowV0RprRtYyawcH
xuHlMWrNmrUVpcSicVpsU9pmRLsg0WjGdkBqeJ/D16++vsNXpRonh/IIguAx
gaFfq2ZLl5JLnbQWWi6/DJAdsBihxn5Yso0+vC+EdZX+RRg6P6Vhk+8zE8HO
3E9EGQcSLywoCCa5cF7K50N/mt0M9X13JCxPNPRCjq3s5oLxIbCahFaqMw29
19w3OBUvykFOTPMDh0Xtyu4J5i9NqmEjnd2AwbDWCVuu7j2wwNHzDA/ql78h
9VHLVjCOGaoLoVi3K4EyLqsVvlOKNqiMupRQHTSpoNDlnoRP/lsj3IwvLUCv
Z4SCK9RcDiYEvn9Lj195JOPOdHEF3Ds5E8OZrtEaaOJEbGZGkT1jh0eC7JpE
n5I/DvLW4Wx+hwPKRDE3/AO5PdpD
  "],
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"cbd168ce-354a-436c-b9d6-6236578df99c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"input", " ", "n", " ", "in", " ", "register", " ", "1"}], ",", 
    " ", 
    RowBox[{"output", " ", "Fibbonaci", 
     RowBox[{"(", "n", ")"}], " ", "in", " ", "register", " ", "1", " ", 
     "with", " ", "other", " ", "registers", " ", 
     RowBox[{"cleared", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"during", " ", "computation"}], ",", " ", 
    RowBox[{
    "registers", " ", "2", " ", "and", " ", "3", " ", "will", " ", "store", 
     " ", "the", " ", "last", " ", "two", " ", "computed", " ", "values"}], 
    ",", " ", 
    RowBox[{"register", " ", "1", " ", "will", " ", "count", " ", "down"}], 
    ",", " ", 
    RowBox[{
    "registers", " ", "4", " ", "and", " ", "5", " ", "will", " ", "be", " ", 
     
     RowBox[{"temporary", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"fibRAM", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"CONSTANT", "[", 
        RowBox[{"1", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"CONSTANT", "[", 
        RowBox[{"1", ",", "3"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"JUMPZERO", "[", 
        RowBox[{"1", ",", "11"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"DEC", "[", "1", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"JUMPZERO", "[", 
        RowBox[{"1", ",", "11"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"6", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"2", ",", "4"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"7", "\[Rule]", 
       RowBox[{"ADD", "[", 
        RowBox[{"3", ",", "4"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"8", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"3", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"9", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"4", ",", "3"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"10", "\[Rule]", 
       RowBox[{"JUMPZERO", "[", 
        RowBox[{"0", ",", "4"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"11", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"3", ",", "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"12", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"0", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"13", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"0", ",", "3"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"14", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"0", ",", "4"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"15", "\[Rule]", "HALT"}]}], "\[IndentingNewLine]", "}"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.818553828346746*^9, 3.818553863747957*^9}, {
  3.8185538977151937`*^9, 3.818553979529557*^9}, {3.818554032322875*^9, 
  3.818554105763461*^9}, {3.818554144773716*^9, 3.818554239605784*^9}, {
  3.818554360279126*^9, 3.818554385723592*^9}, {3.8185544235740547`*^9, 
  3.81855442404475*^9}, {3.818554553106647*^9, 3.818554640806752*^9}, {
  3.818554705581788*^9, 3.8185547586598873`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"cb84e309-3b7b-4e31-be90-f80211ff9478"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{
   "LINECOUNTER", ",", "CONSTANT", ",", "COPY", ",", "INC", ",", "DEC", ",", 
    "ADD", ",", "SUB", ",", "MULT", ",", "STORE", ",", "RECALL", ",", 
    "JUMPNEG", ",", "JUMPZERO", ",", "JUMPPOS"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RunRAM", "[", 
   RowBox[{"program_", ",", "inputs_", ",", "outputregs_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"state", "=", 
       RowBox[{"<|", " ", 
        RowBox[{"LINECOUNTER", "\[Rule]", "1"}], " ", "|>"}]}], ",", 
      RowBox[{"command", "=", "None"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"clear", " ", "all", " ", "explicitly"}], "-", 
       RowBox[{"mentioned", " ", "registers"}]}], ",", " ", 
      RowBox[{"then", " ", "load", " ", "the", " ", "inputs"}]}], " ", "*)"}],
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"state", "[", "#", "]"}], "=", "0"}], ")"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"outputregs", "~", "Join", "~", 
        RowBox[{"Union", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Last", "/@", "program"}], ")"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"HALT", "\[Rule]", "0"}], ",", 
             RowBox[{
              RowBox[{"CONSTANT", "[", 
               RowBox[{"_", ",", "r_"}], "]"}], "\[RuleDelayed]", "r"}], ",", 
             
             RowBox[{
              RowBox[{"JUMPZERO", "[", 
               RowBox[{"r_", ",", "_"}], "]"}], "\[RuleDelayed]", "r"}], ",", 
             
             RowBox[{
              RowBox[{"_", "[", "r_", "]"}], "\[RuleDelayed]", "r"}], ",", 
             RowBox[{
              RowBox[{"_", "[", 
               RowBox[{"r1_", ",", "r2_"}], "]"}], "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"r1", ",", "r2"}], "}"}]}]}], "}"}]}], "]"}], "]"}]}], 
       ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"state", "[", "i", "]"}], "=", 
        RowBox[{"inputs", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "inputs", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"execute", " ", "commands", " ", "until", " ", "done"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"command", "=!=", "HALT"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"command", "=", 
         RowBox[{
          RowBox[{"state", "[", "LINECOUNTER", "]"}], "/.", "program"}]}], 
        ";", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"NumberQ", "[", "command", "]"}], ",", 
          RowBox[{"command", "=", "HALT"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"state", "[", "LINECOUNTER", "]"}], ",", "\"\<: \>\"", 
            ",", "command", ",", "\"\<\\t\\t\\t\>\"", ",", "state"}], "]"}], 
          ";"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"command", "/.", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"CONSTANT", "[", 
             RowBox[{"value_", ",", "to_"}], "]"}], " ", "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"state", "[", "to", "]"}], "=", "value"}], ")"}]}], ",",
            "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"COPY", "[", 
             RowBox[{"from_", ",", "to_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"state", "[", "to", "]"}], "=", 
              RowBox[{"state", "[", "from", "]"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"INC", "[", "reg_", "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"state", "[", "reg", "]"}], "++"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"DEC", "[", "reg_", "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"state", "[", "reg", "]"}], "--"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ADD", "[", 
             RowBox[{"from_", ",", "to_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"state", "[", "to", "]"}], "+=", 
              RowBox[{"state", "[", "from", "]"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"SUB", "[", 
             RowBox[{"from_", ",", "to_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"state", "[", "to", "]"}], "-=", 
              RowBox[{"state", "[", "from", "]"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"MULT", "[", 
             RowBox[{"from_", ",", "to_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"state", "[", "to", "]"}], "*=", 
              RowBox[{"state", "[", "from", "]"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"STORE", "[", 
             RowBox[{"from_", ",", "to_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"state", "[", 
               RowBox[{"state", "[", "to", "]"}], "]"}], "=", 
              RowBox[{"state", "[", "from", "]"}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"RECALL", "[", 
             RowBox[{"from_", ",", "to_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"KeyExistsQ", "[", 
                  RowBox[{"state", ",", 
                   RowBox[{"state", "[", "from", "]"}]}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{"state", "[", 
                  RowBox[{"state", "[", "from", "]"}], "]"}], "=", "0"}]}], 
               "]"}], ";", 
              RowBox[{
               RowBox[{"state", "[", "to", "]"}], "=", 
               RowBox[{"state", "[", 
                RowBox[{"state", "[", "from", "]"}], "]"}]}]}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"JUMPNEG", "[", 
             RowBox[{"test_", ",", "line_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"state", "[", "test", "]"}], "<", "0"}], ",", 
               RowBox[{
                RowBox[{"state", "[", "LINECOUNTER", "]"}], "=", 
                RowBox[{"line", "-", "1"}]}]}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"JUMPZERO", "[", 
             RowBox[{"test_", ",", "line_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"state", "[", "test", "]"}], "\[Equal]", "0"}], ",", 
               RowBox[{
                RowBox[{"state", "[", "LINECOUNTER", "]"}], "=", 
                RowBox[{"line", "-", "1"}]}]}], "]"}], ")"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"JUMPPOS", "[", 
             RowBox[{"test_", ",", "line_"}], "]"}], "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"state", "[", "test", "]"}], ">", "0"}], ",", 
               RowBox[{
                RowBox[{"state", "[", "LINECOUNTER", "]"}], "=", 
                RowBox[{"line", "-", "1"}]}]}], "]"}], ")"}]}]}], 
          "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"state", "[", "LINECOUNTER", "]"}], "++"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"state", "/@", "outputregs"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8185547725718822`*^9, 3.818555036273633*^9}, {
   3.818555184792441*^9, 3.8185552010698643`*^9}, {3.8185552346548*^9, 
   3.8185552594048347`*^9}, {3.8185552914720984`*^9, 3.818555358533463*^9}, {
   3.8185553894463453`*^9, 3.818555479472295*^9}, {3.818555888904048*^9, 
   3.818555924012546*^9}, {3.8185559549550047`*^9, 3.818555981833002*^9}, {
   3.818556085712816*^9, 3.8185562679568357`*^9}, 3.8185563238499804`*^9, {
   3.818556355482401*^9, 3.8185563653897667`*^9}, {3.818556406169401*^9, 
   3.818556657249255*^9}, {3.818556693741028*^9, 3.8185567118274307`*^9}, 
   3.818556785938451*^9, {3.818556856249906*^9, 3.818556921929739*^9}, {
   3.81855697426567*^9, 3.8185570133044767`*^9}, {3.818557259023642*^9, 
   3.8185572992408943`*^9}, {3.818557514781443*^9, 3.818557545098694*^9}, {
   3.818557575686455*^9, 3.818557609516732*^9}, {3.818557663775378*^9, 
   3.818557664056898*^9}, {3.818557715163061*^9, 3.818557719073455*^9}, {
   3.818652634173945*^9, 3.818652671396578*^9}, {3.8186527612965317`*^9, 
   3.818652805318509*^9}, {3.818653665002151*^9, 3.818653691290044*^9}, {
   3.818653746657317*^9, 3.8186537519833612`*^9}, {3.8189820956765747`*^9, 
   3.8189820968631563`*^9}, {3.8197295934408083`*^9, 3.819729636066433*^9}, {
   3.8197301966865873`*^9, 3.819730207338051*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"43e1b254-785a-4b22-89e7-c170420e0091"],

Cell[BoxData[
 RowBox[{"RunRAM", "[", 
  RowBox[{"fibRAM", ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8185567898438053`*^9, 3.818556847998394*^9}, {
  3.818556942544677*^9, 3.818556947141575*^9}, {3.818557018271352*^9, 
  3.8185570418272667`*^9}, {3.818557693868012*^9, 3.818557726783909*^9}, {
  3.81855777599876*^9, 3.818557780559799*^9}, {3.8189821512391567`*^9, 
  3.818982151781316*^9}, {3.818982197271696*^9, 3.818982208001408*^9}, {
  3.8189824784824457`*^9, 3.818982478726191*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"90422872-5b45-4de6-83b0-cf9952d961c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "compute", " ", "Fibbonaci", " ", "numbers", " ", "by", " ", "a", " ", 
     "memoized", " ", "recursive", " ", "function", " ", "definition"}], ",", 
    " ", 
    RowBox[{
    "and", " ", "compare", " ", "to", " ", "the", " ", "RAM", " ", 
     "program"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"testfibRAM", "[", "N_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "fib", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"fib", "[", "0", "]"}], "=", "1"}], ";", 
      RowBox[{
       RowBox[{"fib", "[", "1", "]"}], "=", "1"}], ";", 
      RowBox[{
       RowBox[{"fib", "[", "n_", "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"fib", "[", "n", "]"}], "=", 
         RowBox[{
          RowBox[{"fib", "[", 
           RowBox[{"n", "-", "1"}], "]"}], "+", 
          RowBox[{"fib", "[", 
           RowBox[{"n", "-", "2"}], "]"}]}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AllTrue", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "N"}], "]"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"fib", "[", "#", "]"}], "}"}], "===", 
           RowBox[{"RunRAM", "[", 
            RowBox[{"fibRAM", ",", 
             RowBox[{"{", "#", "}"}], ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ")"}], "&"}]}], "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.818982159900053*^9, 3.818982333270122*^9}, {
  3.818982386984783*^9, 3.818982395006263*^9}, {3.8189824282581673`*^9, 
  3.818982462619815*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"aaf3e53c-f279-402b-9de1-bc715152641d"],

Cell[BoxData[
 RowBox[{"testfibRAM", "[", "100", "]"}]], "Input",
 CellChangeTimes->{{3.818982336937068*^9, 3.818982357888198*^9}, {
  3.8189824040291367`*^9, 3.818982405936467*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"b624d179-0770-44d7-8401-200177ec7961"],

Cell[BoxData[
 RowBox[{
  RowBox[{"powerRAM", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"CONSTANT", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"JUMPZERO", "[", 
       RowBox[{"1", ",", "6"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"DEC", "[", "1", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"MULT", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"5", "\[Rule]", 
      RowBox[{"JUMPZERO", "[", 
       RowBox[{"0", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"6", "\[Rule]", "HALT"}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.819003598787649*^9, 3.819003665319879*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"9e0e2c1c-0768-421d-aa14-1a8e8e17f252"],

Cell[BoxData[
 RowBox[{"RunRAM", "[", 
  RowBox[{"powerRAM", ",", 
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.819003673480734*^9, 3.81900372805225*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"e75cf10d-dd31-4730-9f2b-48eb68dd85b3"],

Cell[BoxData[
 RowBox[{"2", "^", 
  RowBox[{"(", 
   RowBox[{"2", "^", "10"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.8190037318639603`*^9, 3.819003735150074*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"5c2c145a-f96c-4d4d-abe1-6d0a996cd95a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"input", " ", "n"}], ">", 
     RowBox[{
      RowBox[{"0", " ", "and", " ", "two", " ", "length"}], "-", 
      RowBox[{"n", " ", "integer", " ", "vectors"}]}]}], ";", " ", 
    RowBox[{
    "output", " ", "is", " ", "n", " ", "and", " ", "a", " ", "single", " ", 
     "integer", " ", "vector", " ", "that", " ", "is", " ", "their", " ", 
     "sum"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"vectoraddRAM", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"1", ",", "0"}], "]"}]}], ",", "            ", 
      RowBox[{"(*", " ", 
       RowBox[{"will", " ", "count", " ", "down", " ", "to", " ", "zero"}], 
       " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"CONSTANT", "[", 
        RowBox[{"2", ",", 
         RowBox[{"-", "1"}]}], "]"}]}], ",", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"will", " ", "index", " ", "vector", " ", "1"}], ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"using", " ", "registers", " ", "2"}], "..."}], 
         RowBox[{"(", 
          RowBox[{"n", "+", "1"}], ")"}]}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"1", ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ",", "          ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"will", " ", "index", " ", "vector", " ", "2"}], ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"using", " ", "registers", " ", 
           RowBox[{"(", 
            RowBox[{"n", "+", "2"}], ")"}]}], "..."}], 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", "n"}], "+", "1"}], ")"}]}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"ADD", "[", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"RECALL", "[", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "3"}]}], "]"}]}], ",", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "access", " ", "the", " ", "next", " ", "values", " ", "of", " ", 
        "the", " ", "vectors"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"6", "\[Rule]", 
       RowBox[{"RECALL", "[", 
        RowBox[{
         RowBox[{"-", "2"}], ",", 
         RowBox[{"-", "4"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"7", "\[Rule]", 
       RowBox[{"ADD", "[", 
        RowBox[{
         RowBox[{"-", "3"}], ",", 
         RowBox[{"-", "4"}]}], "]"}]}], ",", "         ", 
      RowBox[{"(*", " ", 
       RowBox[{"add", " ", "them"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"8", "\[Rule]", 
       RowBox[{"STORE", "[", 
        RowBox[{
         RowBox[{"-", "4"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], ",", "     ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "store", " ", "the", " ", "result", " ", "in", " ", "the", " ", 
        "position", " ", "of", " ", "the", " ", "first", " ", "vector"}], " ",
        "*)"}], "\[IndentingNewLine]", 
      RowBox[{"9", "\[Rule]", 
       RowBox[{"CONSTANT", "[", 
        RowBox[{"0", ",", 
         RowBox[{"-", "4"}]}], "]"}]}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{"10", "\[Rule]", 
       RowBox[{"STORE", "[", 
        RowBox[{
         RowBox[{"-", "4"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ",", "   ", 
      RowBox[{"(*", " ", 
       RowBox[{"clear", " ", "the", " ", "second", " ", "vector"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"11", "\[Rule]", 
       RowBox[{"DEC", "[", "0", "]"}]}], ",", "                      ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "move", " ", "to", " ", "the", " ", "next", " ", "index", " ", 
        "position"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"12", "\[Rule]", 
       RowBox[{"INC", "[", 
        RowBox[{"-", "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"13", "\[Rule]", 
       RowBox[{"INC", "[", 
        RowBox[{"-", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"14", "\[Rule]", 
       RowBox[{"JUMPZERO", "[", 
        RowBox[{"0", ",", "16"}], "]"}]}], ",", "  ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "have", " ", "we", " ", "gone", " ", "through", " ", "the", " ", 
        "whole", " ", 
        RowBox[{"vector", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"15", "\[Rule]", 
       RowBox[{"JUMPZERO", "[", 
        RowBox[{
         RowBox[{"-", "4"}], ",", "5"}], "]"}]}], ",", "    ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"always", " ", "jump"}], ";", " ", 
        RowBox[{"register", " ", "-", 
         RowBox[{"4", " ", "was", " ", "cleared"}]}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"16", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{
         RowBox[{"-", "4"}], ",", 
         RowBox[{"-", "3"}]}], "]"}]}], ",", "         ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"clean", " ", "up"}], ",", " ", 
        RowBox[{"because", " ", 
         RowBox[{"it", "'"}], "s", " ", "polite"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"17", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{
         RowBox[{"-", "3"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"18", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{
         RowBox[{"-", "2"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"19", "\[Rule]", "HALT"}]}], "\[IndentingNewLine]", "}"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.818558103647545*^9, 3.818558179320909*^9}, {
  3.818558209678111*^9, 3.81855821009657*^9}, {3.818558261686764*^9, 
  3.8185582713079777`*^9}, {3.8185583037181387`*^9, 3.818558551952858*^9}, {
  3.818558628701445*^9, 3.818559122760273*^9}, {3.819730148020232*^9, 
  3.8197301710059967`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"7fe72962-2f11-4548-a9c0-e31e27076b6d"],

Cell[BoxData[
 RowBox[{"RunRAM", "[", 
  RowBox[{"vectoraddRAM", ",", 
   RowBox[{"{", 
    RowBox[{
    "5", ",", "0", ",", "0", ",", "0", ",", "1", ",", "7", ",", "10", ",", 
     "10", ",", "2", ",", "3", ",", "20"}], "}"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"1", ",", "6"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.81855913016617*^9, 3.818559172458651*^9}, {
  3.8185649066721153`*^9, 3.818564924799122*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"02a66422-92b0-45d2-83f6-3f55b2175d48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "this", " ", "just", " ", "demonstrates", " ", "and", " ", "tests", " ", 
    "STORE", " ", "and", " ", "RECALL", " ", "writing", " ", "to", " ", 
    "memory", " ", "beyond", " ", "what", " ", "is", " ", "initially", " ", 
    "cleared", " ", "for", " ", 
    RowBox[{"input", "/", "output"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"testmemoryRAM", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"COPY", "[", 
        RowBox[{"1", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"CONSTANT", "[", 
        RowBox[{"10", ",", "3"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"MULT", "[", 
        RowBox[{"3", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"STORE", "[", 
        RowBox[{"1", ",", "2"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"RECALL", "[", 
        RowBox[{"2", ",", "4"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"6", "\[Rule]", 
       RowBox[{"ADD", "[", 
        RowBox[{"3", ",", "4"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"7", "\[Rule]", 
       RowBox[{"DEC", "[", "2", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"8", "\[Rule]", 
       RowBox[{"RECALL", "[", 
        RowBox[{"2", ",", "5"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"9", "\[Rule]", 
       RowBox[{"ADD", "[", 
        RowBox[{"5", ",", "4"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"10", "\[Rule]", 
       RowBox[{"STORE", "[", 
        RowBox[{"4", ",", "4"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"11", "\[Rule]", 
       RowBox[{"DEC", "[", "1", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"12", "\[Rule]", 
       RowBox[{"JUMPZERO", "[", 
        RowBox[{"1", ",", "14"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"13", "\[Rule]", 
       RowBox[{"JUMPZERO", "[", 
        RowBox[{"0", ",", "1"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"14", "\[Rule]", "HALT"}]}], "\[IndentingNewLine]", "}"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.818653023196521*^9, 3.818653204715106*^9}, {
  3.818653792624463*^9, 3.818653874199706*^9}, {3.818653944177824*^9, 
  3.818654015761594*^9}, {3.818654144759461*^9, 3.818654184678286*^9}, {
  3.819730306144813*^9, 
  3.819730333018424*^9}},ExpressionUUID->"5b30fe14-6ccf-4011-90cf-\
94830e9a9f2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RunRAM", "[", 
   RowBox[{"testmemoryRAM", ",", 
    RowBox[{"{", "5", "}"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", "50"}], "]"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "all", " ", "memory", " ", "gets", " ", "cleared", " ", "at", " ", 
    "beginning"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.818653212571027*^9, 3.818653244887891*^9}, {
  3.818653349895479*^9, 3.818653372904439*^9}, {3.818653881826848*^9, 
  3.8186538819705763`*^9}, {3.818654020506925*^9, 3.818654028291204*^9}, {
  3.818654058979022*^9, 3.818654108108708*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"36828ff0-660f-469a-8026-478b76a18ce7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RunRAM", "[", 
   RowBox[{"testmemoryRAM", ",", 
    RowBox[{"{", "5", "}"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", "20"}], "]"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"memory", " ", ">", " ", 
    RowBox[{
    "20", " ", "gets", " ", "cleared", " ", "when", " ", "first", " ", 
     "used"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.818653212571027*^9, 3.818653244887891*^9}, {
  3.818653349895479*^9, 3.818653372904439*^9}, {3.818653881826848*^9, 
  3.8186538819705763`*^9}, {3.818654020506925*^9, 3.818654028291204*^9}, {
  3.818654058979022*^9, 3.8186541159765368`*^9}, {3.818654213771111*^9, 
  3.818654214253249*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"8edcfc06-1122-4006-ac75-d96dcde170a2"],

Cell[TextData[{
 "Fun facts:  \n\t1.  This RAM model, and even simpler variants, is \
Turing-universal too!  The STORE/RECALL mechanism allows an unbounded amount \
of data storage, which is necessary to simulate an algorithm that will \
require an unforeseen amount of memory.  Perhaps more remarkably, the fact \
that each register stores an integer of unbounded size means that even with a \
finite number of registers (and thus without need for the STORE/RECALL \
mechanism) the model remains Turing-universal.  We will see why later in this \
course, using a severely restricted version of this model.\n\t2. RAM programs \
can be very fast!  For example, both Turing machines and RAM programs can \
sort lists of ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]],ExpressionUUID->
  "e1f12965-90bb-49ac-b043-28bf0364ce8d"],
 " integers, but the Turing machine will require at least ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"O", "(", 
     SuperscriptBox["N", 
      RowBox[{" ", "2"}]], ")"}], "  ", "steps", " "}], TraditionalForm]],
  ExpressionUUID->"d964d0d3-8431-4c8b-a28f-fdcdde50dc72"],
 "while a RAM program can do the job in ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"O", "(", 
     RowBox[{"N", " ", "log", " ", "N"}], ")"}], " "}], TraditionalForm]],
  ExpressionUUID->"73f09f32-b2dd-4d66-b09f-3ed6c9239f79"],
 ".  (\[OpenCurlyDoubleQuote]One step\[CloseCurlyDoubleQuote] in some model A \
may not really be comparable to \[OpenCurlyDoubleQuote]one step\
\[CloseCurlyDoubleQuote] in some model B.  For example, a RAM program can \
copy an arbitrary length integer in \[OpenCurlyDoubleQuote]one step\
\[CloseCurlyDoubleQuote] while a Turing machine requires ",
 Cell[BoxData[
  FormBox[
   RowBox[{"O", "(", 
    SuperscriptBox["n", "2"], ")"}], TraditionalForm]],ExpressionUUID->
  "d786e041-32bc-4b88-98f0-6905c5a5956f"],
 " steps, where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d39aaeab-f5e2-42c4-b9e5-f1914fe1c549"],
 " is the number of bits in the integer.  But more interesting things are \
going on also...)  See e.g. Martti Penttonen & Jyrki Katajainen, 1985)"
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
   3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
   3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.818799583712069*^9, 
   3.818800068334037*^9}, {3.818800259199347*^9, 3.818800289562599*^9}, {
   3.818800435467061*^9, 3.818800534990533*^9}, {3.818800720581793*^9, 
   3.8188007318831873`*^9}, 3.818800778779703*^9},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"1e49226a-8a60-403c-a7ba-64413080fab2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["String rewriting system", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818263922110901*^9, 3.818263928075458*^9}, {3.818296986461046*^9, 
  3.8182969908594646`*^9}},ExpressionUUID->"ea404c81-aa19-4696-a7b0-\
32f84ddd8476"],

Cell["\<\
Given a list of rules of the form \[OpenCurlyDoubleQuote]string1 --> string2\
\[CloseCurlyDoubleQuote], an initial string may be modified by replacing a \
substring matching some \
\[OpenCurlyDoubleQuote]string1\[CloseCurlyDoubleQuote] by its corresponding \
\[OpenCurlyDoubleQuote]string2\[CloseCurlyDoubleQuote], until no more such \
derivations apply.  A string rewriting system may always end up with the same \
state independent of the choice and order of rewriting rules, or it may \
permit different terminal strings to be derived.  Here, \
we\[CloseCurlyQuote]ll make a stochastic uniform choice at each step.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
  3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
  3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
  3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
  3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
  3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
  3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
  3.818297320369563*^9, 3.8182973314317703`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"82f58b79-7736-4896-9c68-624256734cf4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"digits", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<0\>\"", ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", ",", 
     "\"\<4\>\"", ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"", ",", 
     "\"\<8\>\"", ",", "\"\<9\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"sortingSRS", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToExpression", "[", "left", "]"}], ">", 
        RowBox[{"ToExpression", "[", "right", "]"}]}], ",", 
       RowBox[{
        RowBox[{"left", "<>", "right"}], "\[Rule]", 
        RowBox[{"right", "<>", "left"}]}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"left", ",", "digits"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"right", ",", "digits"}], "}"}]}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.818297334371004*^9, 3.8182973450212173`*^9}, {
  3.818297401038022*^9, 3.818297577048553*^9}},
 CellLabel->
  "In[271]:=",ExpressionUUID->"68b5909d-c7e1-46a0-a8c8-eb63eb5b93b6"],

Cell["\<\
This almost seems like cheating, since string rewriting is built in to \
Mathematica.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, {3.818297993853272*^9, 
   3.8182980167259398`*^9}, 3.818298089444078*^9},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"922bb4d4-8a1a-4da1-a238-c69941cc4cf0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"OneStepSRS", "[", 
   RowBox[{"rules_", ",", "string_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"options", "=", 
      RowBox[{"StringReplaceList", "[", 
       RowBox[{"string", ",", "rules"}], "]"}]}], "}"}], ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "options", "]"}], ">", "0"}], ",", 
      RowBox[{"RandomChoice", "[", "options", "]"}], ",", "string"}], "]"}]}],
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.818297615699389*^9, 3.818297640892376*^9}, {
  3.818297728985839*^9, 3.818297779108191*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"c4e04aa0-69e2-4753-a786-cab5a7e89ee0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPointList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"OneStepSRS", "[", 
      RowBox[{"sortingSRS", ",", "#"}], "]"}], "&"}], ",", " ", 
    "\"\<9823475674831\>\""}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.818295892348485*^9, 3.81829589531065*^9}, {
  3.818296008273988*^9, 3.818296031642624*^9}, {3.8182976601405697`*^9, 
  3.818297712994734*^9}, {3.818297797551043*^9, 3.818297798202488*^9}, {
  3.818297884745701*^9, 3.818297918927219*^9}},
 CellLabel->
  "In[288]:=",ExpressionUUID->"6acefbaa-ab4e-495f-acb7-949f27a85270"],

Cell["\<\
Here is another example, based on Emil Post\[CloseCurlyQuote]s tag systems \
with rules related to the Collatz \[OpenCurlyDoubleQuote]3n+1\
\[CloseCurlyDoubleQuote] , adapted from Liesbeth De Mol (2008).

The Collatz conjecture, still unproven, is that starting with any positive \
integer n, iterating \[OpenCurlyDoubleQuote]divide by 2 if even, else \
multiply by 3 and add 1\[CloseCurlyDoubleQuote] always reaches 1 eventually. 

The rules for the related tag system are: given a string of \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]b\
\[CloseCurlyDoubleQuote], and \
\[OpenCurlyDoubleQuote]c\[CloseCurlyDoubleQuote], 
\trepeatedly eat 2 characters from the left,  
\tappend \[OpenCurlyDoubleQuote]bc\[CloseCurlyDoubleQuote] to the right if \
the first eaten character was \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote], 
\tappend \[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] if it was \
\[OpenCurlyDoubleQuote]b\[CloseCurlyDoubleQuote], and append \
\[OpenCurlyDoubleQuote]aaa\[CloseCurlyDoubleQuote] if it was \
\[OpenCurlyDoubleQuote]c\[CloseCurlyDoubleQuote],
\tstopping if there is only 1 character left.
\t
Starting with a length-n string of all \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote], this tag system will reach the length-1 string \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] if and only if the Collatz \
sequence for n reaches 1.

The string rewriting system below implements the tag system, for strings of \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]b\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]c\[CloseCurlyDoubleQuote] \
starting and ending with \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote] (a \
space).  Because the tag system is non-local (read on the left, write on the \
right) but the string rewriting system is local, it needs a way to transmit \
information from the left of the string to the right of the string.  This is \
what the uppercase \[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]B\[CloseCurlyDoubleQuote], and \
\[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote] do.  Note that the string \
rewriting is not deterministic, but it is confluent (i.e. takes different \
routes different times, but always ends up in the same place).\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, {3.818297993853272*^9, 
   3.8182980167259398`*^9}, 3.818298089444078*^9, {3.818563999488263*^9, 
   3.818564323271913*^9}, {3.81856436718099*^9, 3.818564499576831*^9}, {
   3.819734130832075*^9, 3.819734212947733*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"99fc5c60-11fc-482e-9517-189aece49323"],

Cell[BoxData[
 RowBox[{
  RowBox[{"collatzSRS", "=", 
   RowBox[{"{", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\< aa\>\"", "\[Rule]", "\"\< A\>\""}], ",", 
     RowBox[{"\"\< ab\>\"", "\[Rule]", "\"\< A\>\""}], ",", 
     RowBox[{"\"\< ac\>\"", "\[Rule]", "\"\< A\>\""}], ",", 
     RowBox[{"\"\< ba\>\"", "\[Rule]", "\"\< B\>\""}], ",", 
     RowBox[{"\"\< bb\>\"", "\[Rule]", "\"\< B\>\""}], ",", 
     RowBox[{"\"\< bc\>\"", "\[Rule]", "\"\< B\>\""}], ",", 
     RowBox[{"\"\< ca\>\"", "\[Rule]", "\"\< C\>\""}], ",", 
     RowBox[{"\"\< cb\>\"", "\[Rule]", "\"\< C\>\""}], ",", 
     RowBox[{"\"\< cc\>\"", "\[Rule]", "\"\< C\>\""}], ",", 
     RowBox[{"(*", " ", "eat", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\"\<Aa\>\"", "\[Rule]", "\"\<aA\>\""}], ",", 
     RowBox[{"\"\<Ab\>\"", "\[Rule]", "\"\<bA\>\""}], ",", 
     RowBox[{"\"\<Ac\>\"", "\[Rule]", "\"\<cA\>\""}], ",", 
     RowBox[{"\"\<Ba\>\"", "\[Rule]", "\"\<aB\>\""}], ",", 
     RowBox[{"\"\<Bb\>\"", "\[Rule]", "\"\<bB\>\""}], ",", 
     RowBox[{"\"\<Bc\>\"", "\[Rule]", "\"\<cB\>\""}], ",", 
     RowBox[{"\"\<Ca\>\"", "\[Rule]", "\"\<aC\>\""}], ",", 
     RowBox[{"\"\<Cb\>\"", "\[Rule]", "\"\<bC\>\""}], ",", 
     RowBox[{"\"\<Cc\>\"", "\[Rule]", "\"\<cC\>\""}], ",", 
     RowBox[{"(*", " ", "signal", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\"\<A \>\"", "\[Rule]", "\"\<bc \>\""}], ",", 
     RowBox[{"\"\<B \>\"", "\[Rule]", "\"\<a \>\""}], ",", 
     RowBox[{"\"\<C \>\"", "\[Rule]", "\"\<aaa \>\""}]}], " ", 
    RowBox[{"(*", " ", "write", " ", "*)"}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.81856072036031*^9, 3.8185609722160254`*^9}, {
   3.818561003834597*^9, 3.818561010840148*^9}, {3.818561074199889*^9, 
   3.818561372397254*^9}, {3.8185615708546543`*^9, 3.81856160039508*^9}, 
   3.818561697075253*^9, {3.8185639300662813`*^9, 3.8185639697155323`*^9}, 
   3.818564135435701*^9, 3.8185642021896133`*^9, {3.818564428179028*^9, 
   3.818564429567906*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"30e5203b-9f87-4bdb-bfe1-42547c86d3e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPointList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"OneStepSRS", "[", 
      RowBox[{"collatzSRS", ",", "#"}], "]"}], "&"}], ",", " ", 
    "\"\< aaa \>\""}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.818561348035739*^9, 3.818561348794754*^9}, {
   3.818561382812557*^9, 3.818561436791192*^9}, 3.8185643298487587`*^9},
 CellLabel->"In[56]:=",ExpressionUUID->"a736da74-d452-4d36-a65e-0171672f31de"],

Cell["\<\
Any Turing machine can be simulated by a string rewriting system.   The idea \
is just to represent the state of the tape, with the head embedded, as a \
string -- then the necessary update rules are local.  Note that at any given \
time, only one string rewriting rule will be applicable, so the sequence of \
strings is just as deterministic as the Turing machine\[CloseCurlyQuote]s \
operation.

This example also illustrates the idea of a program transformation: an \
arbitrary Turing machine program is automatically transformed into a string \
rewriting system program.  (Other kinds of transformations, beyond \
translating from one model to another model, are also interesting -- e.g. \
speed optimization, robustification, size minimization, canonical form, etc.)\
\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, {3.818297993853272*^9, 
   3.8182980167259398`*^9}, 3.818298089444078*^9, {3.818561731779305*^9, 
   3.818562007595078*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"3edd7d4f-4e04-48af-81f1-a43573c28561"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "assume", " ", "TM", " ", "tape", " ", "symbols", " ", "and", 
    " ", "head", " ", "states", " ", "do", " ", "not", " ", "include", " ", 
    "\"\<,\>\"", " ", "or", " ", "\"\<-\>\"", " ", "or", " ", "\"\<<\>\"", 
    " ", "or", " ", "\"\<>\>\"", " ", "or", " ", "\"\<{\>\"", " ", "or", " ", 
    "\"\<}\>\""}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"TM2SRS", "[", 
    RowBox[{"TMrules_", ",", "TMstate_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "TMsymbols", ",", "SRSrules", ",", "SRSstring", ",", "translate"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"TMsymbols", "=", 
       RowBox[{"Union", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"First", "[", "#", "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", "TMrules"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Last", "[", "#", "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", "TMrules"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"SRSstring", "=", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"\"\<<-\>\"", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<-\>\""}], ")"}], 
           "&"}], "/@", "TMstate"}], ",", "\"\<>\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"translate", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s_", ",", "a_"}], "}"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"sp_", ",", "ap_", ",", "1"}], "}"}]}], "]"}], ":=", 
       RowBox[{"Join", "[", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"ToString", "[", 
                RowBox[{"{", 
                 RowBox[{"s", ",", "a"}], "}"}], "]"}], "<>", "\"\<-\>\"", "<>", 
               RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<-\>\""}], 
              ")"}], "\[Rule]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"ToString", "[", "ap", "]"}], "<>", "\"\<-\>\"", "<>", 
               
               RowBox[{"ToString", "[", 
                RowBox[{"{", 
                 RowBox[{"sp", ",", "#"}], "}"}], "]"}], "<>", "\"\<-\>\""}], 
              ")"}]}], ")"}], "&"}], "/@", "TMsymbols"}], " ", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"ToString", "[", 
              RowBox[{"{", 
               RowBox[{"s", ",", "a"}], "}"}], "]"}], "<>", "\"\<->\>\""}], 
            ")"}], "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"ToString", "[", "ap", "]"}], "<>", "\"\<-\>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{"{", 
               RowBox[{"sp", ",", "0"}], "}"}], "]"}], "<>", "\"\<->\>\""}], 
            ")"}]}], "}"}]}], " ", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"translate", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s_", ",", "a_"}], "}"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"sp_", ",", "ap_", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "]"}], ":=", 
       RowBox[{"Join", "[", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"\"\<-\>\"", "<>", 
               RowBox[{"ToString", "[", "#", "]"}], "<>", "\"\<-\>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{"{", 
                 RowBox[{"s", ",", "a"}], "}"}], "]"}]}], ")"}], "\[Rule]", 
             RowBox[{"(", 
              RowBox[{"\"\<-\>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{"{", 
                 RowBox[{"sp", ",", "#"}], "}"}], "]"}], "<>", "\"\<-\>\"", "<>", 
               RowBox[{"ToString", "[", "ap", "]"}]}], ")"}]}], ")"}], "&"}], 
          "/@", "TMsymbols"}], " ", ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"\"\<<-\>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{"{", 
               RowBox[{"s", ",", "a"}], "}"}], "]"}]}], ")"}], "\[Rule]", 
           RowBox[{"(", 
            RowBox[{"\"\<<-\>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{"{", 
               RowBox[{"sp", ",", "0"}], "}"}], "]"}], "<>", "\"\<-\>\"", "<>", 
             RowBox[{"ToString", "[", "ap", "]"}]}], ")"}]}], "}"}]}], " ", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"SRSrules", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"translate", "/@", "TMrules"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"SRSrules", ",", "SRSstring"}], "}"}]}]}], "]"}]}]}]], "Input",\

 CellChangeTimes->{{3.818302082525391*^9, 3.818302117921838*^9}, {
  3.818302185351184*^9, 3.818302276679118*^9}, {3.818302329188431*^9, 
  3.8183023340118427`*^9}, {3.818302408300211*^9, 3.818302559120243*^9}, {
  3.818302621795274*^9, 3.818302650162283*^9}, {3.8183026832491417`*^9, 
  3.818303047668317*^9}, {3.818303080489018*^9, 3.818303109334734*^9}, {
  3.818303167981165*^9, 3.818303176643108*^9}, {3.818303268259351*^9, 
  3.818303553751615*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"0bae2b11-afb8-4b43-b0ad-2af056530de0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"copySRS", ",", "copySRSinit"}], "}"}], "=", 
  RowBox[{"TM2SRS", "[", 
   RowBox[{"copyTM", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"q1", ",", "0"}], "}"}], ",", "1", ",", "1", ",", "B"}], 
     "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8183031117284203`*^9, 3.8183031315411663`*^9}, {
  3.8183035918395576`*^9, 3.818303615328473*^9}},
 CellLabel->
  "In[369]:=",ExpressionUUID->"5afe567d-9a16-4deb-9abc-39ea37fe9f7e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPointList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"OneStepSRS", "[", 
      RowBox[{"copySRS", ",", "#"}], "]"}], "&"}], ",", " ", "copySRSinit"}], 
   "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.818295892348485*^9, 3.81829589531065*^9}, {
  3.818296008273988*^9, 3.818296031642624*^9}, {3.8182976601405697`*^9, 
  3.818297712994734*^9}, {3.818297797551043*^9, 3.818297798202488*^9}, {
  3.818297884745701*^9, 3.818297918927219*^9}, {3.818303636160163*^9, 
  3.818303643134212*^9}},
 CellLabel->
  "In[370]:=",ExpressionUUID->"fa8b811a-9fca-4996-96b1-09f8b9a01945"],

Cell[TextData[{
 "Fun facts:  \n\t1. String rewriting systems can be classified according to \
the types of rules they use, which has consequences on the set of strings \
reachable (by some order of application of rewriting rules) from a designated \
initial string.  Noam Chomsky (and others) classified the relationship \
between the form of the rules and the properties of the reachable sets as \
part of his study of linguistics (where sets of rewriting rules are called \
grammars and the reachable strings are called a \
\[OpenCurlyDoubleQuote]language\[CloseCurlyDoubleQuote]).   This theory \
develops the \[OpenCurlyDoubleQuote]Chomsky hierarchy\[CloseCurlyDoubleQuote] \
of languages.\n\t2. An L-system, invented by Aristid Lindenmayer to study \
plant growth and named in his honor, restricts rules to replace just a single \
character by a string (but possibly with surrounding context that remains \
untouched) but then allows for simultaneous synchronous application of the \
rules everywhere.   In just T synchronous parallel updates, a string of size \
1 can grow to size ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "T"], TraditionalForm]],ExpressionUUID->
  "beb09c48-c030-4c91-8d1e-a0333f664838"],
 ".   See his beautiful book \[OpenCurlyDoubleQuote]The Algorithmic Beauty of \
Plants\[CloseCurlyDoubleQuote] (1990) with Przemys\[LSlash]aw Prusinkiewicz."
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
   3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
   3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.818799583712069*^9, 
   3.818800068334037*^9}, {3.818800259199347*^9, 3.818800289562599*^9}, {
   3.818800435467061*^9, 3.818800534990533*^9}, {3.818800720581793*^9, 
   3.8188007318831873`*^9}, 3.818800778779703*^9, {3.8188008197557297`*^9, 
   3.8188009472894487`*^9}, {3.8188009885738688`*^9, 3.81880109855894*^9}, 
   3.818801132196699*^9, {3.818801193500161*^9, 3.8188012225570993`*^9}, {
   3.818801278416477*^9, 3.81880132884266*^9}, {3.818801375822434*^9, 
   3.818801381336132*^9}, {3.8188014186546907`*^9, 3.8188015520840387`*^9}, {
   3.818801582424788*^9, 3.818801601212912*^9}, {3.81880165380573*^9, 
   3.8188016558021183`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"3ed13573-237b-4409-a7a0-89c58fbe40b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cellular automata", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818263922110901*^9, 3.818263928075458*^9}, {3.818296986461046*^9, 
  3.8182969908594646`*^9}, {3.818298062333235*^9, 
  3.818298065052231*^9}},ExpressionUUID->"f3059770-15d5-4ae7-b46b-\
25be227bb3a9"],

Cell["\<\
Cellular automata are often described as a discrete-time, discrete-space, \
discrete-state \[OpenCurlyDoubleQuote]pseudo-physics\[CloseCurlyDoubleQuote] \
with local rules.  We will consider a two-dimensional lattice cellular \
automata with \[OpenCurlyDoubleQuote]radius 1\[CloseCurlyDoubleQuote] \
interactions -- i.e. each cell has 8 neighbors, sometimes called the Moore \
neighborhood.   As in Turing machines, an infinite constant background state \
is the most common variation.  Here, we will consider a more limited case: a \
finite cellular array with periodic (i.e. wrap-around) boundary conditions.

A cellular automaton rule f[3x3 matrix] specifies the next state based on a \
cell\[CloseCurlyQuote]s current state and the states of its neighbors.

Like Turing machines, Mathematica contains built-in functions for simulating \
a wide variety of cellular automata -- and again, we won\[CloseCurlyQuote]t \
use them, in favor of seeing how the simulator for a \
\[OpenCurlyDoubleQuote]new\[CloseCurlyDoubleQuote] model of computation can \
be constructed from scratch.  Well, using \[OpenCurlyDoubleQuote]BlockMap\
\[CloseCurlyDoubleQuote] might still seem like cheating... \
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818566945675486*^9, 3.8185669545508623`*^9}, {3.818649166480815*^9, 
   3.818649233129408*^9}, {3.818649266946247*^9, 3.818649276380548*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"1ef53310-ed89-49b1-9f67-1e371228a0c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"OneStepCA", "[", 
   RowBox[{"f_", ",", "cells_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"N", "=", 
       RowBox[{"Length", "[", "cells", "]"}]}], ",", 
      RowBox[{"M", "=", 
       RowBox[{"Length", "[", 
        RowBox[{"First", "[", "cells", "]"}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"BlockMap", "[", 
     RowBox[{"f", ",", 
      RowBox[{"cells", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"-", "1"}], "}"}], "~", "Join", "~", 
          RowBox[{"Range", "[", 
           RowBox[{"1", ",", "N"}], "]"}], "~", "Join", "~", 
          RowBox[{"{", "1", "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"-", "1"}], "}"}], "~", "Join", "~", 
          RowBox[{"Range", "[", 
           RowBox[{"1", ",", "M"}], "]"}], "~", "Join", "~", 
          RowBox[{"{", "1", "}"}]}]}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.818299274088072*^9, 3.8182992805501747`*^9}, {
   3.818299373632586*^9, 3.81829961318675*^9}, 3.818300378323126*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"47d63260-2b78-4f00-b4d2-bf3e915671a2"],

Cell["\<\
This CA imagines a forest fire spreading: A = active fire, R = refractory \
burnt wood, Q = quiescent grown trees, ready to burn.   \
(It\[CloseCurlyQuote]s a good habit to delete the output of Dynamic[ ] when \
you no longer need it.  That\[CloseCurlyQuote]s how you stop self-updating \
Dynamic[ ] statements.)  Originally designed by Greenberg and Hastings to \
model spatial chemical reactions of excitable media.  Note that you\
\[CloseCurlyQuote]ll have to command-. to abort the last example.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818300485467001*^9, 3.8183005610711117`*^9}, {3.818300823212785*^9, 
   3.8183008437796926`*^9}, {3.8183012119808683`*^9, 3.818301224975851*^9}, {
   3.818352660650444*^9, 3.81835268419553*^9}, {3.818564763141799*^9, 
   3.8185647880197353`*^9}, {3.818793416098061*^9, 3.818793440692634*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"daad54e2-6054-45c5-a3ae-f480527461e3"],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{"A", ",", "Q", ",", "R", ",", "firecA"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fireCA", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"_", ",", "n_", ",", "_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"w_", ",", "c_", ",", "e_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"_", ",", "s_", ",", "_"}], "}"}]}], "}"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"c", "===", "R"}], ",", "Q", ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"c", "===", "A"}], ",", "R", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", ",", "e", ",", "s", ",", "w"}], "}"}], ",", "A"}], 
         "]"}], ",", "A", ",", "Q"}], "]"}]}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.818299638276514*^9, 3.818299673802335*^9}, {
  3.818299708588251*^9, 3.8182998216192207`*^9}, {3.818299986851623*^9, 
  3.81829999158741*^9}, {3.8183001515481443`*^9, 3.818300161679348*^9}, {
  3.818300340876532*^9, 3.818300366655468*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"ec6a72f1-1b4e-4e39-936b-232604e17cd8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"firefield", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Q", ",", "50", ",", "50"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"firefield", "[", 
    RowBox[{"[", 
     RowBox[{"25", ",", "25"}], "]"}], "]"}], "=", "A"}], ";"}]], "Input",
 CellChangeTimes->{{3.818299410368116*^9, 3.81829942080842*^9}, {
  3.818299630398923*^9, 3.818299632473756*^9}, {3.818299833459682*^9, 
  3.8182998832188473`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"d5ade7e3-f1d7-4156-87b1-5de2a87b629d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Warning", ":", " ", 
    RowBox[{
    "Mathematica", " ", "continually", " ", "tries", " ", "to", " ", "update",
      " ", "all", " ", "Dynamic", " ", 
     RowBox[{"output", ".", "  ", "Best"}], " ", "to", " ", "delete", " ", 
     "this", " ", "output", " ", "after", " ", 
     RowBox[{"you", "'"}], "re", " ", "done", " ", "with", " ", 
     RowBox[{"it", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Dynamic", "[", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{"firefield", ",", 
     RowBox[{"ColorRules", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "Red"}], ",", 
        RowBox[{"Q", "\[Rule]", "White"}], ",", 
        RowBox[{"R", "\[Rule]", "Blue"}]}], "}"}]}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.81829911763869*^9, 3.8182991487788982`*^9}, {
  3.818299893133119*^9, 3.818299934968923*^9}, {3.850424491801736*^9, 
  3.850424535681253*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"f6f8684d-8e38-4a82-8de4-b79806415ef0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPoint", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"firefield", "=", 
       RowBox[{"OneStepCA", "[", 
        RowBox[{"fireCA", ",", "#"}], "]"}]}], ")"}], "&"}], ",", 
    "firefield"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.818299958125491*^9, 3.818299971291696*^9}, {
  3.818300187791809*^9, 3.818300293383789*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"9232da6c-5de2-4a4d-adae-c0aea24333bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"firefield", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Q", ",", "100", ",", "100"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"firefield", "[", 
    RowBox[{"[", 
     RowBox[{"50", ",", 
      RowBox[{"25", ";;", "75"}]}], "]"}], "]"}], "=", "A"}], ";", 
  RowBox[{
   RowBox[{"firefield", "[", 
    RowBox[{"[", 
     RowBox[{"51", ",", 
      RowBox[{"25", ";;", "75"}]}], "]"}], "]"}], "=", "R"}], ";"}]], "Input",\

 CellChangeTimes->{{3.818299410368116*^9, 3.81829942080842*^9}, {
  3.818299630398923*^9, 3.818299632473756*^9}, {3.818299833459682*^9, 
  3.8182998832188473`*^9}, {3.818300591844099*^9, 3.8183006353096943`*^9}, {
  3.818300707937192*^9, 3.8183007291811047`*^9}, {3.8183007723260593`*^9, 
  3.818300797098421*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"fd35ae85-13de-4790-9e69-907fade4c93d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPoint", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"firefield", "=", 
       RowBox[{"OneStepCA", "[", 
        RowBox[{"fireCA", ",", "#"}], "]"}]}], ")"}], "&"}], ",", 
    "firefield"}], "]"}], ";"}]], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"77dc2ceb-ce6a-4a64-8e86-2ed568601d6b"],

Cell["\<\
This is the classical \[OpenCurlyDoubleQuote]Game of Life\
\[CloseCurlyDoubleQuote] by John Conway.  A dead site becomes live with 3 \
live neighbors; a live site stays alive with 2 or 3 live neighbors; otherwise \
it will be dead.  It is common knowledge that ornate layouts in the Game of \
Life can use gliders to send signals, perform logic gates, and simulate \
Boolean circuits, Turing machines, and even Life itself.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818300485467001*^9, 3.8183005610711117`*^9}, {3.818300823212785*^9, 
   3.8183008437796926`*^9}, {3.8183012119808683`*^9, 3.818301224975851*^9}, {
   3.818301618514381*^9, 3.8183016250605097`*^9}, {3.81835263904881*^9, 
   3.818352642729673*^9}, {3.8185646380689907`*^9, 3.8185646962258787`*^9}, {
   3.818649310912467*^9, 3.8186493659294767`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"436d439a-4f5d-4534-87a9-93506a7ad229"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lifeCA", "[", "m_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"self", "=", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ",", 
      RowBox[{"count", "=", 
       RowBox[{
        RowBox[{"Total", "[", 
         RowBox[{"Flatten", "[", "m", "]"}], "]"}], "-", 
        RowBox[{"m", "[", 
         RowBox[{"[", 
          RowBox[{"2", ",", "2"}], "]"}], "]"}]}]}]}], "}"}], ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"count", "\[Equal]", "3"}], " ", "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"count", "\[Equal]", "2"}], "&&", 
         RowBox[{"self", "\[Equal]", "1"}]}], ")"}]}], ",", "1", ",", "0"}], 
     "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.818299638276514*^9, 3.818299673802335*^9}, {
  3.818299708588251*^9, 3.8182998216192207`*^9}, {3.818299986851623*^9, 
  3.81829999158741*^9}, {3.8183001515481443`*^9, 3.818300161679348*^9}, {
  3.818300340876532*^9, 3.818300366655468*^9}, {3.818300865796577*^9, 
  3.818300971583715*^9}, {3.8183010135199223`*^9, 3.818301039529832*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"1a8f75a0-a25c-4249-85de-0fed68f91c4c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lifefield", "=", 
   RowBox[{"RandomChoice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "100"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.818301048054997*^9, 3.818301071605764*^9}, {
  3.818301188400276*^9, 3.8183011902659407`*^9}, {3.8183016030605927`*^9, 
  3.818301604831893*^9}},
 CellLabel->
  "In[235]:=",ExpressionUUID->"3e87779c-4076-4667-af0b-4f5d156256fe"],

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{
   RowBox[{"lifefield", "=", 
    RowBox[{"OneStepCA", "[", 
     RowBox[{"lifeCA", ",", "lifefield"}], "]"}]}], ";", 
   RowBox[{"ArrayPlot", "[", "lifefield", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.818301082168516*^9, 3.8183010859919777`*^9}, {
  3.8183011415353928`*^9, 3.818301146424247*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"ed0c67ec-2546-40a7-945d-34ff856da7c0"],

Cell["\<\
This is the classical \[OpenCurlyDoubleQuote]Wire World\
\[CloseCurlyDoubleQuote] by Brian Silverman.  0 = empty, H = signal head, T = \
signal tail, W = wire.   See Wikipedia; this circuit below has two memory \
loops and an XOR gate.  Also see Scientific American (A K Dewdney, 1990, \
JSTOR) which shows an OR gate and a memory cell.  Can you design AND and NOT? \
 Layout a ripple-carry adder?\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818300485467001*^9, 3.8183005610711117`*^9}, {3.818300823212785*^9, 
   3.8183008437796926`*^9}, {3.8183012119808683`*^9, 3.818301224975851*^9}, {
   3.818301618514381*^9, 3.8183016250605097`*^9}, {3.81835263904881*^9, 
   3.818352642729673*^9}, {3.8185620818791656`*^9, 3.8185621045468073`*^9}, {
   3.818562177146131*^9, 3.818562195123451*^9}, {3.818563004219139*^9, 
   3.818563009891281*^9}, {3.818563204661067*^9, 3.8185632124310503`*^9}, {
   3.818563812843399*^9, 3.818563885531258*^9}, {3.818564580790429*^9, 
   3.818564585506751*^9}, {3.825510496848317*^9, 3.8255105000869093`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"beedadf8-698d-4baf-a35e-cb7cd59a3e16"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"H", ",", "T", ",", "W", ",", "wireCA"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"wireCA", "[", "m_", "]"}], ":=", " ", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"self", "=", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", "2"}], "]"}], "]"}]}], ",", 
      RowBox[{"count", "=", 
       RowBox[{"Count", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", "m", "]"}], ",", "H"}], "]"}]}]}], "}"}], 
    ",", " ", 
    RowBox[{"self", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"0", "\[Rule]", "0"}], ",", 
       RowBox[{"T", "\[Rule]", "W"}], ",", 
       RowBox[{"H", "\[Rule]", "T"}], ",", 
       RowBox[{"W", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"count", "\[Equal]", "1"}], "||", 
           RowBox[{"count", "\[Equal]", "2"}]}], ",", "H", ",", "W"}], 
         "]"}]}]}], "}"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.818562108228231*^9, 3.8185621195970707`*^9}, {
  3.818562210341297*^9, 3.818562238504891*^9}, {3.818562391609354*^9, 
  3.818562537481276*^9}, {3.8185634913161488`*^9, 3.818563491848084*^9}, {
  3.818564802502927*^9, 3.818564815292947*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"7e9f9605-6164-4130-99a2-94040a3cc8ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"circuitboard", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "W", ",", "W", ",", "W", ",", "W", ",", "W", ",", 
       "T", ",", "H", ",", "W", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "W", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "W", ",", "W", ",", "W", ",", "W", ",", 
       "W", ",", "W", ",", "W", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "W", ",", "H", ",", "T", ",", "W", ",", "W", ",", 
       "W", ",", "W", ",", "W", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "W", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "W", ",", "W", ",", "W", ",", "W", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "W", ",", "0", ",", "0", ",", "W", ",", "W", ",", 
       "W", ",", "W", ",", "W", ",", "W", ",", "W", ",", "W"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "W", ",", "W", ",", "W", ",", "W", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "W", ",", "H", ",", "T", ",", "W", ",", "W", ",", 
       "W", ",", "W", ",", "W", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "W", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "W", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "W", ",", "W", ",", "W", ",", "W", ",", 
       "W", ",", "W", ",", "W", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "W", ",", "W", ",", "W", ",", "W", ",", "W", ",", 
       "W", ",", "W", ",", "W", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8185631183124723`*^9, 3.818563330466827*^9}, 
   3.818563408331356*^9, {3.818563754336606*^9, 3.818563756691304*^9}, {
   3.81856722571684*^9, 3.8185672372946444`*^9}, {3.818567278979163*^9, 
   3.81856730156094*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"6c6c770e-32af-46f4-a4da-c9f1c528c077"],

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{
   RowBox[{"Pause", "[", "0.5", "]"}], ";", 
   RowBox[{"circuitboard", "=", 
    RowBox[{"OneStepCA", "[", 
     RowBox[{"wireCA", ",", "circuitboard"}], "]"}]}], ";", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{"circuitboard", ",", 
     RowBox[{"ColorRules", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"0", "\[Rule]", "Black"}], ",", 
        RowBox[{"H", "\[Rule]", "Blue"}], ",", 
        RowBox[{"T", "\[Rule]", "Red"}], ",", 
        RowBox[{"W", "\[Rule]", "Yellow"}]}], "}"}]}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.818562275728189*^9, 3.818562276131899*^9}, {
  3.818562806612794*^9, 3.818562885624221*^9}, {3.818567368872892*^9, 
  3.818567373571596*^9}, {3.8185674587531967`*^9, 3.818567459984679*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"90fc29e6-7fa7-4552-8987-cb6011a58705"],

Cell["\<\
To test Mathematica\[CloseCurlyQuote]s compiler, we\[CloseCurlyQuote]ll \
hard-code a Game-of-Life simulator.  Note that not all Mathematica functions \
compile equally efficiently, so one often needs to write code in a different \
way if you are interested in speed.  Should be about 10x faster.  Adding an \
option to the Compile statement, CompilationTarget -> \
\[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote], will compile to even faster \
code if you don\[CloseCurlyQuote]t have a C compiler installed and accessible \
to Mathematica; this should be about 15x faster than non-compiled code.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818300485467001*^9, 3.8183005610711117`*^9}, {3.818300823212785*^9, 
   3.8183008437796926`*^9}, {3.8183012119808683`*^9, 3.818301224975851*^9}, {
   3.818301618514381*^9, 3.8183016250605097`*^9}, {3.81835263904881*^9, 
   3.818352642729673*^9}, {3.8185620818791656`*^9, 3.8185621045468073`*^9}, {
   3.818562177146131*^9, 3.818562195123451*^9}, {3.818563004219139*^9, 
   3.818563009891281*^9}, {3.818563204661067*^9, 3.8185632124310503`*^9}, {
   3.818563812843399*^9, 3.818563885531258*^9}, {3.818564580790429*^9, 
   3.818564585506751*^9}, {3.818787689538315*^9, 3.81878769708327*^9}, {
   3.818787865397396*^9, 3.8187879169450617`*^9}, {3.818788943105013*^9, 
   3.818788954074922*^9}, {3.818789026848236*^9, 3.8187890485572567`*^9}, {
   3.81878915947646*^9, 3.818789180300919*^9}, 3.81878929637096*^9, {
   3.818789335749249*^9, 3.818789345382142*^9}, {3.818789408692265*^9, 
   3.818789449348843*^9}, {3.825510526569664*^9, 3.82551053429838*^9}, {
   3.850471757504548*^9, 3.850471789399514*^9}, {3.850471821726882*^9, 
   3.8504718384312363`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"faf65560-6c49-4983-bbd4-7ab8174fd2a5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastGoL", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"cells", ",", "_Integer", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"steps", ",", "_Integer"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"height", "=", 
          RowBox[{"Length", "[", "cells", "]"}]}], ",", 
         RowBox[{"width", "=", 
          RowBox[{"Length", "[", 
           RowBox[{"First", "[", "cells", "]"}], "]"}]}], ",", "self", ",", 
         "count"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"self", "=", 
           RowBox[{"cells", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "j"}], "]"}], "]"}]}], ";", 
          RowBox[{"count", "=", 
           RowBox[{"-", "self"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"count", "+=", 
             RowBox[{"cells", "[", 
              RowBox[{"[", 
               RowBox[{"di", ",", "dj"}], "]"}], "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"di", ",", 
              RowBox[{"Max", "[", 
               RowBox[{"1", ",", 
                RowBox[{"i", "-", "1"}]}], "]"}], ",", 
              RowBox[{"Min", "[", 
               RowBox[{"height", ",", 
                RowBox[{"i", "+", "1"}]}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"dj", ",", 
              RowBox[{"Max", "[", 
               RowBox[{"1", ",", 
                RowBox[{"j", "-", "1"}]}], "]"}], ",", 
              RowBox[{"Min", "[", 
               RowBox[{"width", ",", 
                RowBox[{"j", "+", "1"}]}], "]"}]}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"count", "\[Equal]", "3"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"count", "\[Equal]", "2"}], "&&", 
               RowBox[{"self", "\[Equal]", "1"}]}], ")"}]}], ",", "1", ",", 
            "0"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "height"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", "width"}], "}"}]}], "]"}]}], "]"}]}], 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{",", " ", 
      RowBox[{"CompilationTarget", "->", " ", "\"\<C\>\""}]}], " ", "*)"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8187877583240423`*^9, 3.818787817076545*^9}, {
   3.8187880363223257`*^9, 3.818788037029162*^9}, {3.818788110820342*^9, 
   3.8187881573201036`*^9}, {3.818788209153014*^9, 3.818788476613604*^9}, {
   3.818788524678544*^9, 3.8187885495909443`*^9}, {3.8187887462253113`*^9, 
   3.818788748294806*^9}, {3.8187889221646338`*^9, 3.818788938959956*^9}, 
   3.85047174712899*^9, {3.850471796726261*^9, 3.850471814451954*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"7af0d414-ddc2-4997-8959-c1bc0fb2f6cf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"lifefield", "=", 
   RowBox[{"RandomChoice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"500", ",", "500"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"AbsoluteTiming", "[", 
    RowBox[{
     RowBox[{"OneStepCA", "[", 
      RowBox[{"lifeCA", ",", "lifefield"}], "]"}], ";"}], "]"}], ",", 
   RowBox[{"AbsoluteTiming", "[", 
    RowBox[{
     RowBox[{"fastGoL", "[", 
      RowBox[{"lifefield", ",", "1"}], "]"}], ";"}], "]"}]}], "}"}]}], "Input",\

 CellChangeTimes->{{3.818788645596574*^9, 3.8187886762345953`*^9}, {
  3.818788716130287*^9, 3.818788718303063*^9}, {3.818788791785037*^9, 
  3.818788795394412*^9}, {3.818788856307921*^9, 3.818788902755547*^9}},
 CellLabel->
  "In[233]:=",ExpressionUUID->"d458afbc-d6ce-4d05-98ab-d3a90046f421"],

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{
   RowBox[{"lifefield", "=", 
    RowBox[{"OneStepCA", "[", 
     RowBox[{"lifeCA", ",", "lifefield"}], "]"}]}], ";", 
   RowBox[{"ArrayPlot", "[", "lifefield", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[236]:=",ExpressionUUID->"119ffe52-5248-49b6-adef-5c7428bf0f7f"],

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{
   RowBox[{"lifefield", "=", 
    RowBox[{"fastGoL", "[", 
     RowBox[{"lifefield", ",", "1"}], "]"}]}], ";", 
   RowBox[{"ArrayPlot", "[", "lifefield", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.818788609816584*^9, 3.818788611947192*^9}, {
  3.818788705569993*^9, 3.818788705637239*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"60e3c376-f856-4fd3-a316-d3206801fd71"],

Cell["\<\
Fun facts:  
\t1. Following suggestions by Stan Ulam, John von Neumann used cellular \
automata to study the logical foundations of biological self-replication.  He \
generalized the idea of universal computation by a Turing machine (or other \
model) to the idea of universal construction (especially in the context of \
cellular automata.  (Theory of Self-Reproducing Automata, 1966, Arthur W Burks)
\t2. Stephen Wolfram popularized cellular automata from the perspective of \
statistical physics, and was especially interested in the behavior of \
\[OpenCurlyDoubleQuote]randomly chosen\[CloseCurlyDoubleQuote] cellular \
automata rules.  What do they typically do?  Are they typically universal or \
rarely universal?  He has also asked this hard-to-precisely-define question \
about other simple models of computation. (Statistical Mechanics of Cellular \
Automata, 1983; A New Kind of Science, 2002)\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
   3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
   3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.818799583712069*^9, 
   3.818800068334037*^9}, {3.818800259199347*^9, 3.818800289562599*^9}, {
   3.818800435467061*^9, 3.818800534990533*^9}, {3.818800720581793*^9, 
   3.8188007318831873`*^9}, 3.818800778779703*^9, {3.8188008197557297`*^9, 
   3.8188009472894487`*^9}, {3.8188009885738688`*^9, 3.81880109855894*^9}, 
   3.818801132196699*^9, {3.818801193500161*^9, 3.8188012225570993`*^9}, {
   3.818801278416477*^9, 3.81880132884266*^9}, {3.818801375822434*^9, 
   3.818801381336132*^9}, {3.8188014186546907`*^9, 3.8188015520840387`*^9}, {
   3.818801582424788*^9, 3.818801601212912*^9}, {3.81880165380573*^9, 
   3.8188016558021183`*^9}, {3.818801701529986*^9, 3.81880171744663*^9}, {
   3.818801768747162*^9, 3.818801851616778*^9}, {3.818801881867337*^9, 
   3.8188020303936462`*^9}, {3.825510620989066*^9, 3.8255106493468533`*^9}, {
   3.825510713438118*^9, 3.8255107319893103`*^9}, {3.825510820270734*^9, 
   3.825510828326778*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"0459b062-e406-4efa-a79d-f3709d3464d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph Automata and Pointer Machines", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818263922110901*^9, 3.818263928075458*^9}, {3.818296986461046*^9, 
  3.8182969908594646`*^9}, {3.818298062333235*^9, 3.818298065052231*^9}, {
  3.8183051291102753`*^9, 3.81830512947314*^9}, {3.8186169749388437`*^9, 
  3.81861698028465*^9}},ExpressionUUID->"96c30bda-91f1-4a49-a2af-\
acf92079d964"],

Cell["\<\
WARNING : This model and the one further below, both based on reconfigurable \
graphs as the underlying data structure,  are not well tested, so there is a \
particularly high chance of bugs.  The models are especially interesting \
though, because their have self-modifying topology, which has deep \
implications for computational efficiency.  So I encourage you to try them \
out (and report back to me with bugs.)\
\>", "Text",
 CellChangeTimes->{{3.850470763902389*^9, 3.850470887753923*^9}, {
  3.850471200405642*^9, 3.850471201477104*^9}},
 Background->RGBColor[
  1, 0.925, 0.925],ExpressionUUID->"c0692fc7-9b94-44c2-831b-168f9e3adf9a"],

Cell[TextData[{
 "There are a great variety of graph rewriting automata: directed, \
undirected, synchronous, asynchronous, deterministic, non-deterministic, \
colored, uncolored, local, parallel, etc.  Analogous to string rewriting, a \
central concept is to have a set of rules that allow a subgraph to be \
rewritten as another subgraph.  Here, we will take a very simple approach \
based roughly on Cook & Dymond\[CloseCurlyQuote]s \
\[OpenCurlyDoubleQuote]Parallel Pointer Machine\[CloseCurlyDoubleQuote] \
(1993), but our version will be asynchronous rather than synchronous, among \
other differences.  (For comparison, c.f. a restricted model based on graph \
rewriting automata: \[OpenCurlyDoubleQuote]Asynchronous Graph-Rewriting \
Automata and Simulation of Synchronous Execution\[CloseCurlyDoubleQuote], \
Tomita, Murata, & Kurokawa, 2007.)  In our model, nodes will be colored, \
there will be one directed edge (pointer) of each color out of each node, and \
the asynchronous update rules will allow change along an edge with matching \
colors: the nodes at either end of the edge change colors, and the source \
node may redirect some pointer by following a few pointers or by creating a \
new node.  More specifically, a rule of the form\n\t{ nodecolor1, edgecolor, \
nodecolor2} \[RightArrow] { {newnodecolor1, newnodecolor2}, newedgecolor, \
{pointer path list} }\ncan be invoked whenever the \
\[OpenCurlyDoubleQuote]edgecolor\[CloseCurlyDoubleQuote] pointer of a \
\[OpenCurlyDoubleQuote]nodecolor1\[CloseCurlyDoubleQuote]-colored node \
(henceforth \[OpenCurlyDoubleQuote]the first node\[CloseCurlyDoubleQuote]) \
points to a second node of color \[OpenCurlyDoubleQuote]nodecolor2\
\[CloseCurlyDoubleQuote] -- and in that case, the two nodes change to their \
respective specified new colors, while the first node\[CloseCurlyQuote]s \
\[OpenCurlyDoubleQuote]newedgecolor\[CloseCurlyDoubleQuote]-colored edge \
(which often will be \
\[OpenCurlyDoubleQuote]edgecolor\[CloseCurlyDoubleQuote]) gets redirected to \
follow a series of edges.  For example, if \
\[OpenCurlyDoubleQuote]newedgecolor\[CloseCurlyDoubleQuote] is Green, and the \
pointer path list is {Blue, Black, Green} then the Green edge will be changed \
to point to the node reached by following the Blue edge from the first node, \
then the Black edge from the there, and the Green edge from there.  If the \
pointer path list is empty, the specified edge is pointed back the first \
node.  Thus, the topology of the graph changes.\n\nThere are variations of \
this rule for matching the case where the \[OpenCurlyDoubleQuote]edgecolor\
\[CloseCurlyDoubleQuote] edge is a loop pointing back to the same node, and \
for the case where instead of a pointer path list, the creation of a new node \
is requested via NEW[newnodecolor,returnedgecolor].   In this case, the \
\[OpenCurlyDoubleQuote]newedgecolor\[CloseCurlyDoubleQuote] edge of the first \
node is pointed to a new node; the new node is given the specified color and \
all of its edges are self-loops except for the \
\[OpenCurlyDoubleQuote]returnedgecolor\[CloseCurlyDoubleQuote]-colored edge, \
which will point back to the first node.  Since a node can only actively \
update itself in a meaningful way if it has pointers directed toward the rest \
of the graph, this return edge is important.  Nodes that \
can\[CloseCurlyQuote]t \[OpenCurlyDoubleQuote]see\[CloseCurlyDoubleQuote] the \
rest of the graph might still be useful for passive information storage, as \
they can be manipulated by active nodes elsewhere that have pointers ",
 StyleBox["to",
  FontSlant->"Italic"],
 " them.\n\n\[OpenCurlyDoubleQuote]Colors\[CloseCurlyDoubleQuote] are \
actually coded as arbitrary symbols representing state information; a \
separate colormap must be used to display the state of the machine in a \
pleasing way.\n\nWe\[CloseCurlyQuote]ll illustrate this with a program that, \
started with an initial graph containing N \[OpenCurlyDoubleQuote]number\
\[CloseCurlyDoubleQuote] nodes and one \[OpenCurlyDoubleQuote]start\
\[CloseCurlyDoubleQuote] node, will grow a depth-N binary tree."
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818305134529746*^9, 3.818305147423658*^9}, {3.818307567804254*^9, 
   3.818307676573565*^9}, {3.818307740241137*^9, 3.818307819315854*^9}, {
   3.8183079231923943`*^9, 3.81830799147547*^9}, {3.81830893769153*^9, 
   3.8183089458357058`*^9}, {3.8183091296764383`*^9, 3.818309209252121*^9}, {
   3.818351680426167*^9, 3.8183516874744787`*^9}, {3.8183519024688883`*^9, 
   3.818352032250989*^9}, {3.81835234927787*^9, 3.818352350243361*^9}, {
   3.8183534257346478`*^9, 3.8183534311061897`*^9}, {3.8183583857632427`*^9, 
   3.818358494393435*^9}, {3.818358574484343*^9, 3.818358578510365*^9}, {
   3.818359945276209*^9, 3.818359996843343*^9}, {3.818360105001196*^9, 
   3.8183601383465357`*^9}, {3.818360169884609*^9, 3.818360189417449*^9}, {
   3.818360284842045*^9, 3.818360285702683*^9}, {3.818360316037449*^9, 
   3.81836034294521*^9}, {3.818362146544087*^9, 3.818362166232604*^9}, {
   3.8183622057208138`*^9, 3.81836228753976*^9}, {3.8183623384626417`*^9, 
   3.818362434521678*^9}, {3.8183629771546907`*^9, 3.81836300569256*^9}, {
   3.8183632533663197`*^9, 3.8183632646646957`*^9}, {3.818363331472968*^9, 
   3.818363332027052*^9}, {3.8183635386417933`*^9, 3.818363562131133*^9}, 
   3.8183636151787853`*^9, {3.818366737472538*^9, 3.818366793513412*^9}, {
   3.818368581530444*^9, 3.8183686779704113`*^9}, {3.8183697088795958`*^9, 
   3.8183697511678963`*^9}, {3.818377573904648*^9, 3.818377574047463*^9}, {
   3.818379707600155*^9, 3.818379736616724*^9}, {3.81837982020041*^9, 
   3.8183798635971317`*^9}, {3.8185710961912193`*^9, 3.818571208084281*^9}, {
   3.818617042972032*^9, 3.8186170602958813`*^9}, {3.818617104642373*^9, 
   3.818617159115058*^9}, {3.818617251374486*^9, 3.818617391151514*^9}, {
   3.818617987979919*^9, 3.818618042691098*^9}, {3.818618079217152*^9, 
   3.818618128996591*^9}, {3.818618197804027*^9, 3.818618238250071*^9}, {
   3.818618391787616*^9, 3.8186183994380293`*^9}, {3.818618473115622*^9, 
   3.818618503989147*^9}, {3.818618546698607*^9, 3.818618594075626*^9}, {
   3.8186187076042423`*^9, 3.81861878120472*^9}, {3.818619777457796*^9, 
   3.818619849189004*^9}, {3.818620583589254*^9, 3.8186206805874367`*^9}, {
   3.818621135854007*^9, 3.8186211510073423`*^9}, 3.8186217605285683`*^9, {
   3.818737145559057*^9, 3.81873714583644*^9}, {3.818737177641439*^9, 
   3.818737187112365*^9}, {3.818737631339879*^9, 3.818737976900318*^9}, {
   3.8187381081424627`*^9, 3.818738488469624*^9}, {3.818738558359659*^9, 
   3.818738919414091*^9}, {3.818738954046771*^9, 3.8187390011768827`*^9}, {
   3.8188026371746483`*^9, 3.818802640400152*^9}, {3.825511312282216*^9, 
   3.8255113300049343`*^9}, {3.825512476703609*^9, 3.825512589019717*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"f2993662-88d3-4f6f-bbdf-8b734978beeb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{
   "start", ",", "wait", ",", "growleft", ",", "growright", ",", "number", 
    ",", "used", ",", "discard"}], "]"}], 
  RowBox[{"(*", " ", 
   RowBox[{"node", " ", "states"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"input", ",", "left", ",", "right"}], "]"}], 
  RowBox[{"(*", " ", 
   RowBox[{"edge", " ", "colors"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"growtreePPM", "=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"start", ",", "input", ",", "number"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"wait", ",", "used"}], "}"}], ",", "input", ",", 
        RowBox[{"{", "input", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"wait", ",", "input", ",", "used"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"growleft", ",", "discard"}], "}"}], ",", "input", ",", 
        RowBox[{"{", 
         RowBox[{"input", ",", "input"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"wait", ",", "input", ",", "discard"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"halt", ",", "discard"}], "}"}], ",", "input", ",", 
        RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"discard", ",", "input", ",", "number"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"discard", ",", "used"}], "}"}], ",", "input", ",", 
        RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"growleft", ",", "left", ",", "SELF"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"growright", ",", "SELF"}], "}"}], ",", "left", ",", 
        RowBox[{"NEW", "[", 
         RowBox[{"wait", ",", "input"}], "]"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"growleft", ",", "left", ",", "wait"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"growright", ",", "growleft"}], "}"}], ",", "left", ",", 
        RowBox[{"{", "left", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"growright", ",", "right", ",", "SELF"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"wait", ",", "SELF"}], "}"}], ",", "right", ",", 
        RowBox[{"NEW", "[", 
         RowBox[{"wait", ",", "input"}], "]"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"growright", ",", "right", ",", "wait"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"wait", ",", "growleft"}], "}"}], ",", "right", ",", 
        RowBox[{"{", "right", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"NodeColors", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"start", "\[Rule]", "White"}], ",", 
        RowBox[{"wait", "\[Rule]", "Brown"}], ",", 
        RowBox[{"growleft", "\[Rule]", "Green"}], ",", 
        RowBox[{"growright", "\[Rule]", "Red"}], ",", 
        RowBox[{"number", "\[Rule]", "Orange"}], ",", 
        RowBox[{"used", "\[Rule]", "Gray"}], ",", 
        RowBox[{"discard", "\[Rule]", "Black"}], ",", 
        RowBox[{"halt", "\[Rule]", "White"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"EdgeColors", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"input", "\[Rule]", "Gray"}], ",", 
        RowBox[{"left", "\[Rule]", "Green"}], ",", 
        RowBox[{"right", "\[Rule]", "Red"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"growtreePPMinit3", "=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"<|", " ", 
       RowBox[{
        RowBox[{"SELF", "\[Rule]", "number"}], ",", 
        RowBox[{"input", "\[Rule]", "1"}], ",", 
        RowBox[{"left", "\[Rule]", "1"}], ",", 
        RowBox[{"right", "\[Rule]", "1"}]}], "|>"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"SELF", "\[Rule]", "number"}], ",", 
        RowBox[{"input", "\[Rule]", "1"}], ",", 
        RowBox[{"left", "\[Rule]", "2"}], ",", 
        RowBox[{"right", "\[Rule]", "2"}]}], "|>"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"SELF", "\[Rule]", "number"}], ",", 
        RowBox[{"input", "\[Rule]", "2"}], ",", 
        RowBox[{"left", "\[Rule]", "3"}], ",", 
        RowBox[{"right", "\[Rule]", "3"}]}], "|>"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"4", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"SELF", "\[Rule]", "start"}], ",", 
        RowBox[{"input", "\[Rule]", "3"}], ",", 
        RowBox[{"left", "\[Rule]", "4"}], ",", 
        RowBox[{"right", "\[Rule]", "4"}]}], "|>"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.818654714868162*^9, 3.8186547378244047`*^9}, {
  3.818654776916082*^9, 3.818654794592164*^9}, {3.818654861969509*^9, 
  3.81865538147521*^9}, {3.818655483720764*^9, 3.818655483983775*^9}, {
  3.818655644248856*^9, 3.818655923078827*^9}, {3.818688138389553*^9, 
  3.818688290717265*^9}, {3.818736509469912*^9, 3.818736518451868*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"82b71aee-d9a0-4e62-af30-25395bf50647"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "ShowStatePPM", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ShowEdgeState", "\[Rule]", "False"}], ",", 
     RowBox[{"ShowNodeState", "\[Rule]", "False"}], ",", 
     RowBox[{"ShowEdgeLoops", "\[Rule]", "True"}], ",", 
     RowBox[{"NodeSize", "\[Rule]", "Small"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowStatePPM", "[", 
   RowBox[{"rules_", ",", "state_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "Edges", ",", "NodeColor", ",", "NodeState", ",", "vertices", ",", 
      RowBox[{"loops", "=", 
       RowBox[{"OptionValue", "[", "ShowEdgeLoops", "]"}]}], ",", 
      "labeling"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"vertices", "=", 
      RowBox[{"Keys", "[", "state", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"labeling", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "ShowEdgeState", "]"}], ",", "Labeled", 
        ",", 
        RowBox[{"#1", "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Edges", "[", "node_", "]"}], ":=", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"edgestates", "=", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Complement", "[", 
             RowBox[{
              RowBox[{"Keys", "[", 
               RowBox[{"state", "[", "node", "]"}], "]"}], ",", 
              RowBox[{"{", "SELF", "}"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"loops", "||", 
               RowBox[{
                RowBox[{
                 RowBox[{"state", "[", "node", "]"}], "[", "#", "]"}], "=!=", 
                "node"}]}], ")"}], "&"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"labeling", "[", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{
              RowBox[{"node", "\[Rule]", 
               RowBox[{
                RowBox[{"state", "[", "node", "]"}], "[", "#", "]"}]}], ",", 
              RowBox[{"#", "/.", 
               RowBox[{"rules", "[", "EdgeColors", "]"}]}]}], "]"}], ",", 
            "#"}], "]"}], "&"}], "/@", "edgestates"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NodeColor", "[", "node_", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{"node", "\[Rule]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"state", "[", "node", "]"}], "[", "SELF", "]"}], "/.", 
          RowBox[{"rules", "[", "NodeColors", "]"}]}], ")"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NodeState", "[", "node_", "]"}], ":=", 
      RowBox[{"(", 
       RowBox[{"node", "\[Rule]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"state", "[", "node", "]"}], "[", "SELF", "]"}], ")"}]}], 
       ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "ShowNodeState", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"EdgeTaggedGraph", "[", 
        RowBox[{"vertices", ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Edges", "/@", 
           RowBox[{"Keys", "[", "state", "]"}]}], "]"}], ",", 
         RowBox[{"VertexStyle", "\[Rule]", 
          RowBox[{"NodeColor", "/@", 
           RowBox[{"Keys", "[", "state", "]"}]}]}], ",", 
         RowBox[{"VertexLabels", "\[Rule]", 
          RowBox[{"NodeState", "/@", 
           RowBox[{"Keys", "[", "state", "]"}]}]}], ",", 
         RowBox[{"VertexSize", "\[Rule]", 
          RowBox[{"OptionValue", "[", "NodeSize", "]"}]}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"EdgeTaggedGraph", "[", 
        RowBox[{"vertices", ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Edges", "/@", 
           RowBox[{"Keys", "[", "state", "]"}]}], "]"}], ",", 
         RowBox[{"VertexStyle", "\[Rule]", 
          RowBox[{"NodeColor", "/@", 
           RowBox[{"Keys", "[", "state", "]"}]}]}], ",", 
         RowBox[{"VertexSize", "\[Rule]", 
          RowBox[{"OptionValue", "[", "NodeSize", "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJwd0FsoQwEcBvDTWqFNW2qUJKJcWiQe5GnuSbOcxnnQMssi5exhCculUCuG
TI0ssrUWueaWxoNaGC1bbGSzB3KJNGykJNl3Hr5+9T39/1+qQkUqWQRBpEYC
g652akL9WtzTf98Aw/vuJkjTQiXkkYWdMO46NADf84xaGN2tG4G6wOEkTJKb
DTDn63gG9tWJjPBuNbQBr8zVu0zfsXkA1zOtbugUbD5C7S8rCKceBBx9RFGa
JxY+9FoSICs8ngLZxFkmrFD5cuEvj1sGLwlbJaRclJjp7f4aOKa+JWGBI1cK
52SWpqmI8tAb49CgeBAuVzUycmta46cjbigK06GeXZIFjzI02VDDD+RAQz6n
CDpLWyRQqp+lYHOUuQHyhc80PBWrlqy4Z8yxAkX8+S1I71wzss67PPBTIfHC
0uTVG8hd8wWgTfZSv4C/W7YpWNLWr4N/xqtRmBijNkG9T7IMF/bodUiSFzb4
M+yxw1p/+QkUpZs88OU7zgstwif5Inb/4CnhP84OGc4=
  "],
 CellLabel->"In[11]:=",ExpressionUUID->"b3a344cd-abc3-4d74-ac72-92151183ec44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ShowStatePPM", "[", 
  RowBox[{"growtreePPM", ",", "growtreePPMinit3"}], "]"}]], "Input",
 CellChangeTimes->{{3.818701703229433*^9, 3.818701707982127*^9}, {
  3.8187309043137817`*^9, 3.8187309256121473`*^9}, {3.818730964084993*^9, 
  3.818730971811302*^9}, {3.818731184877282*^9, 3.818731185017535*^9}, {
  3.818731255669704*^9, 3.818731256496366*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"8ed61a4c-f4b5-4035-b5da-73fd313d3b6e"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 
      4}, {{{1, 1}, {1, 1}, {1, 1}, {2, 1}, {2, 2}, {2, 2}, {3, 2}, {3, 3}, {
       3, 3}, {4, 3}, {4, 4}, {4, 4}}, Null, {1, 2, 3, 1, 1, 2, 1, 1, 2, 1, 1,
        2}}, {EdgeStyle -> {DirectedEdge[1, 1, 2] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[4, 4, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[4, 4, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[3, 2, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 2, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[1, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[1, 1, 3] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[3, 3, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[3, 3, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[2, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 2, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[4, 3, 1] -> {
           GrayLevel[0.5]}}, VertexSize -> {Small}, 
       VertexStyle -> {
        1 -> RGBColor[1, 0.5, 0], 2 -> RGBColor[1, 0.5, 0], 3 -> 
         RGBColor[1, 0.5, 0], 4 -> GrayLevel[1]}}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1: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
pjEeMymPIGG8llBeYT/j2VIwxjP8Hwd83K0=
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{1, 8, 11, 13, 19, 21, 24, 1},
           SplineDegree->7], 0.05]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{1, 31, 34, 36, 42, 44, 47, 1},
           SplineDegree->7], 0.05]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{1, 54, 57, 59, 65, 67, 70, 1},
           SplineDegree->7], 0.05]}, 
         {GrayLevel[0.5], ArrowBox[{2, 1}, 0.05]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{2, 77, 80, 82, 88, 90, 93, 2},
           SplineDegree->7], 0.05]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{2, 100, 103, 105, 111, 113, 116, 2},
           SplineDegree->7], 0.05]}, 
         {GrayLevel[0.5], ArrowBox[{3, 2}, 0.05]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{3, 123, 126, 128, 134, 136, 139, 3},
           SplineDegree->7], 0.05]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{3, 146, 149, 151, 157, 159, 162, 3},
           SplineDegree->7], 0.05]}, 
         {GrayLevel[0.5], ArrowBox[{4, 3}, 0.05]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{4, 169, 172, 174, 180, 182, 185, 4},
           SplineDegree->7], 0.05]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{4, 192, 195, 197, 203, 205, 208, 4},
           SplineDegree->7], 0.05]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         {RGBColor[1, 0.5, 0], DiskBox[1, 0.05]}, 
         {RGBColor[1, 0.5, 0], DiskBox[2, 0.05]}, 
         {RGBColor[1, 0.5, 0], DiskBox[3, 0.05]}, 
         {GrayLevel[1], DiskBox[4, 0.05]}}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.818701708344585*^9, 3.818730866772635*^9, {3.818730907912718*^9, 
   3.818730925972371*^9}, {3.81873096918591*^9, 3.818730972195896*^9}, 
   3.81873118638139*^9, 3.8187312568908997`*^9, 3.818735183998804*^9, 
   3.8187352789481077`*^9, 3.850429642214306*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"7f36484d-ec78-45f9-ab5c-e9a1f5fb6976"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ShowStatePPM", "[", 
  RowBox[{"growtreePPM", ",", "growtreePPMinit3", ",", 
   RowBox[{"ShowEdgeState", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.818687673179942*^9, 3.818687681157577*^9}, {
  3.818688717750749*^9, 3.8186887200191593`*^9}, {3.818701096858365*^9, 
  3.8187011000944567`*^9}, {3.818701712364646*^9, 3.818701713999058*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"c79dd464-170b-4b1a-b746-788f3ae05287"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 
      4}, {{{1, 1}, {1, 1}, {1, 1}, {2, 1}, {2, 2}, {2, 2}, {3, 2}, {3, 3}, {
       3, 3}, {4, 3}, {4, 4}, {4, 4}}, Null, {1, 2, 3, 1, 1, 2, 1, 1, 2, 1, 1,
        2}}, {EdgeLabels -> {
        DirectedEdge[1, 1, 2] -> $CellContext`left, 
         DirectedEdge[3, 2, 1] -> $CellContext`input, 
         DirectedEdge[2, 2, 1] -> $CellContext`left, 
         DirectedEdge[4, 4, 2] -> $CellContext`right, 
         DirectedEdge[3, 3, 2] -> $CellContext`right, 
         DirectedEdge[3, 3, 1] -> $CellContext`left, 
         DirectedEdge[2, 1, 1] -> $CellContext`input, 
         DirectedEdge[1, 1, 1] -> $CellContext`input, 
         DirectedEdge[4, 4, 1] -> $CellContext`left, 
         DirectedEdge[1, 1, 3] -> $CellContext`right, 
         DirectedEdge[4, 3, 1] -> $CellContext`input, 
         DirectedEdge[2, 2, 2] -> $CellContext`right}, 
       EdgeStyle -> {DirectedEdge[1, 1, 2] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[4, 4, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[4, 4, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[3, 2, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 2, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[1, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[1, 1, 3] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[3, 3, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[3, 3, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[2, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 2, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[4, 3, 1] -> {
           GrayLevel[0.5]}}, VertexSize -> {Small}, 
       VertexStyle -> {
        1 -> RGBColor[1, 0.5, 0], 2 -> RGBColor[1, 0.5, 0], 3 -> 
         RGBColor[1, 0.5, 0], 4 -> GrayLevel[1]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], {
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{{3., 0.}, {2.7787469647563268`, 
           0.2755044346046771}, {2.7950435816880517`, 0.3896210085285382}, {
           2.8420295732133884`, 0.45127864158862974`}, {3.060692288545585, 
           0.47426101906473683`}, {3.1194708661655373`, 0.4237196901628646}, {
           3.1591375327522218`, 0.31548509435616207`}, {3., 0.}},
           SplineDegree->7], 0.05]}, 
         InsetBox["input", {2.947735768366173, 0.49726094768413664}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{{3., 0.}, {3.2971224322527335`, 
           0.19124293279387058`}, {3.4089104033200903`, 0.1631071603292102}, {
           3.4653188959256838`, 0.10993358534918202`}, {
           3.4653188959256838`, -0.10993358534918195`}, {
           3.4089104033200903`, -0.16310716032921005`}, {
           3.297122432252733, -0.19124293279387042`}, {3., 0.}},
           SplineDegree->7], 0.05]}, 
         InsetBox["left", {3.5, 1.4828401951663266*^-16}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{{3., 0.}, {
           3.159137532752222, -0.31548509435616195`}, {
           3.1194708661655377`, -0.4237196901628646}, {
           3.060692288545586, -0.4742610190647367}, {
           2.842029573213389, -0.45127864158862985`}, {
           2.795043581688052, -0.38962100852853854`}, {
           2.778746964756327, -0.2755044346046774}, {3., 0.}},
           SplineDegree->7], 0.05]}, 
         InsetBox["right", {2.9477357683661736, -0.49726094768413676}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[0.5], 
          ArrowBox[{{2., 2.4492935982947064`*^-16}, {3., 0.}}, 0.05]}, 
         InsetBox["input", {2.5, 1.2246467991473532*^-16}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{{2., 2.4492935982947064`*^-16}, {
           2.349762525432181, -0.0881040665621384}, {
           2.4035367177261566`, -0.18332581121958683`}, {
           2.404586496408871, -0.25683489947967203`}, {
           2.256834899479672, -0.4045864964088711}, {
           2.183325811219587, -0.4035367177261566}, {
           2.0881040665621384`, -0.3497625254321808}, {2., 
           2.4492935982947064`*^-16}},
           SplineDegree->7], 0.05]}, 
         InsetBox["left", {2.3535533905932735, -0.35355339059327356}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{{2., 2.4492935982947064`*^-16}, {
           1.9118959334378616`, -0.3497625254321808}, {
           1.816674188780413, -0.4035367177261566}, {
           1.743165100520328, -0.40458649640887107`}, {
           1.5954135035911288`, -0.25683489947967203`}, {
           1.5964632822738432`, -0.18332581121958683`}, {
           1.650237474567819, -0.08810406656213834}, {2., 
           2.4492935982947064`*^-16}},
           SplineDegree->7], 0.05]}, 
         InsetBox["right", {1.6464466094067263, -0.35355339059327356}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[0.5], 
          ArrowBox[{{1., 3.6739403974420594`*^-16}, {2., 
           2.4492935982947064`*^-16}}, 0.05]}, 
         InsetBox["input", {1.5, 3.0616169978683826*^-16}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{{1., 3.6739403974420594`*^-16}, {
           1.349762525432181, -0.08810406656213829}, {
           1.4035367177261568`, -0.18332581121958672`}, {
           1.4045864964088712`, -0.2568348994796719}, {
           1.256834899479672, -0.404586496408871}, {
           1.1833258112195868`, -0.4035367177261565}, {
           1.0881040665621384`, -0.34976252543218067`}, {1., 
           3.6739403974420594`*^-16}},
           SplineDegree->7], 0.05]}, 
         InsetBox["left", {1.3535533905932737, -0.3535533905932736}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{{1., 3.6739403974420594`*^-16}, {
           0.9118959334378614, -0.34976252543218067`}, {
           0.816674188780413, -0.4035367177261565}, {
           0.7431651005203278, -0.40458649640887095`}, {
           0.5954135035911287, -0.2568348994796719}, {
           0.5964632822738432, -0.18332581121958672`}, {
           0.650237474567819, -0.08810406656213823}, {1., 
           3.6739403974420594`*^-16}},
           SplineDegree->7], 0.05]}, 
         InsetBox["right", {0.6464466094067263, -0.3535533905932734}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[0.5], 
          ArrowBox[{{0., 4.898587196589413*^-16}, {1., 
           3.6739403974420594`*^-16}}, 0.05]}, 
         InsetBox["input", {0.5, 4.286263797015736*^-16}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{{0., 4.898587196589413*^-16}, {
           0.1451086406335133, -0.26044768744081115`}, {
           0.08921501198032354, -0.4077294770859495}, {
           0.0029139616960409953`, -0.46968080364466863`}, \
{-0.2784288942002681, -0.37826696836954155`}, {-0.3118338344014895, \
-0.2774208077450133}, {-0.27048266597454795`, -0.1254138863406833}, {0., 
           4.898587196589413*^-16}},
           SplineDegree->7], 0.05]}, 
         InsetBox["left", {-0.1545084971874738, -0.4755282581475763}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{{0., 
           4.898587196589413*^-16}, {-0.27048266597454784`, 
           0.12541388634068457`}, {-0.3118338344014894, 
           0.2774208077450144}, {-0.27842889420026806`, 
           0.37826696836954254`}, {0.0029139616960407455`, 
           0.4696808036446696}, {0.08921501198032317, 0.4077294770859506}, {
           0.14510864063351298`, 0.2604476874408125}, {0., 
           4.898587196589413*^-16}},
           SplineDegree->7], 0.05]}, 
         InsetBox["right", {-0.1545084971874738, 0.47552825814757727}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        {RGBColor[1, 0.5, 0], DiskBox[{3., 0.}, 0.05]}, 
        {RGBColor[1, 0.5, 0], DiskBox[{2., 2.4492935982947064*^-16}, 0.05]}, 
        {RGBColor[1, 0.5, 0], DiskBox[{1., 3.6739403974420594*^-16}, 0.05]}, 
        {GrayLevel[1], DiskBox[{0., 4.898587196589413*^-16}, 0.05]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.8186876818997383`*^9, 3.818687708308126*^9}, 
   3.818688372218409*^9, 3.818688625885838*^9, {3.8186887210048428`*^9, 
   3.818688774912424*^9}, 3.818688899247253*^9, 3.818689089130786*^9, {
   3.818689139515328*^9, 3.818689145374436*^9}, 3.818689188978264*^9, {
   3.818699538513194*^9, 3.8186995480909233`*^9}, 3.8186998087096567`*^9, {
   3.8187010948034143`*^9, 3.818701100861573*^9}, 3.8187017145087957`*^9, 
   3.818730877473625*^9, 3.818730930206386*^9, 3.8187311898528643`*^9, 
   3.81873125887683*^9, {3.8187352137723227`*^9, 3.818735215840962*^9}, 
   3.8504296440821238`*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"02c8e8fe-9fad-40f7-9480-17d15e694499"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ShowStatePPM", "[", 
  RowBox[{"growtreePPM", ",", "growtreePPMinit3", ",", 
   RowBox[{"ShowNodeState", "\[Rule]", "True"}], ",", 
   RowBox[{"NodeSize", "\[Rule]", "Medium"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.818687673179942*^9, 3.818687681157577*^9}, {
  3.818688717750749*^9, 3.8186887200191593`*^9}, {3.818701096858365*^9, 
  3.8187011000944567`*^9}, {3.818701712364646*^9, 3.81870172673914*^9}, {
  3.81873093232438*^9, 3.818730957268471*^9}, {3.81873099953205*^9, 
  3.818731010604433*^9}, {3.818731193671842*^9, 3.818731195968214*^9}, {
  3.818731261384516*^9, 3.8187312628892307`*^9}, {3.818985373026301*^9, 
  3.8189853737382717`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"de9f79b6-3b41-4a2b-a537-b317d33a8e16"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 
      4}, {{{1, 1}, {1, 1}, {1, 1}, {2, 1}, {2, 2}, {2, 2}, {3, 2}, {3, 3}, {
       3, 3}, {4, 3}, {4, 4}, {4, 4}}, Null, {1, 2, 3, 1, 1, 2, 1, 1, 2, 1, 1,
        2}}, {EdgeStyle -> {DirectedEdge[1, 1, 2] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[4, 4, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[4, 4, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[3, 2, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 2, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[1, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[1, 1, 3] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[3, 3, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[3, 3, 2] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[2, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 2, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[4, 3, 1] -> {
           GrayLevel[0.5]}}, 
       VertexLabels -> {
        3 -> $CellContext`number, 4 -> $CellContext`start, 
         2 -> $CellContext`number, 1 -> $CellContext`number}, 
       VertexSize -> {Medium}, 
       VertexStyle -> {
        1 -> RGBColor[1, 0.5, 0], 2 -> RGBColor[1, 0.5, 0], 3 -> 
         RGBColor[1, 0.5, 0], 4 -> GrayLevel[1]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{3., 0.}, {2.7787469647563268`, 
          0.2755044346046771}, {2.7950435816880517`, 0.3896210085285382}, {
          2.8420295732133884`, 0.45127864158862974`}, {3.060692288545585, 
          0.47426101906473683`}, {3.1194708661655373`, 0.4237196901628646}, {
          3.1591375327522218`, 0.31548509435616207`}, {3., 0.}},
          SplineDegree->7], 0.1]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{3., 0.}, {3.2971224322527335`, 
          0.19124293279387058`}, {3.4089104033200903`, 0.1631071603292102}, {
          3.4653188959256838`, 0.10993358534918202`}, {
          3.4653188959256838`, -0.10993358534918195`}, {
          3.4089104033200903`, -0.16310716032921005`}, {
          3.297122432252733, -0.19124293279387042`}, {3., 0.}},
          SplineDegree->7], 0.1]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{3., 0.}, {
          3.159137532752222, -0.31548509435616195`}, {
          3.1194708661655377`, -0.4237196901628646}, {
          3.060692288545586, -0.4742610190647367}, {
          2.842029573213389, -0.45127864158862985`}, {
          2.795043581688052, -0.38962100852853854`}, {
          2.778746964756327, -0.2755044346046774}, {3., 0.}},
          SplineDegree->7], 0.1]}, 
        {GrayLevel[0.5], 
         ArrowBox[{{2., 2.4492935982947064`*^-16}, {3., 0.}}, 0.1]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{2., 2.4492935982947064`*^-16}, {
          2.349762525432181, -0.0881040665621384}, {
          2.4035367177261566`, -0.18332581121958683`}, {
          2.404586496408871, -0.25683489947967203`}, {
          2.256834899479672, -0.4045864964088711}, {
          2.183325811219587, -0.4035367177261566}, {
          2.0881040665621384`, -0.3497625254321808}, {2., 
          2.4492935982947064`*^-16}},
          SplineDegree->7], 0.1]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{2., 2.4492935982947064`*^-16}, {
          1.9118959334378616`, -0.3497625254321808}, {
          1.816674188780413, -0.4035367177261566}, {
          1.743165100520328, -0.40458649640887107`}, {
          1.5954135035911288`, -0.25683489947967203`}, {
          1.5964632822738432`, -0.18332581121958683`}, {
          1.650237474567819, -0.08810406656213834}, {2., 
          2.4492935982947064`*^-16}},
          SplineDegree->7], 0.1]}, 
        {GrayLevel[0.5], 
         ArrowBox[{{1., 3.6739403974420594`*^-16}, {2., 
          2.4492935982947064`*^-16}}, 0.1]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{1., 3.6739403974420594`*^-16}, {
          1.349762525432181, -0.08810406656213829}, {
          1.4035367177261568`, -0.18332581121958672`}, {
          1.4045864964088712`, -0.2568348994796719}, {
          1.256834899479672, -0.404586496408871}, {
          1.1833258112195868`, -0.4035367177261565}, {
          1.0881040665621384`, -0.34976252543218067`}, {1., 
          3.6739403974420594`*^-16}},
          SplineDegree->7], 0.1]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{1., 3.6739403974420594`*^-16}, {
          0.9118959334378614, -0.34976252543218067`}, {
          0.816674188780413, -0.4035367177261565}, {
          0.7431651005203278, -0.40458649640887095`}, {
          0.5954135035911287, -0.2568348994796719}, {
          0.5964632822738432, -0.18332581121958672`}, {
          0.650237474567819, -0.08810406656213823}, {1., 
          3.6739403974420594`*^-16}},
          SplineDegree->7], 0.1]}, 
        {GrayLevel[0.5], 
         ArrowBox[{{0., 4.898587196589413*^-16}, {1., 
          3.6739403974420594`*^-16}}, 0.1]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{0., 4.898587196589413*^-16}, {
          0.1451086406335133, -0.26044768744081115`}, {
          0.08921501198032354, -0.4077294770859495}, {
          0.0029139616960409953`, -0.46968080364466863`}, \
{-0.2784288942002681, -0.37826696836954155`}, {-0.3118338344014895, \
-0.2774208077450133}, {-0.27048266597454795`, -0.1254138863406833}, {0., 
          4.898587196589413*^-16}},
          SplineDegree->7], 0.1]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{0., 
          4.898587196589413*^-16}, {-0.27048266597454784`, 
          0.12541388634068457`}, {-0.3118338344014894, 
          0.2774208077450144}, {-0.27842889420026806`, 
          0.37826696836954254`}, {0.0029139616960407455`, 
          0.4696808036446696}, {0.08921501198032317, 0.4077294770859506}, {
          0.14510864063351298`, 0.2604476874408125}, {0., 
          4.898587196589413*^-16}},
          SplineDegree->7], 0.1]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {RGBColor[1, 0.5, 0], DiskBox[{3., 0.}, 0.1]}, 
         InsetBox["number", Offset[{2, 2}, {3.1, 0.1}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0.5, 0], DiskBox[{2., 2.4492935982947064*^-16}, 0.1]}, 
         InsetBox["number", Offset[{2, 2}, {2.1, 0.10000000000000026}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0.5, 0], DiskBox[{1., 3.6739403974420594*^-16}, 0.1]}, 
         InsetBox["number", Offset[{2, 2}, {1.1, 0.10000000000000037}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[1], DiskBox[{0., 4.898587196589413*^-16}, 0.1]}, 
         InsetBox["start", Offset[{2, 2}, {0.1, 0.10000000000000049}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.818701727417451*^9, {3.818730937702263*^9, 3.818730957734174*^9}, {
   3.8187310003417253`*^9, 3.818731011345119*^9}, 3.818731197023548*^9, 
   3.818731263605754*^9, 3.8187352210792847`*^9, 3.818735281800078*^9, {
   3.818985374305023*^9, 3.818985382012081*^9}, 3.850429646613196*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"afdf9a8f-fe42-4d19-9ce7-adfa11c0b11b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ShowStatePPM", "[", 
  RowBox[{"growtreePPM", ",", "growtreePPMinit3", ",", 
   RowBox[{"ShowEdgeLoops", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8187353048914413`*^9, 3.818735312941742*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"5e356287-ca2a-41c4-9fed-0936f6e421b2"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4}, {{{2, 1}, {3, 2}, {4, 3}}, Null, {1, 1, 1}}, {
      EdgeStyle -> {DirectedEdge[3, 2, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[4, 3, 1] -> {
           GrayLevel[0.5]}}, VertexSize -> {Small}, 
       VertexStyle -> {
        1 -> RGBColor[1, 0.5, 0], 2 -> RGBColor[1, 0.5, 0], 3 -> 
         RGBColor[1, 0.5, 0], 4 -> GrayLevel[1]}}]]}, 
    TagBox[
     GraphicsGroupBox[
      GraphicsComplexBox[{{3., 0.}, {2., 2.4492935982947064`*^-16}, {1., 
       3.6739403974420594`*^-16}, {0., 4.898587196589413*^-16}}, {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         {GrayLevel[0.5], ArrowBox[{2, 1}, 0.05]}, 
         {GrayLevel[0.5], ArrowBox[{3, 2}, 0.05]}, 
         {GrayLevel[0.5], ArrowBox[{4, 3}, 0.05]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         {RGBColor[1, 0.5, 0], DiskBox[1, 0.05]}, 
         {RGBColor[1, 0.5, 0], DiskBox[2, 0.05]}, 
         {RGBColor[1, 0.5, 0], DiskBox[3, 0.05]}, 
         {GrayLevel[1], DiskBox[4, 0.05]}}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.818735313522222*^9, 3.8504296585108*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"37a18911-22fc-4138-8488-d75779221184"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{
   "OneStepPPM", ",", "SELF", ",", "NEW", ",", "NodeColors", ",", 
    "EdgeColors"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RuleOptionsPPM", "[", 
   RowBox[{"rules_", ",", "state_", ",", "node_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"alloptions", ",", "edgestates", ",", "circumstances"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"edgestates", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Keys", "[", 
         RowBox[{"state", "[", "node", "]"}], "]"}], ",", 
        RowBox[{"{", "SELF", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"alloptions", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Keys", "[", "rules", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"NodeColors", ",", "EdgeColors"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"circumstances", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"state", "[", "node", "]"}], "[", "SELF", "]"}], ",", 
          "edgestate", ",", 
          RowBox[{
           RowBox[{"state", "[", 
            RowBox[{
             RowBox[{"state", "[", "node", "]"}], "[", "edgestate", "]"}], 
            "]"}], "[", "SELF", "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"edgestate", ",", "edgestates"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"state", "[", "node", "]"}], "[", "edgestate", "]"}], 
          "\[Equal]", "node"}], ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"circumstances", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"state", "[", "node", "]"}], "[", "SELF", "]"}], ",", 
             "edgestate", ",", "SELF"}], "}"}]}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"edgestate", ",", "edgestates"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Intersection", "[", 
      RowBox[{"alloptions", ",", "circumstances"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"OneStepPPM", ",", "HoldRest"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"OneStepPPM", "[", 
   RowBox[{"rules_", ",", "state_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"nodes", "=", 
       RowBox[{"Keys", "[", "state", "]"}]}], ",", "node", ",", "ruleoptions",
       ",", "nodecolor", ",", "edgecolor", ",", "readnodecolor", ",", 
      "newnodecolor", ",", "newreadnodecolor", ",", "changedpointer", ",", 
      "destinationspec", ",", "destination"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "find", " ", "a", " ", "node", " ", "that", " ", "can", " ", "take", 
       " ", "an", " ", "action"}], ",", " ", 
      RowBox[{"if", " ", "one", " ", 
       RowBox[{"exists", " ", "--"}], " ", "list", " ", "the", " ", 
       "possible", " ", "actions"}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "nodes", "]"}], ">", "0"}], " ", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"node", "=", 
         RowBox[{"RandomChoice", "[", "nodes", "]"}]}], ";", " ", 
        RowBox[{"nodes", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"nodes", ",", 
           RowBox[{"{", "node", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"ruleoptions", "=", 
         RowBox[{"RuleOptionsPPM", "[", 
          RowBox[{"rules", ",", "state", ",", "node"}], "]"}]}], ";", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "ruleoptions", "]"}], ">", "0"}], ",", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "ruleoptions", "]"}], "\[Equal]", "0"}], ",", 
       RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "look", " ", "up", " ", "the", " ", "details", " ", "for", " ", "the", 
       " ", "rule"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nodecolor", ",", "edgecolor", ",", "readnodecolor"}], "}"}], 
      "=", 
      RowBox[{"RandomChoice", "[", "ruleoptions", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"newnodecolor", ",", "newreadnodecolor"}], "}"}], ",", 
        "changedpointer", ",", "destinationspec"}], "}"}], "=", 
      RowBox[{"rules", "[", 
       RowBox[{"{", 
        RowBox[{"nodecolor", ",", "edgecolor", ",", "readnodecolor"}], "}"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "change", " ", "node", " ", "states", " ", "for", " ", "self", " ", 
        "and", " ", "the", " ", "read", " ", "node"}], ",", " ", 
       RowBox[{"if", " ", "applicable"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"state", "[", "node", "]"}], "[", "SELF", "]"}], "=", 
      "newnodecolor"}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"readnodecolor", "===", "SELF"}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"state", "[", 
          RowBox[{
           RowBox[{"state", "[", "node", "]"}], "[", "edgecolor", "]"}], 
          "]"}], "[", "SELF", "]"}], "=", "newreadnodecolor"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "reroute", " ", "the", " ", "designated", " ", "edge", " ", "pointer", 
       " ", "to", " ", "either", " ", "a", " ", "new", " ", "node", " ", "or",
        " ", "the", " ", "node", " ", "pointed", " ", "to", " ", "by", " ", 
       "a", " ", "list", " ", "of", " ", "edges"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"destinationspec", ",", "_NEW"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"destination", "=", 
         RowBox[{
          RowBox[{"Max", "[", 
           RowBox[{"Keys", "[", "state", "]"}], "]"}], "+", "1"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"state", "[", "destination", "]"}], "=", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"SELF", "\[Rule]", 
            RowBox[{"destinationspec", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"edgecolor", "\[Rule]", "destination"}], ",", 
             RowBox[{"{", 
              RowBox[{"edgecolor", ",", 
               RowBox[{"Complement", "[", 
                RowBox[{
                 RowBox[{"Keys", "[", 
                  RowBox[{"state", "[", "node", "]"}], "]"}], ",", 
                 RowBox[{"{", "SELF", "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
          "|>"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"state", "[", "destination", "]"}], "[", 
          RowBox[{"destinationspec", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], "=", "node"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "else", " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"destination", "=", 
         RowBox[{"Fold", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"state", "[", "#1", "]"}], "[", "#2", "]"}], "&"}], ",", 
           "node", ",", "destinationspec"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"state", "[", "node", "]"}], "[", "changedpointer", "]"}], "=",
       "destination"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.8186148052751904`*^9, 3.818614902847186*^9}, {
   3.818614949226914*^9, 3.818614950179489*^9}, {3.818615001015251*^9, 
   3.81861503654872*^9}, {3.818616279760453*^9, 3.8186162923371277`*^9}, {
   3.818616335093889*^9, 3.8186164129678383`*^9}, {3.818618782808941*^9, 
   3.818618817070532*^9}, {3.8186189186353703`*^9, 3.8186189482941113`*^9}, {
   3.81861915867118*^9, 3.818619286501163*^9}, {3.818619488067739*^9, 
   3.818619534198016*^9}, {3.818619679985756*^9, 3.818619692178669*^9}, {
   3.8186197442623987`*^9, 3.818619768924993*^9}, {3.81861991471782*^9, 
   3.8186200643231487`*^9}, {3.818620098965782*^9, 3.818620101040885*^9}, {
   3.818620405675651*^9, 3.818620440979834*^9}, 3.8186204879752893`*^9, 
   3.818620699656436*^9, {3.818620740804826*^9, 3.818620806494132*^9}, {
   3.818621076723199*^9, 3.81862110925539*^9}, {3.818621169963812*^9, 
   3.818621215857489*^9}, {3.818621679182355*^9, 3.8186217957207317`*^9}, {
   3.8186525954016047`*^9, 3.818652601825791*^9}, {3.818655102633437*^9, 
   3.818655124612341*^9}, {3.818699856202132*^9, 3.818699866715783*^9}, 
   3.818729916750103*^9, {3.818729959026753*^9, 3.818729979362011*^9}, {
   3.818730306381399*^9, 3.8187303533559723`*^9}, {3.818730389985159*^9, 
   3.818730499678276*^9}, {3.818731402846476*^9, 3.818731619244823*^9}, {
   3.81873175174692*^9, 3.818731824010696*^9}, {3.8187319125218897`*^9, 
   3.818731965187253*^9}, {3.818731995439007*^9, 3.818732085386488*^9}, {
   3.818732138324766*^9, 3.818732156495427*^9}, {3.818732287790924*^9, 
   3.818732565108938*^9}, {3.8187326035871887`*^9, 3.8187326079013443`*^9}, {
   3.818732653569227*^9, 3.818732764092428*^9}, {3.8187333501264057`*^9, 
   3.818733351261305*^9}, {3.818733384691018*^9, 3.8187334678279963`*^9}, {
   3.8187335180126343`*^9, 3.8187336612220716`*^9}, {3.818733931015197*^9, 
   3.8187339395948057`*^9}, {3.818733994262278*^9, 3.8187339962598677`*^9}, {
   3.818735441403475*^9, 3.818735494227414*^9}, {3.8187355321766872`*^9, 
   3.818735564590699*^9}, {3.818735669454*^9, 3.8187356714233093`*^9}, {
   3.818736560983334*^9, 3.8187365649654922`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"e0e494d3-034f-4ffc-9397-a85432f6904d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RuleOptionsPPM", "[", 
  RowBox[{"growtreePPM", ",", "growtreePPMinit3", ",", "4"}], "]"}]], "Input",\

 CellChangeTimes->{{3.818733773164754*^9, 3.8187338061530943`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"0fdddead-957d-4111-8886-94aac3139424"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"start", ",", "input", ",", "number"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.818733799268746*^9, 3.818733806520097*^9}, 
   3.818738051690742*^9, 3.850429670206558*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"2854c383-fc41-47bc-8906-d198a786b255"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"growtreePPMstate", "=", "growtreePPMinit3"}], ";", 
  RowBox[{"ShowStatePPM", "[", 
   RowBox[{"growtreePPM", ",", "growtreePPMstate", ",", 
    RowBox[{"ShowNodeState", "\[Rule]", "True"}], ",", 
    RowBox[{"ShowEdgeLoops", "\[Rule]", "False"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8187338509255466`*^9, 3.8187338619845743`*^9}, 
   3.818738026320763*^9},
 CellLabel->
  "In[109]:=",ExpressionUUID->"bccc57e8-85a1-4833-bafe-b89160a610b7"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4}, {{{2, 1}, {3, 2}, {4, 3}}, Null, {1, 1, 1}}, {
      EdgeStyle -> {DirectedEdge[3, 2, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[4, 3, 1] -> {
           GrayLevel[0.5]}}, 
       VertexLabels -> {
        3 -> $CellContext`number, 4 -> $CellContext`start, 
         2 -> $CellContext`number, 1 -> $CellContext`number}, 
       VertexSize -> {Small}, 
       VertexStyle -> {
        1 -> RGBColor[1, 0.5, 0], 2 -> RGBColor[1, 0.5, 0], 3 -> 
         RGBColor[1, 0.5, 0], 4 -> GrayLevel[1]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        {GrayLevel[0.5], 
         ArrowBox[{{2., 2.4492935982947064`*^-16}, {3., 0.}}, 0.05]}, 
        {GrayLevel[0.5], 
         ArrowBox[{{1., 3.6739403974420594`*^-16}, {2., 
          2.4492935982947064`*^-16}}, 0.05]}, 
        {GrayLevel[0.5], 
         ArrowBox[{{0., 4.898587196589413*^-16}, {1., 
          3.6739403974420594`*^-16}}, 0.05]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {RGBColor[1, 0.5, 0], DiskBox[{3., 0.}, 0.05]}, 
         InsetBox["number", Offset[{2, 2}, {3.05, 0.05}], ImageScaled[{0, 0}],
          
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0.5, 0], DiskBox[{2., 2.4492935982947064*^-16}, 0.05]}, 
         InsetBox["number", Offset[{2, 2}, {2.05, 0.050000000000000246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0.5, 0], DiskBox[{1., 3.6739403974420594*^-16}, 0.05]}, 
         InsetBox["number", Offset[{2, 2}, {1.05, 0.05000000000000037}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[1], DiskBox[{0., 4.898587196589413*^-16}, 0.05]}, 
         InsetBox["start", Offset[{2, 2}, {0.05, 0.050000000000000495}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.818738027299444*^9, 3.850429672518086*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"2cb189a5-7552-4148-b9ca-b3f426e6be56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"OneStepPPM", "[", 
   RowBox[{"growtreePPM", ",", "growtreePPMstate"}], "]"}], ";", 
  RowBox[{"ShowStatePPM", "[", 
   RowBox[{"growtreePPM", ",", "growtreePPMstate", ",", 
    RowBox[{"ShowNodeState", "\[Rule]", "True"}], ",", 
    RowBox[{"ShowEdgeLoops", "\[Rule]", "False"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.818733833439953*^9, 3.8187338748745604`*^9}, {
  3.818734017398938*^9, 3.818734055222599*^9}, {3.818735338650116*^9, 
  3.818735341674678*^9}, {3.818736486269761*^9, 3.8187364888110332`*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"b7d4f4b8-fed5-4e60-a5aa-922f74273dcf"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4}, {{{2, 1}, {3, 2}, {4, 3}}, Null, {1, 1, 1}}, {
      EdgeStyle -> {DirectedEdge[3, 2, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 1, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[4, 3, 1] -> {
           GrayLevel[0.5]}}, 
       VertexLabels -> {
        3 -> $CellContext`used, 4 -> $CellContext`wait, 
         2 -> $CellContext`number, 1 -> $CellContext`number}, 
       VertexSize -> {Small}, 
       VertexStyle -> {
        1 -> RGBColor[1, 0.5, 0], 2 -> RGBColor[1, 0.5, 0], 3 -> 
         GrayLevel[0.5], 4 -> RGBColor[0.6, 0.4, 0.2]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        {GrayLevel[0.5], 
         ArrowBox[{{2., 2.4492935982947064`*^-16}, {3., 0.}}, 0.05]}, 
        {GrayLevel[0.5], 
         ArrowBox[{{1., 3.6739403974420594`*^-16}, {2., 
          2.4492935982947064`*^-16}}, 0.05]}, 
        {GrayLevel[0.5], 
         ArrowBox[{{0., 4.898587196589413*^-16}, {1., 
          3.6739403974420594`*^-16}}, 0.05]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {RGBColor[1, 0.5, 0], DiskBox[{3., 0.}, 0.05]}, 
         InsetBox["number", Offset[{2, 2}, {3.05, 0.05}], ImageScaled[{0, 0}],
          
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0.5, 0], DiskBox[{2., 2.4492935982947064*^-16}, 0.05]}, 
         InsetBox["number", Offset[{2, 2}, {2.05, 0.050000000000000246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[0.5], DiskBox[{1., 3.6739403974420594*^-16}, 0.05]}, 
         InsetBox["used", Offset[{2, 2}, {1.05, 0.05000000000000037}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{0., 4.898587196589413*^-16}, 0.05]}, 
         InsetBox["wait", Offset[{2, 2}, {0.05, 0.050000000000000495}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.818733875949484*^9, 3.818733945134614*^9, {3.818734000354703*^9, 
   3.8187340271949244`*^9}, {3.818734058040145*^9, 3.818734062406674*^9}, 
   3.81873412247526*^9, {3.8187341645910482`*^9, 3.818734210437234*^9}, {
   3.8187353422489357`*^9, 3.818735350891987*^9}, 3.818735498622569*^9, {
   3.818735570170703*^9, 3.8187355747347183`*^9}, {3.818735684436455*^9, 
   3.8187356879757338`*^9}, {3.818735746165346*^9, 3.8187357965801163`*^9}, {
   3.818736434062529*^9, 3.818736491442191*^9}, {3.81873654470599*^9, 
   3.818736610124547*^9}, 3.81873674580464*^9, 3.818738029689699*^9, 
   3.850429674654952*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"8abe70b3-9e2f-45b0-8fd1-c24756d56dc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"OneStepPPM", "[", 
   RowBox[{"growtreePPM", ",", "growtreePPMstate"}], "]"}], ";", 
  RowBox[{"ShowStatePPM", "[", 
   RowBox[{"growtreePPM", ",", "growtreePPMstate", ",", 
    RowBox[{"ShowNodeState", "\[Rule]", "True"}], ",", 
    RowBox[{"ShowEdgeLoops", "\[Rule]", "False"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.818733833439953*^9, 3.8187338748745604`*^9}, {
  3.818734017398938*^9, 3.818734055222599*^9}, {3.818735338650116*^9, 
  3.818735341674678*^9}, {3.818736486269761*^9, 3.8187364888110332`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"a63429b2-8240-4938-a4cf-a77d51456b76"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4}, {{{2, 1}, {3, 2}, {4, 2}}, Null, {1, 1, 1}}, {
      EdgeStyle -> {DirectedEdge[3, 2, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[4, 2, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[2, 1, 1] -> {
           GrayLevel[0.5]}}, 
       VertexLabels -> {
        3 -> $CellContext`discard, 4 -> $CellContext`growleft, 
         2 -> $CellContext`number, 1 -> $CellContext`number}, 
       VertexSize -> {Small}, 
       VertexStyle -> {
        1 -> RGBColor[1, 0.5, 0], 2 -> RGBColor[1, 0.5, 0], 3 -> GrayLevel[0],
          4 -> RGBColor[0, 1, 0]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        {GrayLevel[0.5], ArrowBox[{{0., 1.}, {0., 0.}}, 0.05]}, 
        {GrayLevel[0.5], ArrowBox[{{-1., 2.}, {0., 1.}}, 0.05]}, 
        {GrayLevel[0.5], ArrowBox[{{0., 2.}, {0., 1.}}, 0.05]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {RGBColor[1, 0.5, 0], DiskBox[{0., 0.}, 0.05]}, 
         InsetBox["number", Offset[{2, 2}, {0.05, 0.05}], ImageScaled[{0, 0}],
          
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0.5, 0], DiskBox[{0., 1.}, 0.05]}, 
         InsetBox["number", Offset[{2, 2}, {0.05, 1.05}], ImageScaled[{0, 0}],
          
          BaseStyle->"Graphics"]}, {
         {GrayLevel[0], DiskBox[{-1., 2.}, 0.05]}, 
         InsetBox["discard", Offset[{2, 2}, {-0.95, 2.05}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 1, 0], DiskBox[{0., 2.}, 0.05]}, 
         InsetBox["growleft", Offset[{2, 2}, {0.05, 2.05}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.8187380323504963`*^9, 3.850429676768365*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"69429638-361a-4024-84d6-e84d0cbab6b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"growtreePPMstate", "=", "growtreePPMinit3"}], ";", 
  RowBox[{"While", "[", 
   RowBox[{"OneStepPPM", "[", 
    RowBox[{"growtreePPM", ",", "growtreePPMstate"}], "]"}], "]"}], ";", 
  RowBox[{"ShowStatePPM", "[", 
   RowBox[{"growtreePPM", ",", "growtreePPMstate", ",", 
    RowBox[{"ShowNodeState", "\[Rule]", "True"}], ",", 
    RowBox[{"ShowEdgeLoops", "\[Rule]", "False"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.818736664327042*^9, 3.8187366760922823`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"27366e7c-8fea-4a30-b9d3-a9944f6f29d0"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
      18}, {{{4, 5}, {4, 6}, {5, 4}, {5, 7}, {5, 8}, {6, 4}, {6, 9}, {6, 
       10}, {7, 5}, {7, 13}, {7, 14}, {8, 5}, {8, 15}, {8, 16}, {9, 6}, {9, 
       17}, {9, 18}, {10, 6}, {10, 11}, {10, 12}, {11, 10}, {12, 10}, {13, 
       7}, {14, 7}, {15, 8}, {16, 8}, {17, 9}, {18, 9}}, Null, {1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
       1}}, {EdgeStyle -> {DirectedEdge[18, 9, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[9, 18, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[9, 6, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[13, 7, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[16, 8, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[17, 9, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[10, 6, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[5, 4, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[8, 5, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[7, 13, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[6, 9, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[7, 5, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[14, 7, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[8, 15, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[12, 10, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[4, 5, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[5, 7, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[8, 16, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[10, 12, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[7, 14, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[9, 17, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[10, 11, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[5, 8, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[6, 10, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[4, 6, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[11, 10, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[6, 4, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[15, 8, 1] -> {
           GrayLevel[0.5]}}, 
       VertexLabels -> {
        9 -> $CellContext`wait, 17 -> $CellContext`wait, 
         14 -> $CellContext`wait, 5 -> $CellContext`wait, 
         6 -> $CellContext`wait, 13 -> $CellContext`wait, 
         16 -> $CellContext`wait, 4 -> $CellContext`halt, 
         15 -> $CellContext`wait, 12 -> $CellContext`wait, 
         18 -> $CellContext`wait, 8 -> $CellContext`wait, 
         7 -> $CellContext`wait, 1 -> $CellContext`discard, 
         10 -> $CellContext`wait, 2 -> $CellContext`discard, 
         3 -> $CellContext`discard, 11 -> $CellContext`wait}, 
       VertexSize -> {Small}, 
       VertexStyle -> {
        5 -> RGBColor[0.6, 0.4, 0.2], 15 -> RGBColor[0.6, 0.4, 0.2], 9 -> 
         RGBColor[0.6, 0.4, 0.2], 14 -> RGBColor[0.6, 0.4, 0.2], 6 -> 
         RGBColor[0.6, 0.4, 0.2], 18 -> RGBColor[0.6, 0.4, 0.2], 2 -> 
         GrayLevel[0], 17 -> RGBColor[0.6, 0.4, 0.2], 12 -> 
         RGBColor[0.6, 0.4, 0.2], 7 -> RGBColor[0.6, 0.4, 0.2], 10 -> 
         RGBColor[0.6, 0.4, 0.2], 8 -> RGBColor[0.6, 0.4, 0.2], 11 -> 
         RGBColor[0.6, 0.4, 0.2], 13 -> RGBColor[0.6, 0.4, 0.2], 1 -> 
         GrayLevel[0], 3 -> GrayLevel[0], 4 -> GrayLevel[1], 16 -> 
         RGBColor[0.6, 0.4, 0.2]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{3.1927137864350597`, -1.868134944989576}, {
          3.8641485695534588`, -1.6471813059194158`}, {
          4.535661206716995, -1.8678982212868431`}}], 0.03772858800683991]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{3.1927137864350597`, -1.868134944989576}, {
          2.5212878576644036`, -2.0889085756540178`}, {
          1.8498891924502547`, -1.8680520471770146`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{4.535661206716995, -1.8678982212868431`}, {
          3.864226423598539, -2.0888518603570003`}, {
          3.1927137864350597`, -1.868134944989576}}], 0.03772858800683991]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{4.535661206716995, -1.8678982212868431`}, {
          5.067800189573065, -2.1490471008274206`}, {
          5.329180399109792, -2.691169758170623}}], 0.03772858800683991]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{4.535661206716995, -1.8678982212868431`}, {
          4.797374828064747, -1.3260386735557825`}, {
          5.329625965186892, -1.0452994420645205`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{
          1.8498891924502547`, -1.8680520471770146`}, {
          2.5213151212209004`, -1.647278416512567}, {
          3.1927137864350597`, -1.868134944989576}}], 0.03772858800683991]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{
          1.8498891924502547`, -1.8680520471770146`}, {
          1.5881648406311903`, -2.409827118441125}, {
          1.0559552097321796`, -2.6904919950408015`}}], 0.03772858800683991]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{
          1.8498891924502547`, -1.8680520471770146`}, {
          1.3168307216393202`, -1.5880661778678435`}, {
          1.0540202005174741`, -1.0463337251720617`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{5.329180399109792, -2.691169758170623}, {
          4.797041416253679, -2.4100208786300175`}, {
          4.535661206716995, -1.8678982212868431`}}], 0.03772858800683991]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{5.329180399109792, -2.691169758170623}, {
          5.565514008987425, -3.036960924907899}, {
          5.550464253725832, -3.4555282564304726`}}], 0.03772858800683991]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{5.329180399109792, -2.691169758170623}, {
          5.7560338765695, -2.6875611584029864`}, {
          6.101702608788947, -2.9380208173856817`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{5.329625965186892, -1.0452994420645205`}, {
          5.067912343839145, -1.5871589897956}, {
          4.535661206716995, -1.8678982212868431`}}], 0.03772858800683991]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{5.329625965186892, -1.0452994420645205`}, {
          5.67496224270669, -0.7947204138660823}, {
          6.10161901739817, -0.7980356143192111}}], 0.03772858800683991]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{5.329625965186892, -1.0452994420645205`}, {
          5.314781861058653, -0.6267550643655073}, {
          5.551267352113362, -0.2811044372123357}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{
          1.0559552097321796`, -2.6904919950408015`}, {
          1.3176795615512764`, -2.1487169237766537`}, {
          1.8498891924502547`, -1.8680520471770146`}}], 0.03772858800683991]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{
          1.0559552097321796`, -2.6904919950408015`}, {
          0.7102928660812298, -2.9406849104911688`}, {
          0.2836028587773365, -2.9368654305822277`}}], 
          0.03772858800683991]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{
          1.0559552097321796`, -2.6904919950408015`}, {
          1.0699322743792465`, -3.1092095656623355`}, {
          0.8326461991849143, -3.454484935189651}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{
          1.0540202005174741`, -1.0463337251720617`}, {
          1.5870786713284155`, -1.3263195944812436`}, {
          1.8498891924502547`, -1.8680520471770146`}}], 0.03772858800683991]}, 
        {RGBColor[0, 1, 0], 
         ArrowBox[BezierCurveBox[{{
          1.0540202005174741`, -1.0463337251720617`}, {
          0.6272126182488388, -1.0507449118486758`}, {
          0.2811044372123357, -0.8009584072702807}}], 0.03772858800683991]}, 
        {RGBColor[1, 0, 0], 
         ArrowBox[BezierCurveBox[{{
          1.0540202005174741`, -1.0463337251720617`}, {
          0.8165643880892001, -0.7010380380195682}, {
          0.8304169099094034, -0.282203366506685}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{0.2811044372123357, -0.8009584072702807}, {
          0.707912019480965, -0.7965472205936623}, {
          1.0540202005174741`, -1.0463337251720617`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{0.8304169099094034, -0.282203366506685}, {
          1.0678727223376807`, -0.6274990536591859}, {
          1.0540202005174741`, -1.0463337251720617`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{5.550464253725832, -3.4555282564304726`}, {
          5.3141306438481895`, -3.1097370896932355`}, {
          5.329180399109792, -2.691169758170623}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{6.101702608788947, -2.9380208173856817`}, {
          5.674849131329122, -2.941629417153361}, {
          5.329180399109792, -2.691169758170623}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{6.10161901739817, -0.7980356143192111}, {
          5.756282739878308, -1.0486146425176566`}, {
          5.329625965186892, -1.0452994420645205`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{5.551267352113362, -0.2811044372123357}, {
          5.566111456241614, -0.6996488149113039}, {
          5.329625965186892, -1.0452994420645205`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{
          0.2836028587773365, -2.9368654305822277`}, {
          0.6292652024282543, -2.686672515131866}, {
          1.0559552097321796`, -2.6904919950408015`}}], 0.03772858800683991]}, 
        {GrayLevel[0.5], 
         ArrowBox[BezierCurveBox[{{0.8326461991849143, -3.454484935189651}, {
          0.8186691345378347, -3.0357673645681094`}, {
          1.0559552097321796`, -2.6904919950408015`}}], 
          0.03772858800683991]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {GrayLevel[0], 
          DiskBox[{0.28110443721233586, -4.017737130855144}, 
           0.03772858800683991]}, 
         InsetBox["discard", 
          Offset[{2, 2}, {0.3188330252191758, -3.980008542848304}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[0], 
          DiskBox[{2.40870678587943, -4.017737130855144}, 
           0.03772858800683991]}, 
         InsetBox["discard", 
          Offset[{2, 2}, {2.44643537388627, -3.980008542848304}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[0], 
          DiskBox[{4.536309134546524, -4.017737130855144}, 
           0.03772858800683991]}, 
         InsetBox["discard", 
          Offset[{2, 2}, {4.574037722553364, -3.980008542848304}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {GrayLevel[1], 
          DiskBox[{3.1927137864350597, -1.868134944989576}, 
           0.03772858800683991]}, 
         InsetBox["halt", 
          Offset[{2, 2}, {3.2304423744418997, -1.8304063569827362}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{4.535661206716995, -1.8678982212868431}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {4.573389794723835, -1.8301696332800033}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{1.8498891924502547, -1.8680520471770146}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {1.8876177804570946, -1.8303234591701747}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{5.329180399109792, -2.691169758170623}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {5.3669089871166324, -2.653441170163783}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{5.329625965186892, -1.0452994420645205}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {5.367354553193732, -1.0075708540576807}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{1.0559552097321796, -2.6904919950408015}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {1.0936837977390195, -2.6527634070339614}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{1.0540202005174741, -1.0463337251720617}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {1.091748788524314, -1.0086051371652218}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{0.2811044372123357, -0.8009584072702807}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {0.3188330252191756, -0.7632298192634408}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{0.8304169099094034, -0.282203366506685}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {0.8681454979162433, -0.24447477849984506}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{5.550464253725832, -3.4555282564304726}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {5.588192841732672, -3.4177996684236325}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{6.101702608788947, -2.9380208173856817}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {6.139431196795787, -2.9002922293788416}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{6.10161901739817, -0.7980356143192111}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {6.1393476054050105, -0.7603070263123712}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{5.551267352113362, -0.2811044372123357}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {5.588995940120202, -0.24337584920549576}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{0.2836028587773365, -2.9368654305822277}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {0.3213314467841764, -2.8991368425753876}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0.6, 0.4, 0.2], 
          DiskBox[{0.8326461991849143, -3.454484935189651}, 
           0.03772858800683991]}, 
         InsetBox["wait", 
          Offset[{2, 2}, {0.8703747871917542, -3.416756347182811}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.818736682724078*^9, 3.850429680552321*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"218a7ffa-c918-4715-a051-40f4e7d34eb6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"growtreePPMstate", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", "=", "7"}], "}"}], ",", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"i", "\[Rule]", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"SELF", "\[Rule]", "number"}], ",", 
            RowBox[{"input", "\[Rule]", 
             RowBox[{"Max", "[", 
              RowBox[{"1", ",", 
               RowBox[{"i", "-", "1"}]}], "]"}]}], ",", 
            RowBox[{"left", "\[Rule]", "i"}], ",", 
            RowBox[{"right", "\[Rule]", "i"}]}], "|>"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "d"}], "}"}]}], "]"}], "~", "Join", "~", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"d", "+", "1"}], ")"}], "->", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"SELF", "\[Rule]", "start"}], ",", 
           RowBox[{"input", "\[Rule]", "d"}], ",", 
           RowBox[{"left", "\[Rule]", 
            RowBox[{"d", "+", "1"}]}], ",", 
           RowBox[{"right", "\[Rule]", 
            RowBox[{"d", "+", "1"}]}]}], "|>"}]}], "}"}]}], "|>"}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{"OneStepPPM", "[", 
    RowBox[{"growtreePPM", ",", "growtreePPMstate"}], "]"}], "]"}], ";", 
  RowBox[{"ShowStatePPM", "[", 
   RowBox[{"growtreePPM", ",", "growtreePPMstate", ",", 
    RowBox[{"ShowNodeState", "\[Rule]", "False"}], ",", 
    RowBox[{"ShowEdgeLoops", "\[Rule]", "False"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.818737231559972*^9, 3.818737306194635*^9}, {
  3.818737429327446*^9, 3.8187375716159143`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"ba894f29-5606-42d2-8b9c-570e786cf3a0"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[CompressedData["
1:eJwl1GO0EAYYBuB76+Zadi27Vcu23c21xS3b1pZt27ZbtWUsbdm27Z57+vG8
3znv//dL1qhtcJvAgICAsCLkhiI0QYQJ6QlHeCIQkUhEJgo/EJVoRCcGMYlF
bOIQl3jEJwEJSURifiQJSUlGclKQklSkJg1pSUd6MpCRn8hEZrLwM1nJRnZy
kJNc5CYPeclHfgpQkEIUpghFKUZxSlCSUpSmDGUpR3kqUJFKVKYKwVSlGtWp
QU1qUZs61OUXfqUe9WlAQxrRmN/4nSY0pRnNaUFLWtGaNrSlHe3pQEc60Zku
dKUb3elBT3rRmz70pR/9GcAf/MlABjGYIQxlGMMZwUhGMZoxjGUc45nARCYx
mSlMZRrTmcFMZjGbOcxlHvNZwEIWsZglLGUZy1nBSlaxmjWsZR3r2cBGNrGZ
LWxlG9vZwV/sZBe7+Zt/2MNe9rGfAxzkEIc5wlH+5RjHOcFJTvEf/3OaM5zl
HOe5wEUucZkrXOUa17nBTW5xmzvc5R73ecBDHvGYJzzlGc95wUte8Zo3vOUd
7/nARz7xmS98JWT8gYQiNEGECfz+F74B0E6BVw==
      "], {CompressedData["
1:eJxd1nXQ1UUUxvHnAjp2d4Ldndjdhd2KiQF2iwgGNrZYmJhgAIqKiIQg2JIm
YiOIYqBSeuZ8n9kd/2A+vPf+YvfsiduidbtWbZtImtGQwrn++zc3zlP9P5wX
5+c7XzMfLlxdEy6AC1bXhEvjCjzLz1wIF6nuDZfAJXmWn7kcLl/dGy6Gi7Mm
r21RXIZ3+F1L4bLVNeHauGH1zHBFXIN3+F3NsUW15nA1XJM9eC8r4arVGsK1
cJMqVuEquAF78F7WxfXYg/eyMq5exSpcHzcmdo7hprg5Z+MzWgc3qvYetsTt
q72Hu+H+xMIx2QcPrvYe7oj7VWsOD8Ijqr2Hu+OexM4x3Bb3rWIeboO7EAvH
pDW25yx9plvjTpyZz25n3Ls6o/BE7KCSM+EWuGUVw3A73KE6u3BX3IOz9Jnu
hYdWZxcegAcqc8K5cRSeocxd5/BmuBVn6TNthYcrc8K5cTyerMxF5+RVeJ1K
zoSH4bHVu8Ij8WhlbjnHjsHjqliF12BnYucYXoSXq+Re+DA+wt68x5vx9upM
w3fwR5XcCE/BNiq5FJ6PV1ZnF56EbZU14Fp4Ckdyxj7rS/EylZwP2+E5ypxz
7j2DPVRyL7wab1LmtHP7VDxPJZfCQ/AEldoMn8XXVWoqvBO7KnPROXk6nq2s
PdfgrdhNJVfD57CfsmZcO4/j8yo9IfwMJyhr2LV8Pz6k7BHuFXfjvcpe0xxf
wiEqNRJegp1Ucj48C89V1pJr6kJ8QKUXhb/gr8pe5p72N/5TxTz8BKcpa9i1
/D3+oFI74Wl4prImXZsX4G3Knuje+BU2aZRaC+/BB1V6QngDdlHWpGvzYxyj
UpvhtXiXsrZd4xdjR2UNu5avx1tUekh4Bd6h0nvDn3G6Mkedqx/iKJUeG76F
U1RqMHwCeyp7lnvX5/iFSo27Vtrwt2PuHA8/wG+UvdQ99Ua8jzOK+9qq9IIB
OEKltp1j4WvYX1lLrqkv8VtlL4j7zlXJzXdxtLLGY/3uTc6N8FOcqpLD7p3h
Y9i3OkPXhntU+DT2UvYs9643cJiyF7snv4gDlTPVs/U3/F0lBzqozMw3cbCy
x8Z+OrKuTqzLMyd8Hyep9ELPjPAjHKeSu51VZsrbOFM5wzzLXsDeKjnsWglf
waEqORCOx8nKnhzr8ewJX8VBypqI53ZRqcEnsY9KLw0bjbRpI2vetf8dTlTO
Ns+4r/EnZY1FnN3Lw0exu7KWIy7uoe4VXVV6/8s4XNlj47r7VHL/PRyr0qOj
V0a+PcjzuqnMhjka6ZyN7OVxfT27W1ZrdI56VnTnc9e4Y+ZZ61z1zPRs68Hf
PbnPMymcgbOVsyje4xxwLvfiub35vA/v9YxxjPqyXueIz9y13k9lFv6Fs5Sz
N9bZn+tcWwOUPcS1MZD1DOK5g/l8COtwTxzK+4fxHOf6cNY5guf6N5B7is/S
teXe5x7smvKMGEncR/H9aJ4zhu/H8rxx3OcZ6N7kWV/35tA9cLyypjzbJnC9
c/wb1vct17smPFPDP/BP5Yz1rFUjbdbI34ARh4nc/xPPn0QcJrMOz6gpxLn+
DRBOZV91r2v/vzWE04iDc6D+zRBO5z3OzZmc3yyun83n3oN7RMz+iFNT/m7G
93XNhf8C3a6Z2w==
       "], Null, CompressedData["
1:eJxTTMoPSmJkYGD4AyQYR8GIBQBOkwSh
       "]}, {
      EdgeStyle -> {DirectedEdge[146, 230, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[35, 27, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[59, 142, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[29, 15, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[230, 146, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[147, 235, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[163, 149, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[54, 93, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[144, 92, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[136, 201, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[202, 153, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[132, 236, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[14, 11, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[53, 29, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[10, 17, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[140, 108, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[112, 187, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[38, 69, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[79, 154, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[58, 31, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[28, 51, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[217, 134, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[118, 219, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[189, 71, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[157, 83, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[40, 67, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[55, 94, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[44, 65, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[39, 126, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[111, 66, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[102, 51, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[113, 223, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[16, 21, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[47, 81, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[50, 82, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[112, 82, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[175, 255, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[79, 151, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[160, 78, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[192, 110, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[10, 8, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[256, 232, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[61, 103, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[125, 57, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[104, 69, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[149, 72, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[42, 24, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[38, 22, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[75, 188, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[248, 188, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[79, 34, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[81, 122, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[48, 92, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[8, 9, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[162, 58, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[26, 46, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[90, 258, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[74, 36, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[29, 55, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[128, 196, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[108, 155, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[193, 128, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[63, 44, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[138, 96, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[87, 232, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[153, 72, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[82, 50, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[15, 29, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[153, 202, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[14, 23, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[41, 22, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[48, 108, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[71, 172, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[12, 30, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[89, 50, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[16, 13, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[153, 183, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[55, 29, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[50, 89, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[57, 43, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[17, 10, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[49, 54, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[32, 80, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[89, 146, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[18, 27, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[168, 144, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[244, 126, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[214, 115, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[179, 123, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[59, 147, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[83, 119, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[71, 32, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[130, 95, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[240, 84, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[35, 90, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[92, 144, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[45, 70, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[165, 76, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[159, 261, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[191, 124, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[166, 149, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[98, 39, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[97, 127, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[74, 145, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[90, 225, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[135, 94, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[125, 194, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[33, 21, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[56, 134, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[174, 101, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[41, 76, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[28, 47, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[188, 248, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[200, 124, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[112, 190, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[132, 52, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[90, 35, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[89, 118, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[220, 77, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[140, 237, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[81, 131, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[24, 42, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[119, 83, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[92, 48, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[11, 14, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[213, 99, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[126, 39, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[198, 100, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[26, 45, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[66, 114, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[88, 106, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[53, 88, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[96, 138, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[93, 215, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[82, 115, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[36, 25, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[61, 105, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[23, 14, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[27, 35, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[238, 98, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[96, 143, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[20, 31, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[50, 30, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[10, 12, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[171, 67, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[173, 67, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[72, 149, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[83, 47, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[51, 28, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[159, 74, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[204, 60, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[52, 137, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[206, 155, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[60, 204, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[164, 120, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[35, 84, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[115, 82, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[98, 238, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[36, 72, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[235, 147, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[9, 8, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[201, 136, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[85, 250, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[145, 257, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[161, 58, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[137, 52, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[17, 19, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[101, 63, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[254, 188, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[172, 71, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[211, 93, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[77, 226, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[142, 186, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[146, 234, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[234, 146, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[247, 86, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[75, 46, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[40, 20, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[68, 141, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[25, 48, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[131, 81, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[12, 25, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[37, 78, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[73, 45, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[36, 74, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[139, 92, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[148, 97, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[66, 111, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[28, 15, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[177, 137, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[132, 207, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[85, 249, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[102, 221, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[44, 30, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[86, 218, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[113, 229, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[45, 73, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[39, 98, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[122, 81, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[257, 145, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[184, 120, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[38, 61, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[57, 125, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[106, 88, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[98, 251, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[88, 53, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[205, 115, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[9, 13, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[239, 100, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[107, 208, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[32, 71, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[232, 87, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[27, 18, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[78, 160, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[64, 31, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[142, 195, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[95, 130, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[203, 110, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[100, 198, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[85, 33, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[15, 28, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[51, 97, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[58, 162, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[84, 241, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[39, 27, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[94, 150, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[224, 140, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[120, 184, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[11, 9, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[13, 18, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[118, 242, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[236, 132, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[29, 53, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[72, 153, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[8, 10, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[154, 79, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[183, 153, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[93, 54, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[187, 112, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[186, 142, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[223, 113, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[68, 41, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[231, 245, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[62, 37, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[69, 116, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[212, 64, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[124, 191, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[87, 231, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[57, 120, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[139, 199, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[176, 76, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[63, 110, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[95, 121, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[231, 87, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[225, 90, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[9, 11, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[137, 177, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[108, 140, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[150, 94, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[208, 107, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[134, 210, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[30, 44, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[194, 125, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[68, 133, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[144, 168, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[65, 123, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[61, 38, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[110, 192, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[54, 91, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[18, 13, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[120, 164, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[101, 167, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[86, 247, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[88, 109, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[180, 137, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[149, 163, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[53, 95, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[64, 212, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[181, 144, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[51, 102, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[67, 40, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[70, 45, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[99, 213, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[22, 38, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[22, 41, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[226, 77, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[31, 20, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[41, 68, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[46, 87, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[145, 74, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[258, 90, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[45, 26, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[100, 239, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[195, 142, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[77, 33, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[94, 135, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[128, 193, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[62, 117, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[42, 128, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[31, 58, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[251, 98, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[97, 51, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[108, 48, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[44, 63, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[155, 216, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[73, 113, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[84, 240, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[19, 17, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[95, 53, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[121, 95, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[80, 32, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[178, 125, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[145, 259, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[260, 232, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[115, 205, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[123, 170, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[80, 182, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[26, 17, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[82, 112, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[77, 220, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[70, 99, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[94, 55, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[149, 166, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[46, 26, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[128, 42, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[62, 129, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[117, 62, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[21, 33, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[87, 46, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[259, 145, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[27, 39, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[142, 59, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[126, 243, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[182, 80, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[136, 56, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[146, 89, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[156, 78, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[16, 20, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[43, 19, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[210, 134, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[190, 112, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[114, 66, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[12, 10, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[147, 227, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[113, 73, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[188, 254, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[170, 123, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[109, 88, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[48, 25, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[242, 118, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[99, 70, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[228, 107, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[78, 156, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[232, 260, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[141, 68, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[83, 157, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[67, 171, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[19, 43, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[137, 180, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[69, 38, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[25, 12, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[144, 181, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[246, 231, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[15, 11, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[24, 18, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[116, 69, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[250, 85, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[91, 152, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[40, 60, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[231, 246, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[93, 211, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[233, 60, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[52, 24, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[107, 228, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[19, 49, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[188, 75, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[20, 16, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[54, 49, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[261, 159, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[17, 26, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[84, 35, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[140, 224, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[245, 231, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[101, 174, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[120, 57, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[55, 96, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[78, 37, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[118, 89, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[47, 83, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[175, 252, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[91, 158, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[152, 91, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[229, 113, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[67, 173, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[75, 175, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[199, 139, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[69, 104, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[127, 97, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[30, 12, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[91, 54, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[136, 253, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[123, 179, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[56, 43, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[134, 217, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[215, 93, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[158, 91, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[241, 84, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[14, 22, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[252, 175, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[65, 124, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[102, 222, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[60, 40, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[103, 61, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[99, 209, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[151, 79, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[124, 200, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[47, 28, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[100, 42, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[63, 101, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[22, 14, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[134, 56, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[46, 75, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[133, 68, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[115, 214, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[232, 256, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[86, 70, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[58, 161, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[76, 165, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[76, 176, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[216, 155, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[222, 102, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[227, 147, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[59, 49, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[237, 140, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[37, 62, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[42, 100, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[197, 80, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[143, 96, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[18, 24, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[139, 185, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[34, 66, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[23, 37, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[11, 15, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[23, 34, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[147, 59, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[13, 16, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[92, 139, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[97, 148, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[218, 86, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[34, 23, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[65, 44, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[107, 73, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[185, 139, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[262, 159, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[76, 41, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[70, 86, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[30, 50, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[56, 136, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[73, 107, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[43, 56, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[125, 178, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[249, 85, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[25, 36, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[175, 75, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[66, 34, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[110, 63, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[31, 64, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[37, 23, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[43, 57, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[24, 52, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[49, 59, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[20, 40, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[219, 118, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[221, 102, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[80, 197, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[60, 233, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[253, 136, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[49, 19, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[32, 21, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[110, 203, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[123, 65, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[52, 132, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[72, 36, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[167, 101, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[96, 55, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[243, 126, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[155, 206, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[126, 244, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[21, 16, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[209, 99, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[196, 128, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[33, 77, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[129, 62, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[159, 262, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[71, 189, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[21, 32, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[13, 9, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[124, 65, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[81, 47, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[64, 169, 1] -> {
           RGBColor[0, 1, 0]}, DirectedEdge[155, 108, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[207, 132, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[74, 159, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[33, 85, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[169, 64, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[34, 79, 1] -> {
           RGBColor[1, 0, 0]}, DirectedEdge[255, 175, 1] -> {
           GrayLevel[0.5]}, DirectedEdge[105, 61, 1] -> {
           GrayLevel[0.5]}}, VertexSize -> {Small}, 
       VertexStyle -> {
        183 -> RGBColor[0.6, 0.4, 0.2], 157 -> RGBColor[0.6, 0.4, 0.2], 254 -> 
         RGBColor[0.6, 0.4, 0.2], 25 -> RGBColor[0.6, 0.4, 0.2], 55 -> 
         RGBColor[0.6, 0.4, 0.2], 105 -> RGBColor[0.6, 0.4, 0.2], 90 -> 
         RGBColor[0.6, 0.4, 0.2], 27 -> RGBColor[0.6, 0.4, 0.2], 15 -> 
         RGBColor[0.6, 0.4, 0.2], 209 -> RGBColor[0.6, 0.4, 0.2], 233 -> 
         RGBColor[0.6, 0.4, 0.2], 98 -> RGBColor[0.6, 0.4, 0.2], 38 -> 
         RGBColor[0.6, 0.4, 0.2], 102 -> RGBColor[0.6, 0.4, 0.2], 99 -> 
         RGBColor[0.6, 0.4, 0.2], 174 -> RGBColor[0.6, 0.4, 0.2], 71 -> 
         RGBColor[0.6, 0.4, 0.2], 41 -> RGBColor[0.6, 0.4, 0.2], 114 -> 
         RGBColor[0.6, 0.4, 0.2], 260 -> RGBColor[0.6, 0.4, 0.2], 223 -> 
         RGBColor[0.6, 0.4, 0.2], 172 -> RGBColor[0.6, 0.4, 0.2], 152 -> 
         RGBColor[0.6, 0.4, 0.2], 165 -> RGBColor[0.6, 0.4, 0.2], 75 -> 
         RGBColor[0.6, 0.4, 0.2], 64 -> RGBColor[0.6, 0.4, 0.2], 217 -> 
         RGBColor[0.6, 0.4, 0.2], 192 -> RGBColor[0.6, 0.4, 0.2], 63 -> 
         RGBColor[0.6, 0.4, 0.2], 85 -> RGBColor[0.6, 0.4, 0.2], 261 -> 
         RGBColor[0.6, 0.4, 0.2], 160 -> RGBColor[0.6, 0.4, 0.2], 3 -> 
         GrayLevel[0], 145 -> RGBColor[0.6, 0.4, 0.2], 231 -> 
         RGBColor[0.6, 0.4, 0.2], 147 -> RGBColor[0.6, 0.4, 0.2], 158 -> 
         RGBColor[0.6, 0.4, 0.2], 159 -> RGBColor[0.6, 0.4, 0.2], 86 -> 
         RGBColor[0.6, 0.4, 0.2], 181 -> RGBColor[0.6, 0.4, 0.2], 109 -> 
         RGBColor[0.6, 0.4, 0.2], 94 -> RGBColor[0.6, 0.4, 0.2], 61 -> 
         RGBColor[0.6, 0.4, 0.2], 84 -> RGBColor[0.6, 0.4, 0.2], 245 -> 
         RGBColor[0.6, 0.4, 0.2], 76 -> RGBColor[0.6, 0.4, 0.2], 21 -> 
         RGBColor[0.6, 0.4, 0.2], 169 -> RGBColor[0.6, 0.4, 0.2], 241 -> 
         RGBColor[0.6, 0.4, 0.2], 87 -> RGBColor[0.6, 0.4, 0.2], 148 -> 
         RGBColor[0.6, 0.4, 0.2], 95 -> RGBColor[0.6, 0.4, 0.2], 133 -> 
         RGBColor[0.6, 0.4, 0.2], 179 -> RGBColor[0.6, 0.4, 0.2], 243 -> 
         RGBColor[0.6, 0.4, 0.2], 72 -> RGBColor[0.6, 0.4, 0.2], 251 -> 
         RGBColor[0.6, 0.4, 0.2], 218 -> RGBColor[0.6, 0.4, 0.2], 42 -> 
         RGBColor[0.6, 0.4, 0.2], 103 -> RGBColor[0.6, 0.4, 0.2], 66 -> 
         RGBColor[0.6, 0.4, 0.2], 1 -> GrayLevel[0], 24 -> 
         RGBColor[0.6, 0.4, 0.2], 54 -> RGBColor[0.6, 0.4, 0.2], 255 -> 
         RGBColor[0.6, 0.4, 0.2], 200 -> RGBColor[0.6, 0.4, 0.2], 220 -> 
         RGBColor[0.6, 0.4, 0.2], 190 -> RGBColor[0.6, 0.4, 0.2], 146 -> 
         RGBColor[0.6, 0.4, 0.2], 262 -> RGBColor[0.6, 0.4, 0.2], 208 -> 
         RGBColor[0.6, 0.4, 0.2], 212 -> RGBColor[0.6, 0.4, 0.2], 4 -> 
         GrayLevel[0], 7 -> GrayLevel[0], 140 -> RGBColor[0.6, 0.4, 0.2], 205 -> 
         RGBColor[0.6, 0.4, 0.2], 100 -> RGBColor[0.6, 0.4, 0.2], 123 -> 
         RGBColor[0.6, 0.4, 0.2], 162 -> RGBColor[0.6, 0.4, 0.2], 12 -> 
         RGBColor[0.6, 0.4, 0.2], 65 -> RGBColor[0.6, 0.4, 0.2], 228 -> 
         RGBColor[0.6, 0.4, 0.2], 211 -> RGBColor[0.6, 0.4, 0.2], 232 -> 
         RGBColor[0.6, 0.4, 0.2], 8 -> GrayLevel[1], 182 -> 
         RGBColor[0.6, 0.4, 0.2], 127 -> RGBColor[0.6, 0.4, 0.2], 136 -> 
         RGBColor[0.6, 0.4, 0.2], 57 -> RGBColor[0.6, 0.4, 0.2], 74 -> 
         RGBColor[0.6, 0.4, 0.2], 184 -> RGBColor[0.6, 0.4, 0.2], 196 -> 
         RGBColor[0.6, 0.4, 0.2], 177 -> RGBColor[0.6, 0.4, 0.2], 113 -> 
         RGBColor[0.6, 0.4, 0.2], 259 -> RGBColor[0.6, 0.4, 0.2], 242 -> 
         RGBColor[0.6, 0.4, 0.2], 219 -> RGBColor[0.6, 0.4, 0.2], 244 -> 
         RGBColor[0.6, 0.4, 0.2], 37 -> RGBColor[0.6, 0.4, 0.2], 170 -> 
         RGBColor[0.6, 0.4, 0.2], 43 -> RGBColor[0.6, 0.4, 0.2], 246 -> 
         RGBColor[0.6, 0.4, 0.2], 39 -> RGBColor[0.6, 0.4, 0.2], 124 -> 
         RGBColor[0.6, 0.4, 0.2], 130 -> RGBColor[0.6, 0.4, 0.2], 135 -> 
         RGBColor[0.6, 0.4, 0.2], 106 -> RGBColor[0.6, 0.4, 0.2], 58 -> 
         RGBColor[0.6, 0.4, 0.2], 11 -> RGBColor[0.6, 0.4, 0.2], 225 -> 
         RGBColor[0.6, 0.4, 0.2], 153 -> RGBColor[0.6, 0.4, 0.2], 51 -> 
         RGBColor[0.6, 0.4, 0.2], 194 -> RGBColor[0.6, 0.4, 0.2], 48 -> 
         RGBColor[0.6, 0.4, 0.2], 20 -> RGBColor[0.6, 0.4, 0.2], 33 -> 
         RGBColor[0.6, 0.4, 0.2], 168 -> RGBColor[0.6, 0.4, 0.2], 224 -> 
         RGBColor[0.6, 0.4, 0.2], 115 -> RGBColor[0.6, 0.4, 0.2], 173 -> 
         RGBColor[0.6, 0.4, 0.2], 45 -> RGBColor[0.6, 0.4, 0.2], 23 -> 
         RGBColor[0.6, 0.4, 0.2], 22 -> RGBColor[0.6, 0.4, 0.2], 195 -> 
         RGBColor[0.6, 0.4, 0.2], 2 -> GrayLevel[0], 118 -> 
         RGBColor[0.6, 0.4, 0.2], 60 -> RGBColor[0.6, 0.4, 0.2], 16 -> 
         RGBColor[0.6, 0.4, 0.2], 139 -> RGBColor[0.6, 0.4, 0.2], 79 -> 
         RGBColor[0.6, 0.4, 0.2], 210 -> RGBColor[0.6, 0.4, 0.2], 89 -> 
         RGBColor[0.6, 0.4, 0.2], 36 -> RGBColor[0.6, 0.4, 0.2], 120 -> 
         RGBColor[0.6, 0.4, 0.2], 247 -> RGBColor[0.6, 0.4, 0.2], 189 -> 
         RGBColor[0.6, 0.4, 0.2], 191 -> RGBColor[0.6, 0.4, 0.2], 143 -> 
         RGBColor[0.6, 0.4, 0.2], 226 -> RGBColor[0.6, 0.4, 0.2], 239 -> 
         RGBColor[0.6, 0.4, 0.2], 138 -> RGBColor[0.6, 0.4, 0.2], 131 -> 
         RGBColor[0.6, 0.4, 0.2], 171 -> RGBColor[0.6, 0.4, 0.2], 117 -> 
         RGBColor[0.6, 0.4, 0.2], 52 -> RGBColor[0.6, 0.4, 0.2], 128 -> 
         RGBColor[0.6, 0.4, 0.2], 229 -> RGBColor[0.6, 0.4, 0.2], 32 -> 
         RGBColor[0.6, 0.4, 0.2], 31 -> RGBColor[0.6, 0.4, 0.2], 68 -> 
         RGBColor[0.6, 0.4, 0.2], 73 -> RGBColor[0.6, 0.4, 0.2], 82 -> 
         RGBColor[0.6, 0.4, 0.2], 35 -> RGBColor[0.6, 0.4, 0.2], 88 -> 
         RGBColor[0.6, 0.4, 0.2], 50 -> RGBColor[0.6, 0.4, 0.2], 19 -> 
         RGBColor[0.6, 0.4, 0.2], 17 -> RGBColor[0.6, 0.4, 0.2], 187 -> 
         RGBColor[0.6, 0.4, 0.2], 116 -> RGBColor[0.6, 0.4, 0.2], 96 -> 
         RGBColor[0.6, 0.4, 0.2], 121 -> RGBColor[0.6, 0.4, 0.2], 104 -> 
         RGBColor[0.6, 0.4, 0.2], 14 -> RGBColor[0.6, 0.4, 0.2], 198 -> 
         RGBColor[0.6, 0.4, 0.2], 5 -> GrayLevel[0], 216 -> 
         RGBColor[0.6, 0.4, 0.2], 258 -> RGBColor[0.6, 0.4, 0.2], 166 -> 
         RGBColor[0.6, 0.4, 0.2], 34 -> RGBColor[0.6, 0.4, 0.2], 97 -> 
         RGBColor[0.6, 0.4, 0.2], 132 -> RGBColor[0.6, 0.4, 0.2], 93 -> 
         RGBColor[0.6, 0.4, 0.2], 81 -> RGBColor[0.6, 0.4, 0.2], 137 -> 
         RGBColor[0.6, 0.4, 0.2], 69 -> RGBColor[0.6, 0.4, 0.2], 9 -> 
         RGBColor[0.6, 0.4, 0.2], 161 -> RGBColor[0.6, 0.4, 0.2], 150 -> 
         RGBColor[0.6, 0.4, 0.2], 13 -> RGBColor[0.6, 0.4, 0.2], 230 -> 
         RGBColor[0.6, 0.4, 0.2], 30 -> RGBColor[0.6, 0.4, 0.2], 235 -> 
         RGBColor[0.6, 0.4, 0.2], 149 -> RGBColor[0.6, 0.4, 0.2], 203 -> 
         RGBColor[0.6, 0.4, 0.2], 59 -> RGBColor[0.6, 0.4, 0.2], 207 -> 
         RGBColor[0.6, 0.4, 0.2], 213 -> RGBColor[0.6, 0.4, 0.2], 28 -> 
         RGBColor[0.6, 0.4, 0.2], 80 -> RGBColor[0.6, 0.4, 0.2], 122 -> 
         RGBColor[0.6, 0.4, 0.2], 257 -> RGBColor[0.6, 0.4, 0.2], 215 -> 
         RGBColor[0.6, 0.4, 0.2], 197 -> RGBColor[0.6, 0.4, 0.2], 214 -> 
         RGBColor[0.6, 0.4, 0.2], 47 -> RGBColor[0.6, 0.4, 0.2], 62 -> 
         RGBColor[0.6, 0.4, 0.2], 77 -> RGBColor[0.6, 0.4, 0.2], 163 -> 
         RGBColor[0.6, 0.4, 0.2], 126 -> RGBColor[0.6, 0.4, 0.2], 237 -> 
         RGBColor[0.6, 0.4, 0.2], 204 -> RGBColor[0.6, 0.4, 0.2], 175 -> 
         RGBColor[0.6, 0.4, 0.2], 180 -> RGBColor[0.6, 0.4, 0.2], 186 -> 
         RGBColor[0.6, 0.4, 0.2], 119 -> RGBColor[0.6, 0.4, 0.2], 101 -> 
         RGBColor[0.6, 0.4, 0.2], 238 -> RGBColor[0.6, 0.4, 0.2], 249 -> 
         RGBColor[0.6, 0.4, 0.2], 78 -> RGBColor[0.6, 0.4, 0.2], 201 -> 
         RGBColor[0.6, 0.4, 0.2], 236 -> RGBColor[0.6, 0.4, 0.2], 253 -> 
         RGBColor[0.6, 0.4, 0.2], 227 -> RGBColor[0.6, 0.4, 0.2], 154 -> 
         RGBColor[0.6, 0.4, 0.2], 40 -> RGBColor[0.6, 0.4, 0.2], 221 -> 
         RGBColor[0.6, 0.4, 0.2], 142 -> RGBColor[0.6, 0.4, 0.2], 156 -> 
         RGBColor[0.6, 0.4, 0.2], 107 -> RGBColor[0.6, 0.4, 0.2], 112 -> 
         RGBColor[0.6, 0.4, 0.2], 67 -> RGBColor[0.6, 0.4, 0.2], 141 -> 
         RGBColor[0.6, 0.4, 0.2], 56 -> RGBColor[0.6, 0.4, 0.2], 10 -> 
         RGBColor[0.6, 0.4, 0.2], 206 -> RGBColor[0.6, 0.4, 0.2], 240 -> 
         RGBColor[0.6, 0.4, 0.2], 164 -> RGBColor[0.6, 0.4, 0.2], 234 -> 
         RGBColor[0.6, 0.4, 0.2], 53 -> RGBColor[0.6, 0.4, 0.2], 155 -> 
         RGBColor[0.6, 0.4, 0.2], 26 -> RGBColor[0.6, 0.4, 0.2], 134 -> 
         RGBColor[0.6, 0.4, 0.2], 18 -> RGBColor[0.6, 0.4, 0.2], 250 -> 
         RGBColor[0.6, 0.4, 0.2], 29 -> RGBColor[0.6, 0.4, 0.2], 129 -> 
         RGBColor[0.6, 0.4, 0.2], 193 -> RGBColor[0.6, 0.4, 0.2], 199 -> 
         RGBColor[0.6, 0.4, 0.2], 178 -> RGBColor[0.6, 0.4, 0.2], 110 -> 
         RGBColor[0.6, 0.4, 0.2], 222 -> RGBColor[0.6, 0.4, 0.2], 151 -> 
         RGBColor[0.6, 0.4, 0.2], 167 -> RGBColor[0.6, 0.4, 0.2], 176 -> 
         RGBColor[0.6, 0.4, 0.2], 92 -> RGBColor[0.6, 0.4, 0.2], 188 -> 
         RGBColor[0.6, 0.4, 0.2], 108 -> RGBColor[0.6, 0.4, 0.2], 46 -> 
         RGBColor[0.6, 0.4, 0.2], 125 -> RGBColor[0.6, 0.4, 0.2], 49 -> 
         RGBColor[0.6, 0.4, 0.2], 83 -> RGBColor[0.6, 0.4, 0.2], 111 -> 
         RGBColor[0.6, 0.4, 0.2], 202 -> RGBColor[0.6, 0.4, 0.2], 185 -> 
         RGBColor[0.6, 0.4, 0.2], 252 -> RGBColor[0.6, 0.4, 0.2], 256 -> 
         RGBColor[0.6, 0.4, 0.2], 144 -> RGBColor[0.6, 0.4, 0.2], 70 -> 
         RGBColor[0.6, 0.4, 0.2], 44 -> RGBColor[0.6, 0.4, 0.2], 248 -> 
         RGBColor[0.6, 0.4, 0.2], 91 -> RGBColor[0.6, 0.4, 0.2], 6 -> 
         GrayLevel[0]}}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw8d3c81e8bt8oKmQfncCbHOOY5x1ZyISMjCpUiogglCS0hVFQaZGdUKiWR
llFcSqIiSVJp2EVp2cn3+Tyv1/P8/jqv9+se53Pf93W9B8t/55qtCwUEBJqY
AgL/93fSuDHo6AMN6GPNmmdJGeHh2XuhsZ8GLf8/5rI79rpelvnf+NFihbR1
Dsz/YdU9gZHHJU3+hwNbdlnc4+v/D4+WnUr5427wP1ys2tXzt5kDDSrSpf6P
2JhnbNKQcloVWK6GpU/ZbFQRTJPqEeDCC9q7xkh/NZxNWpf67BEduskXpnzX
aeKK7LB/bSwe7PW42+ekr4UV3wxKvOVY8DTp4WE5Oh2X2P/Xte0SFXL2HmWZ
3NPBcc6kfsq0PHzqVowf38fBpUyvO+1MOmh9lF315joFvULwY5UTH1ap6tNe
3WOh6sa9MY5v6PA59sb6kzMkTG5Y+b7gHx/e1VZZS5UpY4un1dCCQ2QocrQJ
XulOwZQ/Y6/232JAVd3LTRuaSBhLyhoZN6XB7VZ/mr0MF+ne3h++j5FBarOE
p9wyfYzcmKEqvIsJn2n3Ttwok8CLr922aw5zwcM/I6QqRg/pYwkS4ScN4b3L
DrG/yUy8tNT/0xpTCkzHjh8375XEDe0vMy6MS0NtmF+VKp+De/ealm2MWwL2
mQdOr5jTQpHNerddh/hQIHPbePybNraVql1Z91weNo3cSX5SoYS9lW4eTe5M
iLnn5ON1Wxav/amf0olmgofkAZdoa2ncVzNdcNCZDMZv/zw75svFebltLj7n
5IEsnf7uiYwoTr50O3uTwYVv8+Jth+O5uPpxXPBjZXmwddnce7uAiz9Gi0Pk
LRnA6SILmsrwMHlQCvVY8pD9d/yl4mphrLmTf8eoXQ6cJWy90slkLNmWc/aq
LhWGPoLyzwAeKu47WCLtpwLZ7iH9ZqNC2PMwxL1MzRBiBJe+d7miiBs+cfyg
xQAeAzN8k6kOUnXSbw/mGwGZXhVSXEtF8uTqF6ZRxtB04o369ydMFOx5XPZ7
oyT8FPbROL9ZC629cn67OvIg3O9qy2QfF4eVV1p0N/NhehNPcihcHvk9E6/f
hRqCdtbBkN/Vuvj597hCx/7FcFaMQ+o00USvC8GeZbEMKHFW+LdFdiGKXmpN
s9IQgjmj0Y3OjToYo3TpmyqXD0mvhbuZW2Rx258TAz0iC2HceuefGQ9tNFuc
H3WHaQRrIq0jNtcponPatfSiZkO4HCgYtFZUDt+cWnapmLif9uXXYlyXK2Fm
iISgxjwfRlp8l6q7SKPKxM6LNrIysD0kfOPdWgU84RxqkribCdzmx8uGO3go
/a4x35ciC9bnnqeMqPIwM014Z9p5Q+jY8ytbzkkbt/RETmd7kqBnIcl61X0q
rli20eNrpwFc7Slrme3WxZlHE7cqlirCWUHetKEbF/kPPU7ttZCGWJPjKQwZ
MrrvNLi8wpwKs+cdL7u78TFt+abqOhJRP+HXPjIrebi2xOvgiVfGcFq10SM8
Qwl3BGvJCMUzgL/qTMbfm9JIO1j8/vRlfTjJGJsKyufhz6Obm+dPGcFJ9eb9
R+6SiXrONg0r1QO92yEPvCk8BNrFap3rJrD/8Fyf6WUWerdLwYd8JbjLW+Rg
D3zcTBqPFjdnQfOH5TvOxokjJlDcD2jIQUV40UVmBA+XXpg0bv+kCLoxim3n
if1I2rKKKyNY8E3k9TfOaVkkN9x9lPBxMSBl1/rcq1o4cs9ad/VuIxB7JzzW
PaGLWw6/i6leKQnPdIpOyF7Xxtg99/pOnSdBeDF/5w3zBei9tb1s32EmxKvO
tPe6LkaRi4KPrheagIrpu9Qd/1GwM3Pki9YbE/DzPqQ+Bkz027trQHj3P8u4
8YygoEJdjBF3/ye91wj8m5ueV9Tr46bhZ5V9SrIQ/jXyj9YPIbSkrS0+eZkH
k5eKrh2OlsZKncNb0u7x4LKpjWL3CHF/j1+Gbxnngd9vI5HNc1LYbbTrz2H2
hKW3+Sp171/aKBHadKg0QwBWqZyYlLXUw5JZ+1B2wbilqLCzVqu6NnaeGyl5
LykIN0O2b3G10sA0pyRtv+8yUPHjSnFJywL81aAtql9gAo1fUksS7cn462Z6
0eEUVXA7pK57TXQh2ile1b9pYgRqU4eOD2/WxrNu3yIqDi6Eukh9lV5hTaQ8
KXU6Z0rw8+WheBUTPjrt2hzd85YBfn8+Mby5fDxZdS8t+CYTrn41bjby52PF
+yPFPwMmLO+K3X174asuepPM3j1aawTcR+3tF50U8EZyj3JeMg+MdToyb2vx
cTq8c4c/f8LyQUUT13StHlKeSq96sckIElsOOpuf1MKGdn7KZnkFeE4Rehum
ycUnasr7W3SNQW9kpNYwVxefTgief/TWCD5uisxOLJdHv6Zt3maOCtCSPRlT
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
hm8fMHwHiDx3N06zZdcUFdUDX99+1cSHT/91/NfTSMV/0v4e3i/4sMJm7vWH
dCr66Ttz93Xz4YalyaozW6g4Lh3VsTyRD9+HnS0ld7Bw5fuxkoQzfOCQ13W9
2sDCp5PLd/OL+KDpOzP1byULX9o7xdmW8yGreT4v05yFH6SNPlcS/1+XyOu9
rMPCrqbzu3e18eFR/LiICZOF86dUh/d85MPy+347VsmzsMms7sH9MT4U0b4e
+SPOwv1hEcZmXQZwWc/IuT2NiTcyzNoqhwwATr66KHqcyItlgoHrpgzgknpD
Z3cSE/8mGanSRA3B3/9+8op4Jlp8SlWcJRtC3MUPUasOMvHyNWn7AY4hxLrM
eU8fYKLZxtGyl+aGYCZ0SdQmhol7vwTYVTkZwodH5531YploHTXNciX4mT0u
YLH9pTwmNdYcjqtkQJDZSKfMYgVkWx03n3zHgIIdb5NqrBVwY2neJRcBJjww
tuesiFXAVx1fjK/LMKE3/suh47UKGMyLSD7BIvLNuVS77bMKqB39wmBQn+Dn
nPxlDeaK+OzGgZqyZUQ+0mW5bIlRxF16tk5aQ0xQC/BOy2Er4wbby8obCX52
tDv+OSBIGY+YJWd8n2WCZnnbZ91SZWzbtliyZyELbFdrh7/4oYyc3IkO1mIW
TMwJfmMYUVHlWapu7RIWHGvXdZzcT9SDcu2WS9IseFbL53EaqOhxtLTuowwL
Lv/ukj4lQkPVHWJb7xD5UnKg60cHn4QVZAUhAQJLZVikJQuQ8O3ey6/utNOh
WPC874o2Ofw0ktj6upMOE0eEldnn5JDLjjrk854Ow3t0I2xD5NBl802ZlQNE
Xq2bG31sKoe2YVrG6QSfPVgj8uahiBye1C2zNCL47IMC39TrjSxar2k47drG
gDi3PU979KWR9WVku9VHBuSnPXXiCEjjHf7Pa/t+MsCm5Pfa0xekkOaTi9EL
mXCh223tNTspZA92BTcvIfLqq/n5rm+SKDB5hKatxITkd5R4pwxJ1LfacCRL
gwlpJOnypSCJ3SE3bgoZM0F28seXt9+XoLD7suU/xejw9VQWh5JDwgCBQNme
NzSoDP7+d08cCZ/t1Nsre5kGYvwFVcEBJAx9IzhSQeSJHU6us/MrSER/aS/p
JPKNIc/88Uo2CZfcqy/KIvLS7jq/aJ8FJJxLctuhMEbkhw/qtat65LDk1rxh
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
FgxTsvz0WajHOvk014wFsj5M48olLHSKO9iXbcUC4wcTq3SUWVj59tWa+dUs
0BOv3PRJloVbFGWC7uawAMNvdFA0DNC8pI1WUsCCpB7TtxoyBviuZ+XJiXMs
OPYx9uydf/o4iSXyRRUs8PlwdqXAlD5K7Maq+hoWSC7RvD41rI/aZeeX6jWw
YDln+kDmI30sPzIrx3ebBd/C7ra8b9VHF4nifv0OFjgEdykJ1enjr41bkrQ0
WLA6R8kltISFwsnhaScJrrt63/1eJQutPq3uzydYdSdQVetYWMOo8jch2G7O
vzjqFlHPplwiQtVZcHJvwN877Sz0uHQpciWdYKsaW+GHLHQ4FaFco8qC9qNP
ipf3sfD1wwOuDTQWlDJDNJyHWNirHnhv3YIB7BfS59itZ6PIitzbuT8NYOWD
BxT7LWxsn/jAQ/tmANtO1Z/V92DjX1GnB6OfDUDgR6faF382Gog2Pph4awAa
1WZ8ycFsJEs+VDcfNoCezrVdnyPZyB7P2jbQbwCNjh9kNePYuGL5xYi7Dw0g
18Q1b8lBNvJkaf3ik2GB9KuK/er5LDx82HP5B3EW+L+SJ/EWs/CE7EJgijBx
3+W5rlXnWej/kihUfCyQsh39oUb4p2e9k+HHeQPQT6244lrDwoKAkoz8GQPg
ikXv3nSNhccWQzyevDeAXtnDVpKNLFzu5iVxesgA7lvlOCc3szB8NPsNv5kB
jKvfopX/ZmGUvp20j74BsEoOPXtG5O+pqoPn3TUI+5LTrzfzsjHA/92tn/IG
sCtyS4irIBvP/B69ZCVqAHljfIPlImy0VNg0v3xBH24N7BQqF2djxpyI79SU
PqRUOjI3S7HxAZre9h/VB/GvEdevyLBR9/bAZXMPebiS5/Qkcx8LEw6uulm5
Wx5+lTM1DoYT5/mvtO1xkjz8t3Gq7coOFvouHt1dmicPFJmmT/+v5/rCg0Hy
1fLw6eXamk7i/Zx/1rtb+Z483BcbXmhxJOrx5aWW5a/lYSzfJ39xDQtpKc63
yn/Lg53fSYUTwEIR97UHNxD1Pu/KpcBH1wzQQj+npqGIAr6BSj+KygxwvUHE
rfAmClAq7fbR8w2QGXRIPGyQAnc4v797HDHAB18k1579QwH3GMNpD0L/MI2b
fSaVifwf8+KwVpQByh7jL7Em9Jna6xD/tp0G+ON829VjPlSQada6yPY2QFy7
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
6niB+Sr+5CceyAYcMzck4v1lnvg0n+Aj0tL/takOBS8fO7BpAcHHi4Gi69oy
FKKfey+//EHUE+IeD/5SR0Xbd63PfvKAv2a4LG1AHaOqIoWn//DAIa0tY1Wb
OiY8713oJcAH3/tbu39VquMj+sV5YTE+XC74YlGer45PREpbFVz5cI8lPo81
aqj8U0tyeCsf3NUam64WquHxdA32qBcfnhRUn712Qw05sYzSBfv4kLmMrNac
pIYBgqljwf4E3yda7jCiiH2oNlhp+jAf9iWKlbQcU0NpmsbGtDA+SB8N/FUY
oIZyKqwKpwg+xND27n+3Rw0fFRp0rLyvDZmJ+0S8+kjoIJEoXlCtDR358svu
jJAwt2FrZfxzbehSvKAcNUXCs/68bz0d2vAp6tXt/wQUsF3fdjD6ozb8OWsd
MyirgOtcbJ0uftWGCYF1yq4aCnh+jfa6mUltkHGK2mSxVAFjFX1ZhXPaIMUY
EEvnK6BkzOnSQBMq/FyYrOsmSkahO7WkIOK9WbT6WzNFiYxxe4UD1S2oILh5
SZGJLhn3Ps4s3r6KeO++7O25xyFjjevj92vXUuHNDjsdP0sy8r+tsmhZTwXr
/j38gxvJqHOL5v7dhgqmrx9dvedFxku7Z0fu2lJB6rNDmfohMgbzn2w/ekAb
Yv2D1ppFkdAN9xm+2KMNyw05XnKhJNybcnoid6c2HCaTVuT5kzBK7tIipe3a
UBWdnaqyi4SJpicH5Ty0geNbsN5tMwnDD0vPXHHThr2LJtaFbSDhqINIVzkx
3yT9WOkRQMINx9elH3DVhuEtky7BRiQ0yyqb116vDRW+8nvjFOXxgMVF3z3E
fNPPHfzlNiuHWnKOv6wIfP6z3A+tT3KY+PDb3RICc3W6735+LocP3BXsKon7
eU32Z/C+HBqesVzpaqMNt5gtTyquyOEtdVZspK025G88evNTuBw2nLYZXu2g
DY0C71es3y+HxKHxfcS8ZeXL7aXlkpDW1Xj6vzXE/DS2rNp6m4S3D56Iu2aq
DWVl46XSt0io81GvLpilDXZWz2xY10h4auX//4aWNtQV7XnafJmE63Md/jVS
tKEySK7iUwoJh1ZuemdL0oY4/Kt09AIJT1gWR6uJaYNs90up8zEkTC9ZGv02
WAt2OKuXHeKQsP4rk/yfrxYMUDqbZAxJ+DEEXLfs0gLLib5a+iISnt69RVTd
XQvSuAXFbxeQsOHeo1TuRi3IvhD8XVWFhEqSl+0ertcC4ztxil9lSTgAWrwr
FlpwrODOT2dREk4P26uPmmhBbqKhU+1vedQITRe8fZMJ/NgPfifC2DhH2fmz
+QYTiF1u/5IgNp63q3R/QmCPkvJ7bfvZWNQ0tjySOM9ecnFxyE42pq9K1VbO
ZMLI7ZTGpe5s3Nj8Q/PgbQK/twn7vJGNARPbW9JymVAev2TxQ2s2OsSs2XT2
LhN6/ovLTLNko9m/9ytzvzDhr2pzUmY7C0WGilZvG2fCcidmwc1GFlrztgl3
TzJB++xqvRpkobzqTxPyHyYEL2VnC5QT+l26IeOMAAu2HKyp8ylm4VzMioNb
RVhQ4Fw8J5hH2LV6N8VLsKCulfzw+S0Wjky2NqrKsuDz55vMpnQWpiuQhrc9
ZAJvyZqijiI27ptMGL7+iAnZ4n1fmoj5jybC/7wrmHD12er77RVsTLH+HV1Y
yYRp6evywzVs1HFD/dBqJtyqavkr+YyNJoX8Nw01THCPXH2YR+xHjKd7MAWZ
sL+5w2tfG7EPDc0e7idwvMSxB9eJef/F7513Ui0TLmwqn9ukRewzCXsfbSOw
2OX9V2KJ/eQMJ7oujzifs/W3X/USDgqurp86Qvj/7vDKe5TOwUPyXoJPq5gg
t37IV4HY4B5YD3xNesyEONk9ofrGhN7IDpsfLGOChfztGKMVHDRWc2x7XMKE
9cMtGYaWHHTs/lIoTtQr9+QHEw1in+HMvrRyyiLqXfnH93IVGz/3WhkLEvXt
+tntrfD0/7//nneWJ+q/xl3I9iSR39XbjXUnrzEhqWLK6UM7G7cLNos6pTNh
5/Fdj+hdbDyYd3vufBoTVjYdLdvdR+yP++wGmclEvf0F70R9YmPE6Au2nSMT
RB6sBWcTDlpkrLrhtoHwl/Xt5GZzDjaz5c68WUP0Z5rdSdPVHPy+w1enBpig
c9PwyR9rDuYMHVPWWk6cj/DpT3LgoFekoPVPDhP+81M/L+DCwXK6wfw6AyIe
Od94cOeggd/f8gW6TMgrvtVkT+i9nUPdNjNXuDBQUFS+hKaOXevqt6Ze5YJz
1eQTLzN19Ayd+Pj+OhdyNJX3Km9Wx5yidSde3uTCxIUuS1aQOn4JSZD1zeQC
K8q68FaCOm5K1EwvyuLCduesDvd76viS6r4n/TYXji8xfWj9XB1bGWuHDbO5
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
yqvz53bTsfDuf3FhQf/M5ycOL5/3oONH1pZHAo3/zCkknuCYMx1/2B2TtZIX
AP1iy1xPOzreE62rHjUVgMttdrlb1tLxXEDP/MA+Acj3+Lr0AxD2ln4p5pwQ
5K3qqV7+xRCbQzk3XQyEofT9nzT7T4a45vr2zGR3YTDYVbF+uo/QMx9aTjfF
CUNG+4q/Rj2GeNcnQv1dtTDAhZ4o6Q5D7F0X+CzvP2EY2+XtdvylIZ4sEgig
LBKB4LH65LhWQ1wl+DZLeosIxMfc/7G82RBHT4gHqBTOmWur3n9ZX0THozHe
qx+GzZn7afI1REvo+F3wPLdm3Zz55V7f61NldLxc3CLsojhn3m/UKplcSced
55vtL/XOmm8oecN9X0NHRb/n4dlZs+bbdq1lvXlCx5/7DlXe3D9rbu/kYXzo
GR3fGlrW5LNnza+5NWJ5Ax130Ipv+/+eNqfM36TtH6Jj4If/nuRVTZuv/h7y
0nWYjlllAfUm4dPma3okIr+M0DEq5UO/+Zppc5mSYDvtr3Rk3fmX9lFy2jzS
zP3IbwLfFU7PMW/5ZT4TTg0L+kZ874zbr1MJv8y3K29RSSZw5NszoY2bfplf
CPrMcSLwntMO7b+a5szLXb8uDyHy+TGqf6r16px5I2W+tbiOjjmONItRvznz
wRS+Q9ZzOrasD+/Yv2LOnFSdcnPDSzqmZ+6N85GcM1+5fu5ldhcdHce3s8Rf
z5rf1bikVdhHx24Pxs8dV2bN67fL/dzxiY7c9vJdGZ6z5h9Hrv18TOTTs7u/
9Tz5t3l9i9qaXjYDAzs8Sp53TJtvCM5Y/ZbHwNnJezKMtGnzY4e87UNMGdjP
VB3udZk232b9L7vUnIFjd+22zCtNmz9JaWm6YMXAkRVjO0tf/jJPORIdILSW
gd33XXuZ53+Z7/p9MUHGmoGSS5c6J639ZZ58yNzj7gYG2i8aTzHYyIWb2Rtu
dWYw8aen21TxOi7Qjs0MJSQzcWtHDTvInAvD3ofzd8UwUSOy61kwjwsravJ+
u55g4ru+PKEndC4s3rl/88FAJsbZ+pI2L+KCvnJi5yNvJrak+n1duYALiUdf
znI2M9G2YvHWUGUu7NZc1/R1PRObZDNOcvKM4EyHfsfLYwx8FtVNa7plBCen
02ta9zNwIHretTrdCLjNgXnqWxk49S7AVuWiEeyxOjHw2IaBpz5QJ9/EG4Hq
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
t3OOe/uPn6b2cx24GGue1Wc0x9Wef5/9+qUOyPaezfccn+XKL03Y/KJBB9ax
a17NfznLDZL/MM7frAOMsfoE82uz3OrP0Z0r6brw5GzPkRXa09ytM2pOL1m6
kM27VaVubIoru0+/8JylLpTOxDl2vZ7idkVtmz2/Uhd4Zpauu50zxW15ulmx
bo0u7GmFl2qnpri5J9ULl6zXBfYurWf7Paa45GLf3bZFF750psSmrprizn9N
u5u1Wxf0fhk1vzSa4t7u533cVy4NcoL3bv//759nnY7bJlQlDWax3+rVjzNw
MvBFfFudNGxf3tzte5SBb02uWbm/kwbTCjeldwcZyLzwYOrKJ2lg2drFOIcw
cOCsVO/hbmmAizyr+gMZmLl0uHxuUBoSlrpvvuXHwPNvBjt0x6Vh/+qooiBv
BpbVV7Q0xcnA0fCy58FWDBST0IPEFBno7qq09lrKQIfWw0lf02RgX9rr0vDF
DLy4brUmN18GCvU6uh6xGBgQp9a2oEQGOq63uskzyfj7rx/gq5GBvAeR5VfN
GLhRa8h6y3sZqDx7+bAtjYE+7Uv9NbtkYCFzfEjThIGbglfGnM2a5gzZmd6f
r07H1H1+AcceTnNyZx/fnZajo6a999HE6mnOdvwjNSJOx03CS/89/DTNWaLy
PENQgI4rZa3cOkanOWLvtJQsp2kY0HhlN6/UDOd4p7vQtT801LUvGhYzneHQ
Tpwc0xmkYR49b0W/4wznn6XP+i/fafh2dOURFjXH0aEej0RG0tB8aYpyy8Y5
zo3lGSKBh2m4wOpE/8LwOc7Q0HXhK0E0vOOevFw8a46TeejP9LQPyeuzmr3+
jXOcgtYfTel7aeh/KNxo0ewc59Ss/epzO2k4omx0SFeJB3SLHWe4W2h4MWXd
15VmPHC7yHWHlQsN55XoPmzgF4NplQ/CB1YYY5F0RxXPtCi0ndb/zWdljEkb
2SD1VxQWyd7QO2ZhjDdSr3Fmf4lCTpvGxu/mxpj6PX5bU58odF0KYi01M8aY
7GOZcd9FgWfqZmyUsTFK7eZNp3eJQoGZ9fxyPWOcZNo6cztEgS4x/nJ4gTHu
8z90sPG5KETN8+zs+GyES6/prXGsFIUdNsIh8z4aoUjWkYXFFaIgdUyygfXe
iOTHyt0ypP2z3uc6tzdGOPLZoNaV9LdcK24fW2uETsve3ThXJQrdKx7pl1YZ
IW1wY1zBS1Hgqtcu+YNGuCbgcOnTelGw19vuurjMCJ8uHP8Ta6wJM8+8DvYc
HeeuvJtyqnqZJgTGfcuIrxrnWn8+IK3qpAm6bR3pN4m/yNi5cdPRnZqwVPzq
21/uE9x1nccyOv01IYpWkeX4eIKro7a9DSI04cOVHO7ZeZPcL1HDB5NiNYHZ
EiQTuHeSu29Px5XGFE04XbRtvA4nubfDf16bW6oFW36ndfm3z3GDbunyzLfV
gmMvE3QENXgw4JaRnIazFogxg758cOBBDJ3rG96iBY93fXVOjODBuK+316Ts
1gLhrvOZ8oU8WJm6oEBknxZsdpeLtvnKg38TNq+09tOCqUOcpSLyvPhrvebv
VQe0oNK5/OlSW17UWbFuYeh9DfAAka+1c2NcetlIr2eWBoS8XyGxs2eM21H/
KOTuVQ14f1Fv6Z3aMe7aqCPlNgkaoCT79u3TvDGu/dXLJ1ec1IDO+rRz6fFj
XLttn1ZnHtIA5az7PmHeY1ydvwVbg/w1QP/3jdzVNmNck8Qd3Ad7NMC07GQh
Y/4Y12GE6jH9og4lpwZXZ4yPch8837Sn5706/KdSnfu4cZRrZOZ/RL1eHW5s
4+OXyBnlZohe3978XB3K3ibyc4+Ocq3en/utUKYOR4qXr+1ZO8o98P3mm66H
6nA450pg6vxRLktBaQkUqIPqoNzbueERbt+NO5pUrjro1I1kGOIId6vNe/ei
JxqwZOJxX96JMW7U8944z3wN2JfRSUXbjXHdllvdfJOhAdoLF34LlhjjFlls
t/19TQOaCxJHrzf+5Q4dOlrTeFEDXuhv915w8S/XYEnAr6A4DTjTcWWV4fq/
3KdvapXbT2kA74nVez9K/+W2nnEwlT6uAcFWf0NcG/5w+8P9Tr6mNKDN+MTs
A9XfXAunwuE3phrg4LPWzaBlmFuUrnkvw1ADok88EC+7OMzlBlsa2+tpwLbV
L86mOA5z+9/r+b7UIfO/wXnVKTzMjc/37VfX1oCx8vPzz5wc4sZ4mWSsXqAB
CbzDz9+N/eK6yhyTcyIs8t+Nun/7f3EvVnedXVCiBgVy32N1myis3uIzY1es
BoYqFm/G6ynsecjYYPVEDTrjb6a9fElhO6+KIR/hf9E94SkvKLSKx/RLhPVn
xT/vQfL8Hf/9f0n//daly9hlFOrJW+fplKqByc2PyhLFhJOezNcsV4PJvxLf
B/6j0OHLymdNg2qQIrp2fdNhCtfMfL+V8lsNtp+NO1ESSuH0Bt9HOmNq4DVz
83jRAQrzqvkdwqbUIPkTt+iRH4Ujf35YxvGqw8eahYH1+ykU+77ql5uIOvzy
zZD8t5dCk6YNGwel1CEg3LZpkTuFUe+44wxlddiaLTCc6EbhFTmDjIJYkm9t
KtIYNioobLJ7/8EYFtxeFAWLOSq4ekdB96YoFujW5HocWKSCmxZej3E6xoKo
/L9ZX2kqWNDUcN+D5FvWJhWVhIUq2D6cXpwcxgKVs/+tCFdTQbrP80+9QSzw
DZBUeSCtgn9lP9ptJ3m66FvKHEtQBc1MJQyWWbHgtG5DkIqbMj5IDB5vXsKC
43vs2SPOyri7aZKevIgFQe6tIvqrlPGy5ePScHMWzFNOi+AuUsZnW1sDExgs
SNrleeq5oTKWLUgVr6exYBVf3Z6lasqoOrSCtsiEBQsKfZ/S5yljznfZXU2G
LFDrrvO+M62EQx2B+RG5LLh1MZ17xUcFPYy+sypIHj9rYNT02l8FFwUn/5gg
eVwgZPvN9CAVHO9d9HkhyeO3k6K65A+qoKCGJHMlyePmdnenFoSr4NL7vLLr
ilnQPG3+s/qECmY2ld5bU8qCAYXU7TxnVDD832NLRjkLtI4GptYmqODcIYPn
13pYULqDfbxwRAV1sDTJp48FBbKr4oQmVTBmkdaE7k8WfE7iE+vhVcX0C/s2
Vf1iQWOC8vrVYqpoeuu4hv1vFtwMMPQ1llNFf36xxoejLPBfUKFwWl0VE1Mc
eXjHWLDEOujFJj1VHB4SWU8bJ+PNady5ZKaKC+WSbAfTWWBoGjnKOqyCEpTm
nueZLBC3dj/19LgKfiz17j+VzYI1Z3gSk2NU0PffukYzolchLV2o+pwKnjQ+
qFx9hwUrfl/Mtkn+/+8d9b5dSfTrgtxZ2VQVnCy8qXEnjwXcxK5AvSwVVL4p
vfBvPgssTQ1Z4fkquDZOjZvEZYFEcvSo8EJVvMm9X16FLIj0Oqp63VQV/Wgc
3s8VLGiZ8E70ZKvi5lSfr62VLFg4Zzt/L0cVxc4q1BY/Z8Gpqy/CLtip4uED
d9nhL1gwffbQwh5nVWS5hv6nXcWCI77K2Tu2qWLEim+f7xEOUy7dMbJHFRc5
tFYzVPo4d1+EPZsTM8HsNwP5xpf7OFH6MTUWwiYY7rl7S69SP+eZXXZLM78J
2oe+TFS+3s+p+1Ay1MxjgluYI9kH5g9wEk74fVg6a4xb1w3lZOQMcJpq5iuK
ThvjR+k3p93MfnJsQ4WmrSaNcYQpsN655CfHbtvWy1/GjfGo9XKVS/QRjuJu
lvqWH8b4avTHDZ7QEc5E+Y1lHr3GKMrerPukZISj8vRuWGuPMep3juxL4Bnl
3NaPVXlK2DAQpXfYjHJYw/WLBcnzBY2fqyfiRjm2wrtzygiHKk1tWNo0yjmj
dW/8Cxm/sqLi8bjCH07xv+pIn35jrDLLPHq/kwXvHk8Zl1xSxJ+DAvWNn8j5
M1XCf1mKeHTXuRNlH1hgIX9bER4r4vL1mjcPNrFA5sLluLNVivgy1Q0E61nw
qLVXpu6dIu5f15W2r5oFaQq4eLpTEUU/LVfIIt9zwaskM4VBRRwM0hb4//93
uVpU8kZyXBFXJFzY5OnJAhjXtdGKU0KDH7c4O3ex4O1TZYnRS0rYdfzYw6Vb
WXCp2dHoeqoS6mTnbp7bwALFS1kRsllKWHbJvi3fkQUmP8Kuu9xTwmNvFCfX
2LKg56DJmx1FSqihIXi8DUi9gDAN44dKWOKlZbGL1JfEaAmbksdK+H5C8rsi
DxvW0xe0q9AU8Vptr/lafjb415blGOgpolO+Pm+qEBvSIzdot2oqYrdsgAuv
GBs+5126baKsiP0HbpkclmBD8MRRBSNZRZTOFw/nk2FDXO2k1Pt5iujpXGh0
XZ4Nfd/ai01FFFH4j4/ScmU2BJ7ta7QQUEQryea9ug5siLTRW+XSpIBnJR55
NTuxoWfkmI5CgwJWjFFO5zewoe665cP4OgV0bjjV67SZDTIbHQ6WvVLAgLD+
f/Lb2KDBE38866UCgv+sdbsbGyLO6QfZEZ6nLXIxw50NnoxFMf9vNxVwSt/n
yYbWFzdP/b+/Mi9duXKaBdKbz+cXyiui1801RcZzLBjab9lgKaSIw4ZDQhW8
5H2XDaasxxXwfFHcpUgBNjg/P3G4sV8B9TITi/cJs+H+xUfQ+1kB+455lhwk
+vj0PP2bSNajkRZUe4/o85EW0/O+irQ3GPLzE302cVCwpEQB10kHlRsuJ/oc
bhvZrK2AYz8PLky3ZoO6/9N33UoK6P2qNs/Cjg2LpRdka0kq4GX5KeYve9Jf
cpySFFRAxUd+Z58RvSSNSlsfTcvj9nO5PllEr8j9TmfU/srjpb25sRlEr1xj
hcqVv+QxI5Bz9hHRy+vTsiTqhzx+vt346q2/Fqx6mhL/UWmMm+z43mfhYS3Q
/9At30T8UP2JhGFalBacel8anDU4xvW6az7bd1YL6lC2SXHbP+5bUQHe9Yla
oP13y67uV/+4Ksf/mXoka8GLztaYeotxLjNIKFr1qhbc6YjmO3d3nMt3YeBt
6HUtqNdeLvNNbYKrbZdbsuA/LciSZPZl7ZrjCgvTr2k91ILqrY6Ba9/OcU9o
CYdySbvV9QWy/No8eOW8xineB1pQHLmm9cVWHoz+fuRNT4EWlNPeDq1J4sHt
A9mmB+5qwbUcztfgOh70kbq4IiNTC0yeg68mPy8upgkei0zVgkTjrdcNl/Di
7ZGu7reqWvDTs6bGL3GUe2tVwMtuaS1wuhE//57LKJfezDl2X1gLYF3jahml
Ua71tbZDVnOaIPjhatmLlhFu4YdfxYn/NOGlwYbR/pQR7vxGt9q8YU2Ys7qy
4a7LCHfkQUJFSr8mJKsfVTKSGeE2mE8uXv9dE8pV1rAv1v/mgt1fw8e3Sb7Y
JqCydHyAW3ZIAmxuaMLavZY2pn4D3OX8u5Lzr2jC5pbPT5I6+7mLJ0XsfyWT
8XYJ5Ves7+cuVQrkFbukCVYarRriL/q4m+jrW3iTNGHd/MqzL8z7uH5+Svs/
XNSE1K+HqlZk/eDSnoQ1nibt0vSyl20KP7izyi53Lcy1wOBx75r1YaPcqU2V
1RVmWvDk63vpS+aj3K9nd5gr0LTAO+1rvNXICHc7degMy0QL1BKOCR4uHOHm
HpXr0DHWAsMgf34f3xGugfyitk4jLfgzvmOJpeEIV87qQpovaW/8u/uAfM9v
7vC6nV3VpL+fqbePWsZvrkGBzp1Lq7RAI2coQfX7AFdQySOljOQf/eAzm5t3
DnB9S9b0Fa3RgsyFze1xn8j6A+d1BazVAueqPwfiXfu5D/W+2P1brwXxw1ez
dVv6uILSawKsXcn+yNNUSdvcxx2SrWK4uGkBpaa/2rHtB1cvIXZCey/Zn0OD
3sE7f3BFbB08j5r3ce6M9T4tJPmSqfvnxYWyPk7lS8tcJ8K6UjfwlXU/J3SJ
rbsr4R439oO39f2clvPtXa8Ic9ecl9zuMsAZGHjZk9FshDsMZ5IVPg1wSlX/
/fz+wQgXjX07WbjrJ6d6tox9vtUIvaaGnrV1/+RcDnF4ebPNCE03SDHvyo5w
uP3imfGTRrjQ6NzGrxtGOOUdwqt4Z4xQtTptl9ylEY6g9bITH+eMcMNBvvWq
70Y4T/cfvyPHb4xlEuGtjdKjnN1OOe/zhYzxqqa4t6zjKEfF6lFnlpgxDm09
tqX09ChnsbR8yISkMZ7QTxnIxVFOy66Z2Sw5Y/z5SKRo5ykGrKws7NO5SWHR
Yf+AwZMMWNV+adHKKxSyE1xznxNuy3jywu0ihaLrTgZ3Ea74s0jySDyFmqv+
K19N+q95vOPClRgKXX5wHSYILx47/epZJIU+HU8eDUczQHGhBm3wCIXd0Zpe
9NMM2J8XYWZE/H3bs03MsmsM+KCt7masS57vPBK4/AYDPOKveB3WpDAltGf9
vJsM8ArwbfmkTKGrTG+t2m0GDG7k8mySo3CmknbbP50B/S/zDAYkKBSZjQ/i
z2LAwXyXUzdFiL+fzy1pzWFAuvJfdjA/hQ1qrnU/7zLg7lPJdb6zDFx9216t
nMx3f70kX/1zCi9f3KBqSJjPQF73QA2FjSZn9nmR9c7nHRSWrKOwY8WVQ4ej
GOC7YObs7QYKt+Xuadl5ggEBI6/j9d5SaFqTZ6wWyYCn8k6Tqc0U0r7fY+Ud
Y0BwsmyVwEei34acBrkIBiwVPtXn2k5hyKdRQa+9DPgZ4IMtYkzcuK5EK9uD
AY9pvDZKkkwMKpd/8Ww3A0RUvQBkmGj910C+cCcDLsmnN66TZ2Kyf4Pt0R0M
eHXDWM9WiYl195rzdLYxgPFBIHKBKhNzE1dk33FlgOhuJDGbsNmRe5KbGBDi
HpV4VIu872ZKr30cA1w0P62+SvKcNOXesiOeAQUXLGLCSd5LD391g3OOAZua
E2p8SB40f6r1YJjw551Hnu5ppHC0M66ABBAwG/nCu/c9hYZcGxsu4VdKtiu8
WynUfVOzpp3wVgsHlSCyXvdXnXdrCO/3m9M50klhkpph4CryvhfusSPeKkzs
WyC9eI7M57zel9eBGky8dMr1wmnC0obSykELmBij21b5JZYB35xlg3wXMjHs
xGkzQcKutJHIHYZMvBVPbZs6Q+Y3tGxohSkTFTygs4Lst40Gnv6qDCbOqjsc
3hLDAOFgteKv5kzUUIm+FvOAAR1H/uyVmSDr3TMVJ1jIgCptmu++UQqVzvaa
1d1jwBG3oNnkQZKPbyYEfcxlwL4i1vnUXpJ//1skRWUzIHylX07UVwprz+lc
/ZDBABP1g912nyisO3Uz9GUaA34wx/6OEn0Efpu0i5D96/E84/ppsn+cQpcV
R51lwIhGlIxxMNEHvt2XJfM33P1X+Z4vhflTMcqjZL5+Cz22qXlSeKI9MEWX
8PewTaXHdxL9+75n5ZDz9braQ7vdleTrKx2J4YRNe1uOma+n8NlUR2AGYcml
eyri7SmMLeyiqZP+kuGv2n5YU9h8nDdz82sGBE3srLmgzMQzBSUMv0YGqLz8
4iuqxsSLzsEHPd4x4ITOQsds8j1e9bEeLv5A9ucV43bP+WQ/md5YMtDKgFyz
2kOrdZiYZvP6wOFPpN2v0M9Bj4mLvgV8+PqZAbYWHiN+5PtcSDg/pd3JAGWD
jSZ5JqT/zxPB3bMMKLz73N56GxM/6Hjxz/BQ0P7PwynVjYnVubtxgI8C20Sb
BVLuTFx+/VR0oQAFcyecnlzey8R9PzbY2gpR0KrxY8J8P/med93lHwhTIC9v
WdXty8Qk5S6FIREKDjVG9GcGMtHu6fzEGVEKsjYyGMEhTNyQyit8r5oBzn8d
Ap+R8zARujhQ8CWpXznRdZNkPf1/PKyNXzFA/KjoOVsDJgpmxDWr1ZLvW6Zm
mEbmT5OD5A+EBQM85gmS/XV50ZD8tjqi/8MDqYEsJlp8XCh0h7B4tb3VVwsm
vhQrX4KET+b8c3SxYuIvV6uZU4TfuFY7WkYw8eqrI157CXPWfDQsPEH2c6+k
qhThGmVhM60YJha/lrOLIu87se0+92wsE0X5+q25ZH4rHoQu/ZnARH9lkVPV
ZP5yqiVi1klM9Nr4+MqVGgaU+bKvJ1xmotyRJyw2WW+Q9hH3V9eZONz7yMbr
sDr80Mm9WtNE4aTlo6RPB9RBOc3PQIPsz7JTD5OFfNTh3AQreXsthSaHOK4/
96jD/VXlymeqSf1d4XQocac6ZFw79y+tksKmNj3tsa3qwLM+NTKvnMK9skFS
8zerA0d7SvxuCanH0bnR0i7q0P1h78SNxxRCuv7q9TR16OuqDVeLoHB/gLmy
uIk6vI1ZQwkdprD3rMfVc0bq8Kz5hepACIXn7ZIL2gzVYVl9QmZ9IIX9ucUV
I4SV6dOcfHJeUlLiXzST55d0D+44v4/U+225ZifJeErjO/1D95D6xa4TniTv
SzYa/7J7Fzm/6y1G9Icp2MO42PJ6pxgO/jCCihEKzp9pFWs/J4a3nwv/kv1L
wdOBgePtZWKozFl7Q+0fBcEXr7n/91MMO9Y8Umwbp8By8bOd1hriODnc5eI4
SUGA+/SjoLXiuKdN5GjIFAXPv32wWRApjvnBnm1rpymoPdORQz0Qx62b9DUt
hZjgMpvDET4kiTttD7BeEb5hOly3464k1vBo3hcRZsIz4+RHn9olkY+67DNJ
2utu7lXykJLCo2Lr/G4SPv/lktCH5VL4ZjH+/CPIhNMpBzIVQ6RQ4N7KtbMC
TGizVDATzibt2h06pfxMuPudVzm2RQpz93Ezhz5RwBOh+VF0uSh6SwxKZH6k
oPF45qfrC0XRs3qD68kWCgQCe6Y3iIpiztOw6oRmCk7whk+t+CmC7KLHkTXv
KJhJkpM40iCCS66nX6K9pWB3/vL3YkUiuHRy858XjaT/pNQm4QsiKHtiNDTu
DQW+vOuHThwQwcAr0U6XuBSk/06IwSIhzNmfmRdXTsGPRr6vdYlCeMxs7MTD
ZxTkeFv/OBIohGe2da6VIhx4+Wp5p5MQfiqgQm+UUXBzPPW+NF0II7cOLt5O
uEa7maYpKYRuT5RxLWGZbsNi9UFBjKkskA0hPBa6u1WrXhAHY2q6nnyloCTa
wz5zsSgeOWls0t1Jwf1taz+5qYliaPW7smWEDfecz2mcEUEeF/t/LzooSPL8
SxfvFMHTX+R0jhCW+SisML9SBO0Cj/ruIJyqdFliQaYI/qRHdfsTdtvPadeK
EcH7To2RBYT5xb5b0/aJ4JGeTpmD3RTEjN6MKq4QwoHn9XndhN229nF+ZAhh
tPkBwcjvFBRMPB9fEyOEIiPvuHY9FGjl97NG9glhg5T6Xqteop/wmc1D9kL4
1rXVY9cPCsyyB2I3ED1qfDdKF/RR0HXTDelyQmi5nz9Lb4CCahn1tEv/BHHm
SWddR0svJ0Hmr7LNYmOUPLmE0eL6g1O+SmrgobkxipxY+cWz/QdHcVMIzxmG
MW717hgE9z7Of+tCllTQjDGqv0JLsb+Ps8Tw+zJ3E2NUHN0qnBLcz0k6Zxjk
a2SMLz+ELA2Y7ee0q2/n+WpgjJ8mvWKcYgc4h47deov6xugxbRx0MvM3Z81L
H6smVWPiD7aVvO7/zXET3zWnTthznelpO8YI59btZyrNKsYoIPZWo/bgCMfb
SLF4gvCz42Fcg/IRToRd6YtY8vyNFxMVSwRGOWz/ur7TasaYn3cl98PqUU5r
6Z4Lw+rGqGtwzPJdwijnWtnM9+eaxvhaOtf9ti0FC6SV+JcFUfjCdlqiYzkF
riu+Ln8dQOGd0ze8l1lSMPLqnoeSH/Er/KoN5WwKRqk1/BreFEY22R32ZFAg
KT2/u4Pcz1qN61MWmVDgWKzwe7cHhRLjLWyWPrmfboYuzSL3tbe5xnp3bQqa
hh9M3NtG/MGd6ooL//97aC1tW78uoDDN/g/1u40B7iorevM1KFyjvfdJNLlv
n8VdKl+hQvyIhfCg81sGqOufP5YuT/yV2Zt1rg0MqJV1634jRaGZGmfZdXI/
/IyYqX0tRmFpFW+fOqn/k01nDG8JUlhAv7634zkDuFaHZWx5/u/3Ct5/86Fg
I79odCipv6dyGzQsAyh4H1geKn+Mwl372VVxQRQMnDjh3k74rI5Ac2MoBcMi
o+/rj1Mow39jh+hhCupqHll9J35fVPt1GDOcgviSygndKOJ3kkfA8TjZn3vq
7OJOUqi2T6rHJYqC2z13NitFU9gTuGvkZh4FPv0zhVPXiX8eZOVcLKSgI5W6
lJdKIZ7YkBf4gIK/P/0dT9yi8EihltOiRxRkyplWH0oj/nnrx/7uJxRcCHR5
fyGDwr8/EvsOllDgItBvUZdFof0N5apf5Lzff1yfpZNLoXPygLAdqTeWI+EP
r96l8PB2mrGAHwWlVcFLTU9ReBKXfr8WSIHB70WPI0meyftA+yUXQubvviFv
7gy5P6SzF/kdpCCkLyQjN45CFs+86swjpB7e9RU5kkD0+fb8fnEEBUdaVc2C
LpD9snGNQU4kBauv+Lqev0ThVMxqP/+TFPCFe955c5ncl0LcyJQ7FPhLtPY+
IPfp/bcKQ+ZEj7nT+SHy5L7dotg0kVtAge7Dbsvk12R/FSua/i6i4GNFtCmT
3Ncib3np8/6j4Mmmjdo/ib8cjgjA8YcUzOqp9D4j/nvoVemzR49JPRDuWZxN
/PeCvf5aK4qJ3kVhNenEf5/1G3t9MNYU5K7b2plYMvDH9wZNm4umcLBo/HmC
BQP3JzVErr9mCoIRAVLaixjYukvc7Eq6KfyTpF3rNWcgfsi3kb1nCtGuY486
KQa+PNrCLf3PFMRYfCmSDAb+Tbp+5HyZKXw74bg2iM7AneEiy85UmULV45G3
82gMFJWzbF6xigZNLRHnW9QY+NEv2GnbWhpsO77w4f9/vyxw9RvNhM008P5+
xvihCgP5PGWbmnfRwG+VyOl/ygz0f5zWa+JNgy1PXNghhA8wq9rOBdNgmSTt
tBFhSv6X+mg4DeLemGepEn59lEdzcwwNQt0ar1oT9tox0CmwwxRWz85mpjsz
sCrwX5XsFsLhMe1rXRiY6xci3uliCissXXm7NjHQZfaRacA6U7Aapp/buoWB
h03bXlfamwKn8ozok20M7Pq0pOizjSnoyR2VHtvBwLwttSWVy01ho0eio+Iu
Bm5U2z4aYmkKab3xxxTdGWgid2x04bAJfE/8djY0goHnYqYjcvtNwG/61HGX
4wyUVTp3bbbbBAIl2ZoyJxg4fiQjw7jDBF4dfux2N4qBK/0E5zE/mkBe5eO1
WqcYGMqL25XfmcD6x14yAdEM3FUtxeyoN4H7+jMdV2IY6P7X0iqu2gRqMnTE
bpxmYOzNrMb/NplCzzKxcV57BgodHota5mwKUuOP1k4TNvj+C4vI+n7lG5S/
d2DglPnzd9JkfXw5ltWxjoz//x6c9G4whYFWoymNtQwM1778LnOJKZx/UiuY
QPjcx+aTHeamMPqmKqONsGqqX5w83RQWSXFz+J3I95uLqlT/bAIjM38W269j
4GeyD5xaTGDJuYzYdYRnsxddONlkAjHUVz2KsPaJjeyyOhOQpeVpDZP+XkHP
+qerTEA8Sf1GLGHr7vMKq9EEphY4tvIS9v6go5RZYgKJDxYt3ETe76AubCvz
yAQ+LY/+cZrMP+Tj+rP8Qyz4sVBx/b5UM/Sb2fd5Xx8LJB/MDCleNcMZWeac
QDcLrFTsP524ZIYKtwq1Pn1hwXjCudp7583w9IMYx///3oa8ccO1y7FmeOHU
kuDlzSwI+f7Z0S7aDL1C/Da2NLKgqvacSMVxMzx50OrCg3oWGBx6Ky14xAz3
tvXWKl1iQfHV+zcv6ZvhqJPn+yWJLDio8t+WnAVmOKGj+TcnngXHbWpXx6uZ
4U7NZ2t2n2XBzl7febYKZmho/LZqXwwLsktFXT9JmmH+lhwDPMkCTWyecBAh
/WGR0P4TLJD4F/fuFq8ZGnlZVew5zoJ1ciseFP6l43DHgeP6MmwQeeG7W7fE
DPvMwqp45dnw/P3DYftnZvj75fedDxXZoCcml5+MZhjx59OjZSpsuKKinzn3
3AwDhL/Z3FBjw5fbRxtP15hh6WzLvQYNNlTGFKua1JnhKx3u5XdabHg80rG1
v8EMs5lnW+8sYEOVVvIWfGuG9/gPWDovYUPB7dpXl0QZuG9vUem/pWxg1qYt
j5Qg51fA6rjfMjZE+BzqPCbDwGKf13fuW7HhtFCzXYIC2R8NAUefc9hwIM1R
Lo/UBypPcH06sCFJ78+bZg0GqtfevOO4nA3r39QIi2oz0HPTS/UqwjJcI6uV
egzUEbv8dYsC6Z+9MsLukRmu3R29xZ6sT397srLlEzNsPHU0TYesp3vqYO7O
p2YYZPxfUOd8NvBMP/lxv9QMPzflphzXZcOPeRGHGeVm+FjP58esPhuW+6h2
thO9PKU6N243ZkOJ/NDpB0QvRvRsZzKNDY1bNz4vqjbDtNJEC51tbDi8x4hP
YcQM1WsSJthubHB2ChNf8tcMXXr51HV2s0FoCZ/QqXEztLAY//7dgw0+oqvn
hqfMsLr0z8MITzbobJIYPjZnhiUKv+d+7GPDyk/xz4z5GSi5Zrmrng8bLgVz
l/wVIvWhyc/b3I8N/j9uG34UI/Xt7WR4twsTRpSL5q0meSf189b5Bwg7xd4L
flsphkt9LM/c28AEBZ2d6VrjYmjvmWp4aT0TFlSXisqYimN2Ts8dY2cm1ESI
Op/eLY4pQrFfgpyYYF0Vts8jWRyDx0/WezsyISg3/HrMS3GkiVXkyNszYeWH
eRlvJ8VRMYLGHtRnAo9HdsOiUknczNe8a81CJigFKH9L+CmJk3uDvbdrM8Em
q+71O3UpZF+Rk1qoxYSDs0GTffZSuFnPnJ2txgSzCZ4zjw5L4dfLOb+/KjHh
3zrDLWok77SUbg1vk2PC1QZ/Xd4mKRS9zWdxUYoJE4X/nXSclEITl3DHZWR9
WU2N2rtYotiQGtKRRtY3TX0U7pITxQWPbustIQx2fFLUiAhWi3rvEiIsJrbH
aE+jCKbQDt37P+/Meb0jvoDknf9uCi8lvPnNwIPyeBGMtPq8MYNwzQkfUykf
EVzZd8CVQ96n7jefe2G1CMaF8tLtdjDh3f7y6MkDQnhq27mzSm5McG97x/d8
nRDqONhXqOxkAq+FlOJ34ufZR12Xrd3FhEPzjFkhUkK4QkjK9uFuJhS6Oyef
HBLEOeUgMXsPJiwMKdPSaxTE7sB7KTJ7meC87JSn/31BPP336hchL/L+wltX
/ZMEMdAutid/CxOsVK3dYpeI4lbnW6sebGVC72abyruqoqi8RGN37zYmfF72
q2TxlAhuezp3woHM1yDuRI9NuwiubX73vpPMtyXa7XLvMxE8pcDyziDzO9Wj
/crktgi6wbZFSe5MMFwgpGhwUgSnnYoVC/cwYd4Wv7x+TxGkmAepwpNM+BY2
k3L5sxBu193b/TeaCRtWO9GpSiFMWPxNyvMME/RCJfge5ZD8s9R95WwsEw4s
XVJOTxDCGadbf8vOMYFtKBV5P1QIrevjY24nMiHlldhLOzchrIyzg5wkJoTG
bw3itxPCdHMt1zcpZD7/sgp+UUJYYBj3u+swDzhu5aoZduihic+1hbuv8kDk
11O084TfC+XvrSzmAWnaJrFNnXqoscdX408LD9jlh1pEfNVDo4Ts99/GeGDH
UQ0JgW96WJm/bMlxBV5w+NKT2tethxK7eOgPmbwwZbuh3qRXD+HYnsZAZ15I
TghbXt+nhx1/Xy1XHOGD3xLSJz1k9DEq+OQfOyl+uBW67f4OeX20lfzt32nM
D4fkzjYXKenj1gzX53W2/MCZzf63VU0fS1QH90+680N1wfKfW7RI+8TlNdsj
+MGqI2/jPR19vNgQWf01hR/q9byzHAz08VirQ8XRQn7i5/I0lprqo0ZFr37E
NTr4rH84ZrmCwnUdnvqWl+kwFaTxzG4ZhRNX/kiFXaKDwKOHf5YvpnDhmblo
k4t0uOu/7bIxk8LLhxZ170qkw1yZSa4IjeQhHVwif54ONn8fMtoNKIyTTFxr
m0AHdoGu9R0dCq8PTl2ZPEcHuaDI0SBNCt94qN9ZTVhWf/nd8vcMjFtxfnME
4etfE+adecNA89sB9gzSf1KDb7FLLQOfnGOo7iXjPzA0WK5XxcBVz5MllC/Q
IYmhYMGLDBQ8o6C7OokOCn5Jxj9KGChvclTmXzIddvls1PjyiIEnSrI586/S
wTXJRKyniIFNn5+UlTwh7TxvOLd2k7wT7Xw+vJQOldb8Evf3UJhydvbR73I6
nM28If3Ri8LkeXd1lSvpEKBN+Sr4ULi7qW1m8AUddMydWHv8Kfw89DrpQA0d
BhamhD0/QPy4Xej+tFd0MPzzw4wRSvKZ7hZmeB0dmvsvb793iEKNxYMuLt/o
ELX5obwWySPLoocnWrvpEPnifnpGPoW2jv+ShHrocFuoNsLsPoVdw/6B7YRj
oCPu+UOS/749kd7aS/iPfuHWYgpp6YFGxwm31gfUjJZS6FSRlmNP2OLtlv/i
uRTG99dmc0l/w/UZzjrPKfw+rG/2O5cORW92jH91pzBzeDvvCGHuuZA2C5Jn
LWWEYm4TZvtRLxL3UyiFu39N59Ah493+0m5fChMXOlwXJqzdfa+GGUjmVyeo
WZFFh/uGwaNHgym8cvPzIqNMOiw94+BYGkbhnrDyjyvT6eD7YubH0GEKdYJY
Osui6fDryk37vmwKNwcq+YmcJHq/XL1ShugRd2xjfkwkHdJm44uNiB6HN/fu
fBpBB/ezqc3Mov//+1SkafoRMl8Vtwaj/ygcU07uX3GQDi5mAV8lHlO48c/K
lNRgOmjQLLZ8IvpYnjTY8jCADld8huIvEH22tq6Kj4zr57xO4pXI9TbBMosv
W0oG+znNaQatDntMMFtatL7EZYDz1W+jPMfNBE14o3qscYBTzNHcHOVqgi5j
i2eUzX5yWiTnC6luMMF5KoJtfzJ+crJuT7mIrjXB2cLWb0lqgxwdTuDKDatN
MOyBm21hyiDHQT/5+qS1CV6an3B1wnKE08unrGUqZoLrXm4QWhA+wum+/CjY
XMgEI6LyX5WVjXDCN3I1b/KZ4JxbcXr27Agna98Qx3fOGJ2XP499snyUw644
VXp72hg1aN71NdGjnH3bdC2WTRqjl4iKWmHtKKfB+4v2ynFjLHjbe9da+g9n
39TmzP/GjHFe3yZrr4vKcDlrdUz6AQY678kwgbPKINbQ+t/JAJKXunJopyKV
oe9gkOtqPwYKy9uFLT6kDLttXlX98WbgYrtfP3cHKkPyYYUdp/eR8ziSzhbc
rwwy9SsT+DwZaGHlWKjnrgw+19VavDyI39iuua92mzL8ad9eWUzykMfQ6dXn
BQnHa1guX0LyzY2LQk/nlGCH/OVdx0ne1NuQaOk7qQSFj1m78kjeHAxulsz7
qwSs1nm9r0i+7M8OdTz6Wwnq/rne/UjypNWJq8Htg0pQ+Trc67MxyaMhQtlN
/Upw5PJE1wcDsr7vH+9v/6EEQ8YevTULGTgwGfb+1joGrBc8p3/RXAq9d1y+
Xr2BAUGs6nSVJVJ439Rk5NsmBqz1U37VDFJYfVWTZ2wLA6Y881Mr7aTQXFPo
z+R2BrjErg745CyF6xQsBX7vZABTX+6T6nYpvPs/is47nMr3j+N29rH3yKxw
zuk8xzkOkU9ToZ1SGaHS3kqUEZHIikISLaNSVEbG+ZRVoRRFSfiijJRVKut3
//58Xfd67vv5PO/7/b6uc5Hbf+iDJwv4H5+/8fOm4fJclaDsnWQ+zoK4sWM0
nGu94bDURRb8Fnz05beyHDK6231fxbBAhHIeK9WSQ6VDUR+PxbMgbgnDWtxQ
Du1D+6dFE1kgwUjf0WQqh7uVV3kFXmGBQ/KrN1rmchio8iDmSzKL5DuLy5+t
5fDL+Tgt/VQWWPGqI2SXy+GvjQ35K9JY8MmqhHd/jRw+6FV7uVOYCWLeZvMt
t1L4umo+R12ECetM5CefbqBQo7sc9osyoXmIElmyiuidlaiB2ywm7I6U0H6/
nEJPTasngxJM0DJTVfYBCtP53GPqMkxw2JOZb2xFYYyK6+l2OSYc1r6UN0ju
C9bmxwk2ykRvTkg+q6dTeKaJa6e7mdwn7Mp5M80s5BuWtyi4kPkWz+6feEv0
P2ZsLMmDCSfXlPWr1ZE87J64KdebCVHL2jO3VLNwS2u415qDpL9XxvlnRP/T
FggyfX2YUHZy5POGEhbaXWr2NyR64dCS1qpYwMIP60X4a4jeiHD2pIvksfCI
ZafKBzEmCB15uLUzhOi3RYL7V7K/4AtC04Ph5L7i/MiOFyf6NSj/byaSwtDb
32M+ER4T+9GjFEthae7U1zLCkkZ9m0wSiB57qKM14dUVYv/ZJFFon13ovZnM
FyaxV3tVKtFHiZs7Zcl6d9MqMpzSKXTZ279izjADzpUqgtZHCoUu/3T3/8kA
AVXZHM02CrvV9l48MMiArUcLr9I6iT5vyhWf6WfA0KXesl/dFPI46xazehmw
+kLms9peCgc6V3WJ9jDAOPGcR8x3Ct+yJOsCOhlQvGvcc+EQ0U/KSjGtjQFN
I3eufBgl90tGbeumSQb02xl7KodSePPuWS3+PwZ8ugKCc85TOLPt3P2KPwwQ
/f40jR5F4WTz0pKdvxmwf8a9xZjsP3522L07oww4qdm7QY7s3/3ORb3zQwyw
y3PFb1fI/f5u7qgUeX7zg6ebc65SqKl2mWXex4CcCQn3zdcp/Ozwwdn7IXke
54kPKe8oTPWIsufeY8CuCbUbjA+kv3fn3txMBsxZeTE+k5xPXGH87nc3GDDP
XDRFmJwPbQ3D8PY1BvzLcSiBDgqbHrrlzktiQIbKSSnXLgqt1mks94pnwA1h
6UebvlK48XLhJqcoBvy3UumnaR+5//bBH4WvKrDYU576FcDC9jzzPxJ9KpDU
Xdix1J/kyeHPeU++q4Dw563VaSdZeGNT0x/FYRXoGZSUFj3OwqH901z93yqg
Kniu8dRhFv7Upx1sm1CBdp2fnJn9LHQKXmu5WEgVXu9JWXxlD/EvwrffOEqo
QsPXV1NLiD5qKjteXn9EFR7vavzUTvTujM/+umlfVTBfF219k+hd2WV31RXB
qrDqwSFmING7AlXTmHkXVKH4Q3iMD9G7w+NPh69dUgWf6EXzzhO9m46bvn39
mipIHF9XVET0zkbHkj83SxXeLXvwVZzkXemCEAH2I1Vou5/s4GfAwmKRrh2h
nSww8aHaZKco9JtJ2nfpMwsaf9R6145T6FPDy+tuZoEjU+Wh4wiF+f+CJvwa
WeDm/et3Iqmvsz/Wf3N+wwLaoxNpOeR8PTONvwXVsqB+w5s50eR9bBu8suhX
DQukfVeyln6icIuzjFxRJQu6Xukeb2gk9ZEjqW1I9GrFT83miJMUrjx20t7i
Mgvemi8zGiJ+IqqCF596iQVbFrG8zfcSfeLQAp3iWLDthm/yVi8KD2tw9noR
vWzZHPRqlwuF7+Xi/WqIng4LK6q5OpF62Cd962wUC4omh+4tWk3hvJd/7iRG
suBunnO5mh3xS5l+r2VFKbjd5c0M1WTj69lQ1C9OQUmYxR5THTZuuZL3/pY0
BatAZ4ugHhuztHuGreQo6H3isE7EkI1z9BcP5ihScLJ9WQQ1h42WKyvKR1Qo
KHUc17lgwsaPfSY+choU6CTUqUow2PjWZx5PSJuCV4s6PO6z2GhzT6V6+zIK
CsOuvTLYxcYMJ89mwxUURHwathnYw8YJB/6lYnsKelIKrzUeYGPV2Pgx7VVk
vgUZyZ+OsFElqlJmzRqK5JtFb6Z82HjuVobSqnUU8Ex8aq382Dh3VuJWlQ0U
tLx6LxUTwEbDwI6G7I0ULE/hCvw5y0aLOUrBplMseOPy2bKY7G8iPchyZpoF
iRJVAz1GbKzbICF2XYAC/PunbQ7ZT+fegCEJIQoURvQiT5P9mBfM6NkKUzDz
5J1nJ8XGL13+XTYiFMx5KFW7wYKNxt1aaaLkfJOWVem9XcBGBi+jNZHw3v6A
8k3Axu1VP7OEyPnuu/VR7GAQG8+HDCluI7yzysz6bygbJXsVff0JayR5bgmP
YGPvBrPnXoTtO6XuKUeT881cIqBEeJyfHJwRz8YdY/EeUVIUrIz8PXfuFTaa
hu7i1ktSIP1We+zOVTYOrv3x84MEBY4h+Zaa6WwsflKtrHxPHi7xPqt+/fD/
vzf44Up/vjxU+8vKtb9jYUS617bQp/IgVfcAfrxmoePg9o625/Lg6SY9o1zL
wrhoHmekVh5Syr7GOdew0Gy66G/Je3ko4+vML6pgoUb/Ek9Ohzws6/KY4ZL7
CdOtFzgPyMPwpx6F5lIWeq6s4zpeVAC15E8M9WgWHipa0iufrAD91fphny+w
8M3b9lPHbitA1va3UlXhLPwhNnl5T74CaA6HJjSFkvyyW+DSd74C6P33vE36
LAu1Wr8fGKtXgNJHP6MOBbJwVbbyR9/PCrD3tBNj+jR5/oey1kcGFOD4ckvz
p34sXHqmbFbQWxl4HT0A17eYoUvuglCfehl4uvOBv9FGMzTOjKs+9UoGFgnD
13TiZ2e/GI6PfiEDg6X/KpWIn93/db70kxoZkC94vD10iRlmqms8GiR8XPyl
yKgNmc9PfxfvpQx4HzSa8uKZoeH0aY+EWhmYe3lTwieK+G3WwY1Hx2TgzD/T
Iw3dpuiSHEh9GZeB2Jy9P9a0myLLLP/75kkZiPiSc6n1oynGV2R9/iwoC65C
uVdPNJni1sMNZXvEZaHysDrP8I0p1tWtefCPJgsLNsXHfHtpipfer+dGqslC
jGpHSUWlKRYN5oGKviyc3aTyooRvivUBGmt2nWTBTea5mf9uyaBMkcaXkVMs
4C0UyssplsH1nLRHbqdZoGTXxPN+I4PhY3e2ZwWwQDxuQ5HUVxmkdh6+8DqI
BRp7g2ouTMmgUrH1wJuzxA/SR09/UJbF3GfKG+6GEr/2Te1EB0MWU3uDstzD
WCBZWNievEIWE+WjClyvsUBryWNBfhEN1QVZ433En/0+kp+u1khDTspR3qp0
FmSLabYK/aDh07a/mWEZRE+X3O8oEJFDjRNUVOINFvxjNUfeUpBDTlLR0lM3
WXCppoP5fLYcqvwrtGfdYoGTOe/ILKYc7spcwCojfJTR/HmfjRxe4Zs2DH+g
w4JsLmvubRbqutEyGJ/osHzB6fGW6yx8+UeNOdhGBzW5O9bXU1h49X7ZYtP/
6JBzl68WkMhCa/6w89evdAg6vizRN5aFq9fdvqX5nQ4/XJ3vxkWyMGh8v9yL
YTpcXzSxqC6MhfO0nKB3nA52o1vNTEm9qjLKx66tY0DqbCtu7SIWBixYsYLh
zIDlIEits2Hh7q2xn03cGVDyoqhHwJJwUEp0zC4GCK/ltn8m96PRkaqpzQcZ
0PlNLf7bfOLnbD2jA08wwCfEaZMBnYWcqoP7BQMZoFreuCt+Hgsrjh+Jbgln
QNZ7zQ4uuQ8j+C7GsqV0MKbTGm8QP2ln+d1VpYgO0kfWRTx5ycLk9mStpkd0
mBeWOJBL/Kdgdf+3lQ/oULNa1uLiGxbOrZg65JdDh8ybf4pWE704JjJ2cfdt
OjDKU98MN7GwacuixarpdJCPXDZwnPhbtmVPfkQKHWZvoMd8+EjGm84yOWZP
h3PWO99G/mMh7dSD9HtL6bBL9UrCq0kWfptfff7hQjq8vVGp3zPNQmGlfQfO
8uhQHkiz+SRA8m/81nEjig6WOtVPs4Qo1DGp6E8zpYPcbsULa0SIv4yQNBo2
pIPXf+kP60UpbCkPSZmtQwfaVxNH/VkU3jP8KOZQS4fnCSUhES9YWFcqETuH
cLh/gL4B2a/Oc9tzd1/RoWKn2YenZL8b078zm1/SYUnggoDVjeQ8V72QufuC
DlW64ZOtRD9bWsMa5tTQQe9lLNfjE6knOOS6uoqsP1mu8rmNhRIJjXW6FXSY
mpt80b6ThVdqV0b8yqBDlgXbeo88yQMbOo2OXadDkUTKopdKFCo8ENmflkoH
P7eJ92pqFNpk1omfSqbD2bnBwps0KczSUfoocpm0x1q1B+gQP1Li2rskng4H
byy8EKdHePjaIV40HcJaa6goQwo/GPQ3dkfQYduQnfKBORR+FypP+bFdAV5s
1lmd+IOFnxquBrp6KMCjimGHLf1EP08vLkn1VIAR96/tul9ZKDKeG3t3hwI0
eS2/MECevyF+tOa8twKwu5xflJP9HcsbyqX2KUDQ6V6FVPJ+R+udNDIPKUB5
bt3nc+9ZaGXXv6vruAKsf3IiLoDkm69tQRu2VCoA7FM3F04m/fmPvLe+UoDV
/kZcGfJ9DaYdeaL1VgEaFgy3mcSxcOyArXVqiwJ4r+b5ul1kYZRCcmRThwKc
KClcmhNBvs9V8VXYpwCvaR+Py5Hv7cS+ooxtowrw/tdOk0vke7MXYx++PqUA
vbLLTpiT+yGyyeO116AC3EtLrZV6r4GtNQeM/UYU4KmngarKaw30iRK/0z2u
AEsDVtA8ajTwctpytXQy/oPJ3XtDqIH2U6vVsoUVYah5Gf/FUw2cn+SqOCmh
COZrzL5/f6yByoMd9olyigC2Xne3P9DAwYS8D4dVFYF9/N2yOTkaON7WpaLr
pwiWsRdMsz01UKI44RsvWBHs5aWKq1w1sGjbpxdR5xVB3z5eZ8EWDYxeI75D
JVYRcp38paWdNND8wY3Fb68ogujBn5PE6+PkFaG3RdcVoePoQerVKg0M7JDy
eJGpCAU7fAtK7DXw4qkRs4kHihBz3dlZfoUGNq7q2TfUSc7T/qC4pKc6+pSo
bDpI7kfu2Q0ZYzvVcdhjlk3xmALUVN7sXr9XHTMduOm1ZP/nq5da6x9SR/GU
pNnpYoqw69TcN+7H1TErqyaERVOEwieTZ8X91NE/QL3Qj+y3IFxwWi1IHWWL
Mt6d0FUENSnR7Ith6hgc7XpUI1oRcrp8Nwd0q2PD36aSykRFSAkad98woI6p
pruy1a4pQrud+9PQEXV8vdO1W/6WIpip+hjK/iNs8dThXo4inNf4NGdAUAO5
GzJ+dz1UhOtmD7VUJcl56d/nPilQhIRz28wuKmigZIVmihbJmjtVtm9coUn6
z3RMnWxiwrGq2L2bqyi8vdnOtKCBCfLBLteWPafwyIYUkUX1TLDXq0jW5hO/
3fAjUeMVE3bcpC/sLCH9pcpLl9aQPB8n5xNfRPz14CvjZ5VM6L3+ks1+QqFK
gsG6uOck3789caoqj3x/RbbhBciE6U81qxxyKey/dXfnlywmrDt4N7H5NIWv
NmfhlkwmbBDMnbXhFIXPYjKMze4wgc1PNKv2odDo+zz7TbeZsOpckA77KMnH
fzuyW24RfmsxcfUghR+t5sY+Ijzx5+d/QvsoLNYcV/hGOGVUdHyPN8k3I/WK
x8j4nGOlzo0kP5hH4DW2FgdKo9rW51+RxKW+Ff40bQ4ExKwu9y+SxIZPfplF
hEtqm0VjP0qiykxpKUOHA4UysZda/0nigYLrPkcIz1ZoemivJYU7n2bkBBG2
ixyJe2kjhU/lnq93IVx6rdtjqbsUim0/FyJC+G6X1OrMINK+uCUSVTkg+i3E
M3izDP6nZH2KQzhNzPtOka8MvpRN8jmpwoGI3p1XHibL4D7mgeEwZQ64p7s9
dHoqg85sA/8dShyw1be+lvBJBoeWPC6XU+RA2aD38q3/ZHCtod25KHkOHPym
+vmSuixaqRU9bqFxoO3BkU4GTxZ5Wwtv165XhyUqv9blZpPzlUlfNb1ZHa7V
aYjduU2h3bNNw79c1aHpwOL+3AwKHercxB/sUAePr0c3116jsPR+3hWj/epQ
pK1/dSqZwkRvDXOn4+pAG2v+ZXeZwvDFjSKWZ9Rh+FtL8r14kv+O7KiuDVOH
WvrHbHoMhW9vF1g0KWjAm1Uy5664UfhLSclWTlsD9ugMKlhsI/fVxT+nf87R
gHmTATrjmyl0Y50O3sfWgNws54SPG0n9zesOPGOrAWsCHjh2rKPQY132eh1H
DTD+BJIyayhMPfgocPkWDZhjbXfKw5HCoMBq6x+7NGBdyWlG+8r//x5q7kEl
dyYU/XX8/B+p3x/M0VRFwtkLuP8ukPp1ptmr7SRMufjKmedTGLr9xwPx7Uyo
+gXqHaR+hSeEhacJL++Zlo67S2HeRvugpZ5MKLxu0bkii8KJ4KO7Wr2YQF/k
Fi5BzpOZE1f5bCcTJkXuDzSR8zyUq+H/4iwT/OZLR7Qep3DBQx5rKpQJ7QIe
cY+OUCh+499QQDgTal5pa6WQ+lZ7uXuh4wUmiIHMTCypb5f4N4e9LpLnfeAo
lrKb7HdWyaPnsUxQSl4wWrCTwoVm0uK7E5jgcPWIf58nhZuuzVm2LokJDa4l
duztFM6trlg0eIsDb7otTtxKMEWRrvG23RkcYExmKJ9PNMXPAsNSHdc4YODz
sk3pMmnfuKdrYwoHZlI2+NsTvnXgzJmXlzmQ+yr49VzCc3gHR20vccBp4dKB
B2S8xRdP16cxHODaMtQ7yPyBzqZvraLIepUOjcWXTDF8j1rD1FYOrJlzJkcj
mPQ/NOwetpkDDZMS19MCTfFMqL26+kbyfSRJPqg/Y4pPO6KFi9aS9i/Vg1n+
pljaPayzcxUHZEzmpLNOmaJYs62Xvj0HvL+OLthzgvRPflQ+vJwDIsv+7Fp3
jPSXfKf0fgkHZgWK/x44ZIr7jjZ3S5dQMH88PH0veb/jEwVXHxdSkBfx7kEt
0SvNBWvGdjymIMWXViFMeCQouFs3j4LE4WtrFR9SuDejb9u3+xQ8pVq//iP1
cPRs0eKyHAr+2r42LblP4UnaJd+bmRR0JVZ93niPwu3WJxqv3iJ5XvFb/Ysc
8r2wjWrW+ZF8K3fJp/sShasL1yi4naTgjotbHJt8LyX6lEzQcQpiZfRb3GIp
FPy1c2/xEQo6v3q5e0dTOMv+3mupQxSMRVivWx1FYVjJ2Bvf/RSwft8ZULpA
4XzxA2OCeyloWlIZWBpOoQktJS/Lm+RjcaUjy89R5L7MG6wh9wNzv+f9KXEd
xBtGO1sKFcFHl/bIc0ob7+ed9zxZrAj8lxWLWoa1sTnRaOhmiSJo5FYxdn7V
xvm/fSpdyhVBRyZ0kVyrNkbt7Vmc/kwRjNITmB1vtDGsour0/ipFULjzNKm1
UhtTfhyj+C8V4XnrPyGJp9q44FJZS4ikEiyceD8cp6+NTw789ttKUwK5d8lV
46pk/dKtZvlKSiDM6F6ZKqONK3boVYRrKMG+/uT0c8LaCG2/XzXPVoJc547n
xX+1sKBOPDxtjhIsar90ZuGQFnqftx5rZiiB8tuWA+rftLDKIqY2kKsEfede
TK35ooWmS8J0tVXNoS7S+IX8MiYej167SIowjP/y2w9MzP26dkaZ8NZ5Ih+q
FzBxrYLpBhvCvd9ykw0smOiidNkomLBJ19fQcxQTy37tWd1J2DgkZsNPOhM/
RxYmuKqZw82QjlKveUxczejP/UVYYOOrIz2GTPywLue8jr45VFcoCL3uYSB3
3yOtd4TPpd25697JwA21tphuYA6TK0P6hNsYaHL1958IQ3MYOWy3tqyFgZ71
z6wvGpnD5QDJ3dFNDNzboTuSbWwOx3s+55xqYOCrZwGH2+eYw9nHa0OC6xjY
lnpdgD7PHLKcpRyyXjAwZbR2anuINBTvbN70dZ8qyp6Zt0r7tjTsibq8xpqw
9yTvb3u1NGioLFDxJLxVukEksVcaxtneCZv3q+Jk6Xu/uZIy8K0FeVoHVdEy
QdEvzFQG+l7YjeceVkXbF//gqqMM8JePrZQ9roo/SzZZbjggAz8F01g8X1Vc
OfEAm3k0GBEUmr5WpIqpNNtI3S00cC6NFo4tU0XudxOpbl8amI15W9pVqGLO
8S1HFJJoYPKEa4MvVdG8MMYuqYAGxhe6LccbVPGL9XZ/ryYarHHv6PvWoor2
i7/s9hwm46duJ1/sVMXbz8JHnonJgcK1MJOuflUsmcyxeHdIF4JMnqsJ7JLF
j8eE9wce1wXDvOVd207LYt31gdsZvrpwt/sC3fCSLN43en+Ue1oXdP64+jnk
yOKNP4OPFgTqApu5WqnymSzmlXtcfxCsC1Xl1cpBH2VxedfuZ7EhuhBKtz9y
ZFgWvxUYTrWF6sILp8q/ERI0/B3zOMXkki78rK/XPUHyec1Is0kX4cL5Xi3R
C+RQyVjrhliCLoTJv269ZyeHGYHBAwmkPf/YnqkXG+QwsGWbfXS8Loxfvy//
2V0OxR6abB2N1YWJ7wdHvuyTw1gNG9mqaF04sU095NVJOdyfr5cnEqULu0O/
Pr4SIod/s7MVFwZLQ8DfQ2cbV6jhPe8JG3aaNOS/XOuWvEgNWTVhpW9LpKGj
3C5ecYEarr3YLCr+SRpkSyb/LeOooctQMrfyjzQ8mRYTN5+vhh8GWVpjqjJw
y627uMNUDQ3jgm3PWcjA5UVU+uq5aqj5qvnnjs0y8OzovJZAIzXcWfvBs0CT
Bu5Qv99GWA1vbBN49nYBDYZOC6azBdVwxarjr5RdaKDjt1N4aEYVo5wSdxw6
TQPBv5c2HSMsd0pwd20qDaI2unWVEb5g23dXpYwGlXXpZ94IqOFHvrf8wjYa
GGS7hGQKqaFkfVM0Y4oG6fpqbUtF1dAiWS1RbDHxV4dcRe58M0FN69wkL8KO
0xz5oAETPC2XWpdFuEelcsDjpwkmNvTO+kA4+/Rlu5WjJiiQXMccIOwW9beJ
PW6CAxVo0UtYK95pse6ECT7aEK5XT7jZJtpGYsYET/bOm0omvGOXp89PIVPM
kRzK1LblwIcPzyK/WpriLq+CS+8WcoBVYpJXbWOKqw8rlR4iLDdS7Ju2yBTH
BWK3/bIh/pT36+q+Zab4STvtqRfh7HUPPpmuNMVGPV9miTUHrpq6Tn52NMWv
93q1JxdwYCxg19vTa00xKlpu3JjwGv0j5hIbTdEz/O33jFU8KHvr8ErhvD4O
trODr9rx4PbNa5L9ofpYNmaxJmcRDybinfvpwaQ9O6L17QIeXHe7cr3jtD7a
nmSkKnN5IDTlXSDiq49r3/j+9p3Pg60XVtKuHdXH6T2iNjMmPKix8G27t18f
H96ouH/XiAcXbMRvW+zSR4Ofe/SCWi3gm1iF4OZZ+kj3eNjl9MECGooiE7cL
6KNdj5uY81sLuPinS2nwjx4KSNECIuos4KMLq09gWA/rZm80GKyxgKRAh4r0
Xj3ERqm8cxUW8Gr6cdLbdj3024XPnfgWAO/vpid90EPT49qN7iUWwHihsG6i
Tg+lZknmhfjwwFH/5NriS/rI/tLrH3GKB+2t+bXThFd5Oe2NOsODU05JFpkJ
+vg0d4XWhWAeSBw+ND8/UR8Xhr43DzrHg2IfYzXdK/p44kz0tv0RPOh9+EBl
MImcx4U+G8eLPBBxDtbQvKqPSr+ux2rH8SDsrMXHzGv6OHBcnJdRzYPqXDv6
ikp93JJ8tMjjFQ9cRr0NqRp9FA3+Qqe95sH5BctTTr7SR8WUjr2Zb3mgt0zy
usprfRR+dm313Pc8+Ml9LyPzTh9FPslUx7TwIDhFLNr5Azl/K259aysPBv9d
T/j9SR/HTLcdlmznwWun6p3d7fr4CYf9Qo7xIDn76tqh6/q47nbHkukTPEjx
XGO8/KY+ri/ICPDy48HIf7l3hu7oo5zrxbl55DyeNcneGczRx4Chn449QTwQ
LByosXqgj9omlNh0CA+2vVwT9P6RPm7P+hPwN4wHV2lOyiVF+ujTZDn6npyP
+vnn6b1l+sj0XSfslccDBaddn0QlDDDexOOZzmNyPge8HXxlDVDm8LBJUQEP
pvNcdpspGaBI86wCejEPOm9UNuhoGGDHo6+DZ0pI/9gFMw6zDfDwu75jmWU8
8FoV5/DQ2AAz5TcJZPN5wPcb/W5HN8CCg5pewc94UDHHdFLW3AC5L147d4lr
wNJZGcrqFRRe/y8lJH6WBvhFe4W/Kacwc1uuoTLhg2q3WCFPKeQJLQ3bR9gs
sv06t4BC71quTyIZP2dTget34g9TNWYvipck82Xs/XWH+D99NpZul9EATwf3
H7tJvnJKfLhwRo70T02qNSd54KDf96ZPKzWgcNWdVK29FLY9v8qzW60B+Tar
WseIf191Ir49YIMGzOdyh1s9KIR/M/kBJM/Q5+53aHKlUPpNtNGS7Rqg0oyO
HVuIv/sdwHnhrQEmLC9HoU0UKiwXPSRxWANiI08nWK8neWTJjx+Cp0h7wvvt
caspVD/0WP0O6oBE5Yuk3Q+/8TW05nITXunAsi0Lvw3O6eVfiNocVNOoAx7D
BQl6N3v5PjWl56w+60BLj8GDp3p9fInIrGW9XTqwHvIWHbzZx0+K45nX9etA
t+Kc4J9z+vkvcsVt/hvSgafOHn9/5vbzB8yuVRn/1oFdbhUlurwB/in1G03P
rXTB/Wp2eOj+Yf5kb0Q5ZasL9pdljkjlD/N93Sz21C7WheVt1jznP8P8YO/o
RxeW6UJmUpbNItsRfoD9nKmDdrqw/qntudSwEf4Oatmckyt04WWR/Rvb1yN8
x7HAxBuE9Z0P5QmojPIjc2Yzhkn/PXn1Dx67jvK9t3G2vbzNgbAvd5ascZXG
QEOlZYqER08Oa0YHSuNPmsGTuSQfyZfMenE6QxplvZZwJW8SPZbMnz+rQhqb
5VWOFpG8tGBC2U+9Wxo/rbky3zydAwrevrR0ERlsnZO1OSCNA8yt73PDDWXw
2Paw/iupHHguY3e8bIkMXp3/EvcGccD6ptW5lHFZtH3t074xgANVJXN/S6nQ
MOeiZLXcaQ60MiylM9k0vFUyXXv9FAfinSZtt66l4aeWbV7CJznw++OqS0r7
aehw9j9Vm+McOLB1x9WqMBpO6M6OXn2E5J3XERdc02mY0e1z1vIgBw73nrCs
L6Jhw+oB8ydB5mAdxRzbuYKJwW7mimfOmMPhU3f448QPP1EO/LTRzxx26CeL
LFjCxNiuDXsWnjSHlqUDHizij486Pb604Lg5mDlK3PpszcShKVH91UfMIf9J
c8VCSyYGLBBpOHnQHDJnn+/ZwmFiXkCxw9N95jD4dOPm+SzC3lWWBcvM4efJ
H7SzY8SvJkTpKy4xh2vhpStUhhioo6opHgXm4NJx5+veAQYa8xL26C80h8d6
R+6f/cpAs+V3HjcvMIeF2d2h24lfFpbPX3rf0hwq56udnPWZgaPWUx63LIgf
176Z6/eBgdE9P6GcQ54vuux4GfHHc4Of9tcQv6Qg+Jg5O7SXb7bE8bUt8Vuj
2R9vps7q4y+Xy9v+/bIuRJrgXbuoPn6t92XpuiRdmLcu7Ok7+X5+kM7Ek7Zk
XaBF3Cn/caWfLxDW/HR2ii74+desddQZ4Cu7nBlNIO0YzP/v6q0BPm/lg3wr
Mj5c4cGPiybf+QLf+wf2E/+o37VS833VMN8w5O700jO6oH1mquCk+Ai/tL3i
7lo/XfhisPl4qv0I/+c8oUdxJ3RBfGPNPK2oEf7xY/MdJY/qwv7y47SGuhG+
wYVKo7L9uuC0nfoQJz3Ktwxf6XV/ly6ozWOUL3AY5QtLh1794q4Lr8vt72ed
H+VnHKHSrzyg4KOK97yH3yi8ImP0VeAeBfsHbuS69BB9Gme1hWdRMHIqvKjt
Pwq/lj29xLhNwezRnc/MOyjsqd8oOp5BgSJ10MWrjcK4/lT1rjSSZ0XQfN8n
CsN9VW6OXaXAYelB6dXNFOraqbrRkymI3368RKaJwpU1GfaixygwfiN0xoTo
4Z4J+8+7DpN8vZE+9CKDwmeFMW9HDlBweO7vOSvSiH4p26fl7KOgRMPJIieF
6NukW2rMHgrazp1bPHyZ6N/aYcmbJN9efvLsjC7J06Yit2W+7qRgx/sxU4sY
Cv/uHrm7ZQcF88x2XLOKJM8vcrPznoo+yJctpr+RVcQ1I1+cNOX1oehy6t9M
whkjbh5RUvrQufFc+biMIuq731otLKYPVPXG7nJpRVSY9WRHiIA+hDctN5yW
VMRre016aBN6ENwic75AXBEbTJdK3vulBzorOXv6RBUx/+O0yLYhPQgzdDqc
JKSIoY29d1/dJv2Pd3vqNCggg6VxIyZdDwxab4c51CmghGrCvQNX9UDoaLLk
3xoF7BZf8977sh54WnecmVehgAWXrykHx+mBVFFmcXuZAtYm7dlYGqVHvg+/
dp0iBVy0/vQOrfN64N7ptbk/TwFXBbwTuhWiB4ctftYvu6uAIXwZl4wXDPjs
vUG5d5hC1WdbFeNqGOC6WvBo6yCFWyoEXnZXM+DmwLDPyz4KD28Q6kol3P9W
+cJjUh88++HIYsJNjzTUr3dS2HDlfb4VGR+rPHUxktRDzhoLqdlkfuc3yetP
fyTv66eDzJ6XDGBbwetj7ylMihYxWfuFAVu0hpj3Uykc8ZxRmGxnwJdnv6ru
J1Eo1xHaI/EfA0J3OTYVJ1C49gbs9e1mwI+lmvmN///9VcW1+cu/kfVWu+RO
RVHkvDJijvQzoGhJgKxVBIUGNd13/gwywOiotEzkOQr9qx+7fxxmgORXl5aR
YAo3qNjvmbWaAy/vtwewf0qiUT/d2X4VBy7ejy59Li+Fz5JubHB25ICO0Xex
GbYU1h8b7Wc5cEDlVq1ak5MU6nYermteyQF/uk4//aQU+htJVNmvIHp/9HXJ
nytSeEv2DT9yOQcWfzhioFckhUmVB6uuLuWAnlONSkKzFIr8OireM4cDt66c
elIYLYMfliYurDLiQFrRg0TP+zLY+Yz17YQBB7S/7bVi18rgZsMG94nZHNib
eW5StVcGfzoVz96ow4FU+1CcEZZF90y10rOaHIDhJwKfdGRxX75M23k1DuS2
TX64zJPFOJ8Hy3crc0DNgSc2Z50suvzufnpiFQtOf8rw0NRko6xIW4nUahZ0
BaTanlBl4/s9WQfqCVfdrtj2UZGN1RuSXEvWsODUuUcfl8ux0f5H7XTTWhac
ePzfB5Rmo++bkBz19Swwi/fYs1KCjSfzQtPP///3lPJpaf+JsjF1ScQsPScW
5Fw384sWYiOrxLqhfj8L/nKX3aQRPVi7/ERB9EFys/g+0G5ooJDdoqlw8jAL
2qJWGmTWU+iRMev5uaMsWBcve+nyK1Ifcz2ji4+zQEvynE16DYWf+rfOkz/J
gscNd7uqKimcEv3BjDzFgs/LhjgSzwnvLDAxPs2CI0sZjfv4FF6wPDv/XTUF
foXRV0Ifi+KLhI012i8pyHksnjjyRhTrWgdPL6yl4ERl9TGr76IY2ftKll1P
wV+K5eMgIYaTwxc2/ntNwZn0ZC+lOWL4R+w6XGqgQD18X2rIMjEcz+zrmHxL
xltd0wjfIYaz9Va7cxspkGVvC5YOFcPnEqXn6F0UtCzW6a9fKo6RvGtzud1E
H71yYp7vEMfHRxw2yPRQ0Phy93nFc+KYs9wjLJ+w5DXF/Pu3xXHzqOx2o68U
fF5A45+pFsd8u42pOwk/km9ZdPibODb1z1U+RnjP2pCiI+ISeK89/vkqwqHl
DkkH50ngQyFsb7vGhe3bDkhKfKaj9Y+KIkYKF0S1w2kXCBuKCMWcucwFz4Dv
Ng8JL9qoGl8XzwWfxUKB/oTRI2xYO4YLvtbCIwOtdHzyeV/rsUgurH43OCBI
eD/T3L8hnAvPsteNl32k46qb6/9wQrmwN22qcXYLHZ/7NxrGruOCkv6OzPZy
Oh4r8s8QWE3mfzy2sr+Ujkfd3CwD7LkQxVnSeu0pHatO7xGQsuNCgkhB4UQh
HT+kXRTMXsIFRbujB0Wf0FGQft5mK3BhReIhLM2jo0Hzo+zZNlwYNT543SCX
jn2l7YxpSy7UajeYWefQcWruiZd/SN6LXV429vq7HsaWD4f5kzzkqjmQYvlT
D/N7ldYN7yf55UZKnTDJm9GnDWe57eLBPqWzfmYjemi+tepilTvJU31/xvIJ
796YW2e6hQd329y/XyZsZOd8L2E9ycPya4+0kPFmJfcVRRx50MiLGzs5pIfy
lwb2+v+0gGCDVcFRLXroueqv9a9eCxgrj2+8QPLq/bkZm878ZwGuEQJGfY16
mJG4Nkr1swWY7zwhkt2gh2VapZk17y2gk3XLrY7kWSfLjJ1xbyygSvnraacX
esjvjDnm+5Lk574+YbsKPZSWLjsQRPKxSLzOyM0yPQySd3lWdoMHBt2lS+rf
62Hyz9jZGXd44Pvx3qued3oYVbGbl5jDgz9Fd7rcyHqHCm/nXcnlwfqtD2Ss
Xuthw7Iwszv5PDB3LrnoS9YXl6cvLid5rTP7xwHNWj0UGpIOa3vKgyDazGmD
V3o44ewcLkjy2Pnc4lVxL/XwUnT5pmt/eWB0R8hgbaUeQtjHjIopHnB1fkkZ
El7Pq3/WJ2gJIvZWc9wIe7qWLpIRs4SLr/aunyacHbc511TSEp7tzGOIVOsh
F9deWSxrCdfMhPUO1ZD9VNfFrlGwBB87//ULyXrWJ96Zr1WxhH+sTw8Pk+cz
CV4oaniLBzOrl27o6dTDf2Yx0c5ZPFgxtfeP3H96eOpNYt2FeyRftpxTukVY
/tiKJUUPeXB2lv/atC49PH3kyKkvJK/ymvTUZrrJ+3Y1/veviAflO1JSqr7q
4VN3601SJI+O7Hr5aqhXDz1YxUYyJH9W7hx3DxzQQ9ULITk2ZP8XP/JubFUg
+dxYMppB9u/f1qTmoKyPfXsXz5cm+9fr2fLoqpo+vi63smsSsYSP9zf522vp
Y4xoRWKouCV4zr+y2Gm2Pg5M8L9rSFvCBr1Dt4oN9fHdohNmiTRLeJRnOMtn
nj66raxbNkzOo7/I71ooQx87LbwpUXsdkHW62GtWScOzmpbXzzjpQJqV8cKC
lzScDgpJaNiuA9OW9fbODTQMVmh1Hd+nA+8MZ+vRWmho8Hhi+8AJHehf2cr8
0EHDrfZ5eneCdeDPs4tLs/ppWP4od5lelA5sNrkfHfiLhkYP1yZtuqwDd8+E
vM0RkENxm5akBENd2CxgbVi5WQ7bZr2TDWDownurQAVTNzms8H32UpmnCye8
TmpI7pRD/agszU2LdEFvdqaJ6345/LzU/oKlvS7IV7d91z0uhzF9u989Xa8L
gfdevFh1Wg6f5XX1N23VBZvMu187Q+XwnmT+rBBPXeiStqWaL8qhpm1pZv4T
Lqi2ljKfnKej9A9Jn4o8oj+DET7mUXTstZb6xr/PhZTz8HFdDB0jovXdcrK5
oK70/KxUPB3H4rYtO3ebC7cHJ5rcE+h4pHRcbkMGFx5PtB5cdZmOsmsmrFWI
vu4v1jNrvEJHfsVjh7dJZD2QMh5KouN6o/0+ji5cKLwZwqq8Tcfi/8YHBZ25
4OywiX/yDh2LiCF7vIGMj3t+4hnhqxkCK3at4cIDSQOzDMJDHVaLNRy4UGR1
eUSF8F2PsqZ3y7kgtHhU04DMt2qB9vn4xVzQ3ZPMq75J9FimsGPbQi503tZQ
FbxBx4bDvpHKb9mw9r3oBS3F+XiscOvy+Q1s0NhrYvCANh/f0bSP+7xhw1ue
xVML6fm4MtglpOc1G8aDr7gUic9H8bPrXwb9//+J7dqvxRadj07BN4LtCN8U
20DLEZyPs5K4ry0Jt81el7Jwkol/j5kWbibcPJLcNu8XE2sXCx+hyPqzLi/b
wohj4potN7v9CUt3+iTqXGDiPq8jhUOEZQt6/qiGMPGW9uJbse/YwH0WfE/n
NBONrXc6bmtkg3XlxrdcHyb+8WuzWNvEhoslygE7DjJRLzvz/cH3bHg+u7T0
rjcT00LlThd8YINzseZ5OQ8mVsYGDY+/58CiuVnSSkEm+G3PLF7IOw601O3/
rhliggU7KtsmX5M87bWwqf6cCapmTvzZVcuBib8ZpnPPm+B/I4bZFTUcCP4z
dnHeBRP8/iVbWbmSA+yVUNtAQmPHtuv7XZEDW9d979W6aILmy/0700o5YL/W
SV8m2gRdG/a0RIVz4J6Lg3FlkgkKb3hy42UIB0Q+cgY3J5vgno7SSeEgDlg2
6/dHE757fqH+wtMcuJ4ZMrmb8J/jqmv8fDnAoddbfSXjQ9cOlz0l+b85bu+I
GOF476E7giT/5x+Kyay9bIIxS70WrjvAAdXIPiVOogmaPPF3zpM0hAb3+Vty
Xf/yK3z8feYRPsRs7c9K/8tfdqY110rCEGK3x+7Y1vWXr1o6EdczyxDOG75f
kWb0j1+V0dhrImYI0WW2Lvbe//hu5/2KpUQMYZdwfikv6x//XFjUsghBQ9go
4f5nce8//lyR/RK3pw2gfkm04ZI5E/wFqzaGaTYaQMrlKZWc5Gl+eu0KXvMb
A4gTC/jq1zzNn7PLv8a8zgDidUv544oz/J23327lvjAAZacD7yZXz/BN1meu
+VJhAGf8Ks28z8/wUyV285h8A8j01m9Qwhn++V0SraZPDUDqBreq+9cMv+3O
LmbzYwN4R3t+pVVJAFM/lW7RruOAzZXxzsaLMjjzwiji40sOmKdPq3vnyCBx
/Af2kvdr/a3lo0K1DJq8u+H7lrzfZHc3fnWHDIaEbWXLPedAFd944ug/GdxZ
dt52Lp8DJ772bBFXlMU3R7OcNMn7vvl23ypfE1lMG1ZZOlDEgW2Ni389BlnM
jpofMniBA1+OtsktO0rDe/c06amkHgojghcvCqfh6zKvCNNQDhyaMY0bSqEh
/+WRjGukHngPGU5292lo91kodozUw63rn/Ktymk4V6IvkDrFAZOqwXSsp+Gu
789ztvhwoHNR6I83rTT08s7ZvJ/UQ7VfxIrtvTR8t4Vr0zdGwYz22WWZ06K4
zPXdaOkvCsRXXHnyXVMM7TVMvLx+UxBru6nPz1IM+VH5cz8TNrYZ2g6bxZAn
1D9pPE5B1qs2f1MfMTx5+OyjJYS1olaHmFwSw8aH/gsowtus7jw2zRND2Tj6
9REyviBZwFH7jRgu+6clazJCAfvhctlLPsSvarGOlQ6T/isn13pdEkere1Ea
eoSlcvSSBPLEsfDHvO3OQxSk/P63dctrcRxp6Hzq+ZMC1VRXS5cBcRwMNyqF
HxRETP0V/TNLAv8cy6KNfqegWSS8QdNQAkNO/vPzG6BgNO7lzwJbCcy652xj
e9gQshwtrKweTvBZ1u/Gu/YZQpp+krVf/wQ/QemE23xvQ+i17ZOc1J/k1xj2
WM7xJPVvv2B+2pZJfqnvrnO1LoZg65K2AaIn+VarDA7M3mwI/JkVDhU4yV9B
LXect84Qgh9KMSWGJ/n9ztM5ffaGkDEkuveXzhQ/KWZ1RfaQAWi4fj/z7fIM
X+Rw0UajfgMw7fFtd3s+w3cUvT/m3mUAKn3L79oNzPBP9/vedv1sAL3HHZoq
xQUw/NHpi/rvDYA7a6VauIYAFvQVjuXXG8Cqio/aHSYCqDMbFitWG8A/IR2L
aksBXJh++69duQFsmmyMm28ngA9/30xvV9KHXTMzd+eOyqOX9Pa4Pjl9YMgH
39g+IY+cxCSN59L6sPE1K8tcWAFbG3/l7RPXB8+2MI10SQXkXxno7RXWhxeF
7Qlp8gqo9pe9z3pGD2rOzx41VVPAY2FWU7v/6YHxR6ONS3UU8HCjr9+RX3og
miCn1W2ggEet94ivytWDzDmFW6YOKaDiqyce5tl6sDaVZq7no4C9K8KuTt3U
AyPLcuXqUwpoamNcdzdND1qaWhb2nVFAf8Uu9cXJelB6fIn1+WAFXFPCKK64
pAdRyQZ96aEKWNVZ3M+O1oP7XKPDrHAF3Ps97G/ieT1IvxTryItQwC2OMuEW
HQbw9E1ZT1jsFN/S2lJzsN0AVhS5LA94OcV/IiOm50CYfn9o3gqhaX6OzrY/
674YwLzAz0PPrab514zLzYXaDKDCYqtJ/dFp/uYvE6kurQagWG2XtSxnmr/U
Id/E8yPRI25dvFTnNN9qrFRCqdkAOppe+k+rzPDvnBXS5xI9Ss5aZXBBVBBz
el48SMwj7+/KER3J2YJYduWQ361cA+h3jvkpYCWIzIjvtjvuGsDKKZaF+wZB
1Pw3/f1DpgEYynCGlPcLolOJVOr0TQNwpGf7qoQKYvjuL5farhtAtkhAyvqr
grjAmSTsq2S+Jd8vleYJIh6OWdfozwKL3T9E9pmzUbStwuOZH8nbYzEvwuez
8Vi8S2o7yc+cPKvwJDM2djqJhTMI5xqvSbw+l436jJQLub4s2JbQ73jdkI3f
17SPuBN+fvCsdMpsNg7buv1YTJi16gwnXouNj5Yti95MWF/9lckFNTaeHZ18
8ZGsV2Ng65LcTqHZoLLgbPI8k+4DQZdaKQy+UJ95hbC/azE3vpnCmH6HE0Dy
e5Z54ecrjRSmXUwT1zjDArZzc/2dNxSeODvaZhBAnu9ypPuzWgoF7vU4uway
gOvm1dFXQ6HqyEd+VRALQhVzL+tXUrhcYJ9Ysqg5NNoqqEsLzUf3CJW/G4XN
ofrnYTnvGSbu3sU+yRA0hy7Z5sjAf0xcGvOo2niGDSyHJ5E7iH9pe7dS03aK
DS0HepTVh5h4OOtRou8EGxbsH3FM72fiVivZJU1/2bDI2ubgVDcTn9MstDb8
YYNMlXwDu534kyCjtdLdbJi4WMbeGcXEZwZzLB/8x4bSZuclvmFMFNbNFzjZ
yQbLO51n9wUxMTD5hvuODjZsz9sYvtiPiTY98X9OtrPhb8HO3wLHSTvPf3P+
FzaU3dkUmnOAibzXbsOKhGF+9fBi4n/k08QMr7WxQWrmhMTr7aT/OrHc57uJ
fzTt/aQ2pIzFQXS3yJ1cSI11pEn+UUaRtME4a08u7P70JGHrjDIe4t1Z2OLG
BXrucRUxMRXc89Fn1/ZtXLjicTFDXFoFl6RJqDZv5kJgrGymm7wKDv7duXvh
Ri7onTSbFlFRQcfN2f5Ja4mffqv79Y+6CirbAP2JFhcuKHUd+eKogq9stpuK
qHPBcPeFS9prVTB+439L7JW5YMuvE7qzXgWFzsTejZDnwl/RMtsTG1Wwu8nk
aqUMFwa3nrG46KSCim0qq6ckuHCxvnNpP+EV82QEuWJcuDXv3fz/txvbVQ8d
FuICdXkv9f/xX7zlF3meYsDCB0P0710UnnXdKvDPjwGr3T9EfyL1aHx/86Ff
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
YS7MZEX9DOVIwVDzb/0/otwYOaaoLF0tBfLLbM4N6HAjW4tq1vdRCqaEsk2z
N3Ljrt/uiokeWtCY8HhlRwUXWlduuiu0UwtM3E4rcjdy4bopvz/WjlrQVGfU
LdbHhTSezQHOm7VAdnRfz9QUF9Z4+d5euVELuAPWLi4T4kbF3hmNznVa4Ouh
u2yjAjeqr+ko8VyjBd+2HgxK0+JGC1sPk+cMLRCZtlDLM+TG+ybpc++aNEGj
pveezGdufLtlxQ6eOk3Y+3F5bHMrNzrn/bus9E4Tfpkmm9j0En74pErhlSaI
zPnp7R/hxh+aovLzZZqwgk/knM4fbpRVpj+pK9KEExFBnonT3NiTFdR9JU8T
pgUGjibMcyNNO2dwy31NqM65v38JNw/60KI782/IwtOEx6/HjkxzYpJFuAIy
ZEGmR+9NdME0J2zusUxIpiwk3ri0TWlkmnNuuaAmJ0cWbK6kz13VneFoP79/
zyJfFvzifJ43+M5wbMxqYwUeyYK6spXmw5wZzibVJHXeIlno8BfwnBmc4cRS
Xlmzn8jCtjer913VneXE5orWfENZKLVJy1nNWeAkmUq9t3opC4Eu6qlcXFx4
zVDf8zeJR+ZlTnpRyXmklb2s48jC87+sVU+AC2WH+C8PPpeF2jBPy053Lmye
/TljViYLux6WiTZEcWF6CTXh01NZ2OStdzv8Nhc6HvCyvvVYFm4eXrK+msOF
l03uHV/aKgMOtwL+7TKc4WS6tkkr/ZSBTIeaXX1uM5zPca1rjv+WgVJV4+UR
yTOczSzXpnUzMuBoHn2er2KGY7rkiKw/nyysbgx66Do5w1lkNhE3ISYLj3jj
o33I+hQNC5Z8lpWFxt+GIqK7Zzmuhw+s51GRJfresZ2SNsv5csYquSyMzH9/
1qzfhwXOtw1xv9gxsnB7QetOHy8X1gbxlPDEk/neUJ8tVOfCrvOzx6WTZCHO
N6iXi6y/u8x89d4LshB21uTQKzcurPw37j1zWRZUvkt4/QznwoXT/D8+XiP9
+w9u2pHGhXN7Ts51psiCApPrsvBzLvR3M7zz4ikD7iT3m+qR/OmzZPp+7mPi
35O3v91baYifvQtKCvMZwL0746X/a+Kn96bRP+UwoG/bSntL4qdPvljwEsli
wPZLWhUjHEO0W/4w1vMuA/adPXR0P8mv+7tfV3y7zYCWFzo/n5YaostNV6PA
NBKPuPao5akhtoz7mfj7M6Dwq7+9VZIhnv/n0a7rywCDFPllFgmGeN1dNVPK
mwH/VnPqFE4b4kTXUW8KqVc8BT0MK08aopXixS4HTwaUtAqt2hJtiLdLRsqK
dzEgbs/DudJwQ9x+aHP0elK/ONXPXf3//41GzP68y+NCxluQW00PMsRHgdKr
w5yI/phWfNrx+i/H72dtXf0+KXB/8Ddef+AvZ+MqOd2iYClQdnlZqywzxUk4
JdEjGScFb/qeeYmYTXGGG826O4leTfXNru84MMX59q3Li3JXCojtKY2+NcWR
TVKffF4oBZotL93qvkxxMpoWnSl5QfQtLYtdIPKPEy1rvSfosDQccDsrWaw5
yzngkW39OlwaftVa3ON1neXs9w5b5RYvDe6fGQLEIHLKd9s5rrkkDWGJBv0e
jbOcIpPNui43pWHJTvNyHXmi16pKWJgpDZ87DpV9dprjzBw2P7OqQBp6mYKC
9NQ5Tuz3m2HjT6UhYeXtUs2OOc6Vq3xNSorSYLM6fnDs1CSnl7Nf75IWieeH
xuS+mOQcnzDNdDOQBqjwjzgzNcmJ6fjZcYQtDXpbN1/3WfmX4/p9cdcHc2k4
3ZfhvjzgL+fJ513q+6ylYZ1q1PqMwr+c90d940y2SgO1dfXj/LG/HO7RRQHr
dkgD5+qDJSuMpzg3JockBUqkobk3aYY2MMNxNWvbBi+kQT3jjdyE3iwna6/e
+qxX0uCzIeRZfcAsxyL8SI5JtTR8OF1IySmZ5fSWPv0yUSMNjlrTg7YLs5y2
t8Lx9bXSsMKrftNFyzlOpMUnheZP0vCNFim7JWmOo3jz3ab5OrK+NWMVOxvn
OG8GIwx+rGfD2koDF787FNzUO3RHzJwNPo4b/7rmUnCfqWaxsikbyql6/5KL
KHh1RVSZNPFrofTMU3NlFEyGWwoTxmzw/tTMzqigoIDNL5MKGhsKhWo1Q6sp
+CQd0iP1iN/69bk2+gMF9e/bfNJfzgZ93igorqPgrtURS5uIn+zQKg9YJ6iG
jdL7c0OJ33R98kwvQ0QNZe1MKXLEj3qsZdOXi6vh9Ln98g/aWKDbq8nXtEgN
V/9eQWd/Y8EV2lx6toQaSi6XkKtuYIHFx2PJdwjn7nJy3V7Hgm9P3356Sb7f
G380d+g9C/4rvjzIT/qTg77hw4ZskBLRjigdV8WTS4t3PiPzve0VZfmbi4Id
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
/Q9dsGC/
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.009901337608738004], 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           8, {11.286487689596273`, -10.738186552995511`}, 9}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           8, {14.499041479609055`, -10.025410505198119`}, 10}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           9, {11.388359855197676`, -9.71528434072621}, 8}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           9, {9.08188104982176, -11.465117586431768`}, 11}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           9, {8.741970112193712, -9.0052590365106}, 13}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           10, {14.39686294151859, -11.04849877495461}, 8}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           10, {16.962382000291885`, -11.706731090975548`}, 12}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           10, {16.848110355716805`, -9.39869564151687}, 17}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           11, {8.391626112708003, -10.777395201074645`}, 9}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           11, {7.786032362829632, -13.35134816423583}, 14}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           11, {6.685285116750112, -12.81594599899916}, 15}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           12, {16.1730405276403, -12.077941871577691`}, 10}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           12, {17.37126061395622, -14.205659211383837`}, 25}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           12, {18.158992490521612`, -13.236924610564351`}, 30}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           13, {9.578147165265078, -8.59597105089678}, 9}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           13, {7.852306411206103, -7.13947030249547}, 16}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           13, {7.748174344559696, -6.522625637693123}, 18}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           14, {7.066706559096457, -13.177148374235879`}, 11}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           14, {7.51471320326793, -15.188972824337327`}, 22}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           14, {6.904542888885564, -15.140223217134924`}, 23}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           15, {6.498631888661176, -12.092901563264586`}, 11}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           15, {4.84274090699964, -12.874238492967857`}, 28}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           15, {4.714022057182883, -13.412353816494527`}, 29}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           16, {8.217556040255277, -6.808691118230696}, 13}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           16, {6.814633761626219, -6.6062763447148125`}, 20}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           16, {7.52720564791644, -5.741584537255073}, 21}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           17, {17.4510371501625, -10.152634031897177`}, 10}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           17, {18.32422760516539, -7.774745602349796}, 19}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           17, {19.328828008271554`, -8.191550417375453}, 26}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           18, {8.499887027419502, -6.2504527807026165`}, 13}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           18, {7.6927065207095175`, -4.330308522912096}, 24}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           18, {6.780082413011911, -4.782919963946102}, 27}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           19, {18.962267248315246`, -8.003290471839376}, 17}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           19, {19.403575599504553`, -6.226022311884445}, 43}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           19, {18.631305211824746`, -6.17352844994922}, 49}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           20, {6.843396205970498, -6.143848457525489}, 16}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           20, {5.843892326459141, -6.613218213324159}, 31}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           20, {5.489118426991885, -6.370499247118781}, 40}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           21, {7.930113750033101, -5.870909646717271}, 16}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           21, {7.9593363086378615`, -4.895718797540063}, 32}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           21, {7.892421867180904, -4.579061268503986}, 33}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           22, {6.952441323253891, -15.236361042172446`}, 14}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           22, {7.72301632034762, -16.484171900269857`}, 38}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           22, {7.392644198500243, -16.771860827401497`}, 41}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           23, {6.490319112622552, -14.834954266946129`}, 14}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           23, {6.27831052360511, -16.02135875589633}, 34}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           23, {5.920095108202949, -16.275880977163236`}, 37}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           24, {8.238288520973656, -4.4982041313817875`}, 18}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           24, {8.565244469330327, -3.0033370474898904`}, 42}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           24, {7.829209553304385, -2.978961457813041}, 52}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           25, {16.66376461000041, -14.130311109786321`}, 12}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           25, {16.720321977194633`, -16.000943278510515`}, 36}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           25, {17.366794947776263`, -16.001394839684032`}, 48}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           26, {19.523358866062836`, -8.935022418400806}, 17}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           26, {20.90828932488056, -7.551021171457174}, 45}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           26, {21.527364159924968`, -8.016326520210285}, 46}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           27, {7.235166300687758, -4.320762057241813}, 18}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           27, {5.713864398685464, -3.5827039991300227`}, 35}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           27, {5.617690388128849, -3.4929424821709167`}, 39}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           28, {4.888871384651587, -12.461883795433254`}, 15}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           28, {4.114371852272679, -12.967318215547206`}, 47}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           28, {3.6315429946518, -12.526793449051603`}, 51}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           29, {4.465875349095109, -12.818550302994606`}, 15}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           29, {3.312142128650678, -14.109567586760202`}, 53}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           29, {2.9990037511178165`, -13.815040738757816`}, 55}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           30, {17.87272585972068, -13.818251928129438`}, 12}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           30, {19.367117381454523`, -13.890673870828753`}, 44}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           30, {19.808539453268075`, -14.162767197977567`}, 50}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           31, {5.7316446011569155`, -6.3907526775176535`}, 20}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           31, {5.18327091138523, -6.698272857966306}, 58}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           31, {5.350643572292609, -6.988443248458813}, 64}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           32, {8.129559437889181, -4.974107461403468}, 21}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           32, {7.936720544134439, -4.472424836592042}, 71}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           32, {8.437607317335706, -4.566433916068527}, 80}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           33, {8.263663198318412, -4.679547255997515}, 21}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           33, {8.318885682153029, -3.6881916759734756`}, 77}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           33, {8.097608309944613, -3.609540830902671}, 85}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           34, {6.02971668919922, -15.969187856646318`}, 23}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           34, {5.93164405116773, -16.387068051735813`}, 66}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           34, {6.1411670469606365`, -16.754120545606174`}, 79}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           35, {5.993838905460478, -3.285952923221792}, 27}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           35, {5.139635956612214, -2.621443018905745}, 84}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           35, {4.920588168526908, -3.019354705596452}, 90}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           36, {16.306441976458395`, -15.74469290681586}, 25}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           36, {16.157557598410047`, -17.107536878301595`}, 72}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           36, {15.827490347000138`, -16.930296672925085`}, 74}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           37, {5.590354403501446, -15.961401531703178`}, 23}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           37, {4.986516275818612, -17.003838107315875`}, 62}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           37, {5.1686438510547195`, -17.113218833002296`}, 78}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           38, {7.394210596716797, -16.650580461682697`}, 22}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           38, {8.143020373009659, -17.377471596713736`}, 61}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           38, {8.029421108258253, -17.343894981497677`}, 69}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           39, {5.969718146246295, -3.156628682616167}, 27}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           39, {4.7890136923902995`, -2.6381812700725407`}, 98}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           39, {4.854503137276087, -2.4565166792675113`}, 126}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           40, {5.5901952665206025`, -5.984835072540941}, 20}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           40, {4.55456022886569, -5.966379310651161}, 60}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           40, {4.505483294393384, -6.167255594930656}, 67}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           41, {6.9575697939375685`, -16.686013031965338`}, 22}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           41, {7.202590939903557, -17.850055124176823`}, 68}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           41, {6.990913266229396, -17.88493732990162}, 76}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           42, {8.843132584215269, -3.3213250428312646`}, 24}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           42, {9.39825570762849, -2.4015084435616343`}, 100}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           42, {9.387309094496294, -2.2970497664201948`}, 128}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           43, {19.73430560230712, -6.606364151283479}, 19}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           43, {20.641178203800962`, -5.763401347260417}, 56}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           43, {20.275469433795973`, -5.231091999946695}, 57}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           44, {19.31867484680828, -14.182222336426335`}, 30}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           44, {20.132427623613534`, -13.739411920359304`}, 63}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           44, {19.942716196051894`, -14.509452185125104`}, 65}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           45, {21.26489418103157, -7.899763505411259}, 26}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           45, {22.13321902395689, -6.715686744723347}, 70}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           45, {21.424371391018475`, -6.689675811127305}, 73}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           46, {21.486931169622473`, -8.641694967650086}, 26}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           46, {23.13662327151218, -8.407827488515267}, 75}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           46, {23.10584115353256, -8.031293228005527}, 87}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           47, {3.9194260779984096`, -12.821293188754293`}, 28}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           47, {3.5373880974246728`, -13.35326130082575}, 81}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           47, {3.8965768584112177`, -13.514844043109735`}, 83}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           48, {16.826448014271705`, -16.128777827421484`}, 25}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           48, {17.673182461485855`, -17.33178647506016}, 92}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           48, {17.62247319268667, -17.48668404147919}, 108}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           49, {19.143949548779645`, -6.105727669100197}, 19}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           49, {18.360917547469835`, -5.077106199646176}, 54}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           49, {18.677374396093132`, -4.683554837197425}, 59}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           50, {19.512422149749302`, -14.663211116718966`}, 30}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           50, {20.955121089867408`, -14.752440028856473`}, 82}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           50, {21.111444045852338`, -15.196501893665724`}, 89}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           51, {3.792329495545831, -12.180175232075532`}, 28}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           51, {2.7669378595803944`, -11.979743519120566`}, 97}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           51, {2.7324502512369824`, -12.204893470086544`}, 102}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           52, {8.265248498906015, -2.8648258085190546`}, 24}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           52, {7.540824817267472, -1.926238446485301}, 132}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           52, {7.683747686849826, -1.7787507784382315`}, 137}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           53, {3.0192124895998367`, -13.766538091367567`}, 29}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           53, {2.3127462837072965`, -14.729507597930372`}, 88}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           53, {2.4802772206464603`, -14.847203287281113`}, 95}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           54, {18.611680166627814`, -4.880927931576173}, 49}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           54, {17.840064534637907`, -4.445138973994232}, 91}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           54, {17.972762499272722`, -4.3363856584066705`}, 93}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           55, {2.9420221152354378`, -13.343639340147366`}, 29}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           55, {1.8378542868090901`, -13.972016071859125`}, 94}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           55, {1.7563939587162165`, -13.779599953210548`}, 96}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           56, {20.633766639876427`, -6.0859001919539075`}, 43}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           56, {21.434710091620637`, -6.061029430862321}, 134}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           56, {21.480556008860756`, -5.62095394709722}, 136}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           57, {20.655406766601043`, -5.440433035073632}, 43}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           57, {20.75728781116223, -4.255817659987516}, 120}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           57, {20.959950066272217`, -4.286341533051777}, 125}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           58, {5.2200352805319925`, -6.535213397673796}, 31}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           58, {4.86199516520254, -6.687738318544285}, 161}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           58, {4.780981665181194, -6.490594977840415}, 162}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           59, {19.099957989332612`, -4.752038910403}, 49}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           59, {18.801825426321063`, -3.658036178452873}, 142}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           59, {19.023038003130235`, -3.58895968672807}, 147}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           60, {4.666605801502377, -5.7409331050208925`}, 40}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           60, {3.9933742051623384`, -5.6148159987304185`}, 204}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           60, {4.091083262862016, -5.7729566958716525`}, 233}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           61, {7.89419523955802, -17.51363029227656}, 38}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           61, {8.482472334467035, -17.95630295656428}, 103}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           61, {8.378112185980449, -18.083856451077917`}, 105}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           62, {4.815382788782643, -16.756406928531433`}, 37}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           62, {4.303845524015863, -17.343448835201386`}, 117}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           62, {4.41516206373562, -17.414407617853918`}, 129}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           63, {20.28485157153054, -14.017317475901914`}, 44}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           63, {20.931675742830194`, -13.572497618773996`}, 101}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           63, {20.94009248051599, -13.340654956541291`}, 110}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           64, {5.182500895830837, -6.8680851944716075`}, 31}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           64, {5.065336841745974, -7.39478846678102}, 169}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           64, {4.8989997830469285`, -7.343428594247045}, 212}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           65, {19.67510767412871, -14.52443167871768}, 44}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           65, {20.07885304595309, -15.085680944449448`}, 123}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           65, {19.963316761704704`, -15.276810064170636`}, 124}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           66, {5.95134516068332, -16.299451818068423`}, 34}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           66, {5.639036928586203, -16.282886967265217`}, 111}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           66, {5.738828611796704, -16.499373917757257`}, 114}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           67, {4.5078768028230005`, -5.873465863467638}, 40}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           67, {3.7537093617580073`, -6.030351973056493}, 171}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           67, {3.797711143199826, -6.149337818650874}, 173}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           68, {6.898903771737001, -17.854103750867065`}, 41}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           68, {7.091979958364683, -18.616636966000147`}, 133}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           68, {7.195322294007221, -18.57941386640237}, 141}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           69, {7.822701636369249, -17.419180058057442`}, 38}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           69, {8.08272069486441, -17.955147212559414`}, 104}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           69, {8.286978050689298, -17.745257260134615`}, 116}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           70, {22.30992970376501, -7.113493965076568}, 45}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           70, {23.200956426746398`, -6.441569140897105}, 86}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           70, {23.127399791240755`, -6.227725375384208}, 99}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           71, {8.101921293047472, -4.377508591924363}, 32}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           71, {7.789037030435096, -3.9711877807559746`}, 172}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           71, {7.666416524046841, -4.124594858584143}, 189}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           72, {15.791569726228483`, -17.009372505055868`}, 36}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           72, {15.945370518298024`, -17.974196724900693`}, 149}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           72, {15.802274699901695`, -18.086745711593814`}, 153}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           73, {21.754896310838376`, -6.67181595099395}, 45}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           73, {21.351318953807173`, -5.91281886045723}, 107}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           73, {21.582104892491266`, -5.752438677459033}, 113}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           74, {15.631138344046983`, -16.670816376082705`}, 36}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           74, {15.052226914758183`, -17.29053567404031}, 145}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           74, {15.219184692599994`, -17.48543264410111}, 159}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           75, {22.993832279478298`, -8.807306471387527}, 46}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           75, {24.110896493980814`, -8.93717995286776}, 175}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           75, {24.143588715827025`, -8.734453547548629}, 188}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           76, {6.70784325960117, -17.756532820204185`}, 41}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           76, {6.561249059335767, -18.544545004332395`}, 165}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           76, {6.67965570247754, -18.56246136117002}, 176}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           77, {8.525294863154514, -3.8140075581468524`}, 33}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           77, {8.715580482720036, -3.2034783452558733`}, 220}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           77, {8.578767824307064, -3.197260752499323}, 226}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           78, {4.897032787411163, -16.95253921689103}, 37}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           78, {4.665920816480309, -17.739060542941008`}, 156}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           78, {4.782260920526524, -17.753501828065072`}, 160}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           79, {5.902098622608758, -16.719216272865285`}, 34}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           79, {6.1356027861125355`, -17.253332974802298`}, 151}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           79, {5.916085061877568, -17.368406119461298`}, 154}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           80, {8.449229073941103, -4.750473163865105}, 32}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           80, {8.925519295286904, -4.642532271269969}, 182}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           80, {8.866350248815593, -4.490768559742378}, 197}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           81, {3.4911562204075546`, -13.168677017343159`}, 47}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           81, {3.027686677916734, -13.415742167356548`}, 122}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           81, {3.3053493074769795`, -13.491825477917748`}, 131}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           82, {20.916644238836778`, -15.090908251255795`}, 50}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           82, {21.78522370650823, -14.77089878986311}, 112}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           82, {21.833360248966358`, -15.050093345754547`}, 115}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           83, {3.684317929395675, -13.511917607605238`}, 47}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           83, {3.698004138100333, -14.0804198672034}, 119}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           83, {3.823715686475851, -14.034808751858286`}, 157}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           84, {5.420839156231642, -2.540891972879325}, 35}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           84, {5.051777701720018, -1.8791947398232889`}, 240}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           84, {4.957774386509729, -1.9433672112134894`}, 241}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           85, {8.393897478735036, -3.619368512090638}, 33}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           85, {8.247726938808709, -2.8559559655968987`}, 249}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           85, {8.124815766455177, -2.9196747916666315`}, 250}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           86, {23.24913591088232, -6.7038085340788545`}, 70}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           86, {23.836876036836117`, -6.493994545411991}, 218}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           86, {23.862686639936566`, -6.308435410107821}, 247}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           87, {23.192555447937497`, -8.486004914525697}, 46}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           87, {24.22519863394339, -7.793937009685109}, 231}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           87, {24.325710868225716`, -7.965021464880247}, 232}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           88, {2.1720045014121148`, -14.465223265180336`}, 53}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           88, {1.6125824872340426`, -14.966654245323877`}, 106}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           88, {1.6414073088711043`, -15.074682171620314`}, 109}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           89, {20.778873113131386`, -15.541071469730092`}, 50}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           89, {21.982248597229248`, -15.997862599741534`}, 118}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           89, {21.87778526449201, -16.18603168716536}, 146}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           90, {5.008366912623933, -2.731108407824494}, 35}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           90, {4.236720516355539, -2.8061530792949334`}, 225}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           90, {4.224202445380565, -2.692286387711684}, 258}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           91, {17.998597671375254`, -4.268386837651605}, 54}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           91, {17.421386748638792`, -4.066699022516332}, 152}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           91, {17.464447473164846`, -3.927969097622023}, 158}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           92, {17.334177467554515`, -17.472151492018714`}, 48}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           92, {17.75168639320511, -18.344239804338613`}, 139}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           92, {18.13612661056449, -18.092249272743253`}, 144}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           93, {18.169943266949726`, -4.259627822496284}, 54}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           93, {17.912897852168772`, -3.783731518305856}, 211}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           93, {17.792935972483864`, -3.7730231751709105`}, 215}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           94, {1.7374018095518111`, -13.665359573188065`}, 55}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           94, {1.0360924084583478`, -14.10994236756237}, 135}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           94, {1.0995785055684115`, -14.203453934690138`}, 150}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           95, {2.2369718493003514`, -14.659383337883046`}, 53}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           95, {1.8942436755711805`, -15.382006101678863`}, 121}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           95, {2.0066754159313587`, -15.419271021776714`}, 130}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           96, {1.7860542802465034`, -13.462153557371405`}, 55}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           96, {0.9796963461349935, -13.590996163508708`}, 138}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           96, {0.996457085558816, -13.706865026150362`}, 143}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           97, {2.9252880725505475`, -11.756855228365936`}, 51}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           97, {2.2744597000755333`, -11.499343369279776`}, 127}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           97, {2.2211653996139953`, -11.61453629744098}, 148}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           98, {4.975203380020211, -2.3748811371004273`}, 39}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           98, {4.196866293747957, -2.0744418691364226`}, 238}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           98, {4.156421328309984, -2.1720293642017054`}, 251}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           99, {23.316867810796126`, -6.488049120819986}, 70}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           99, {23.85068967539727, -5.850498495702032}, 209}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           99, {23.749289780714903`, -5.78933846043537}, 213}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           100, {9.557969004119416, -2.5925788991010905`}, 42}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           100, {9.777835941276939, -1.9954962368425093`}, 198}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           100, {9.968001503681199, -2.079484292502764}, 239}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           101, {20.91701230447195, -13.765355945573857`}, 63}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           101, {21.47292076851234, -13.657612706488415`}, 167}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           101, {21.190433916639005`, -13.551429796252458`}, 174}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           102, {2.7638924813703336`, -11.917582819951251`}, 51}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           102, {2.0162146698547425`, -12.013106238184752`}, 221}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           102, {2.0483531075643313`, -12.129076406071064`}, 222}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           103, {8.353705583552342, -18.08290817796199}, 61}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           104, {7.920551974404764, -17.92957254908434}, 69}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           105, {8.194006875275221, -18.123617601058843`}, 61}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           106, {1.5648996743254298`, -14.801002119619515`}, 88}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           107, {21.550088443221114`, -5.839295608313875}, 73}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           107, {21.24026033122868, -5.356746979865001}, 208}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           107, {21.160608550293, -5.47905808674236}, 228}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           108, {17.20142598465441, -17.566712212261567`}, 48}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           108, {17.790311532721805`, -18.57674854333903}, 140}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           108, {17.894582304053454`, -18.547403323975363`}, 155}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           109, {1.523976336548452, -14.905051067848174`}, 88}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           110, {21.06139889273473, -13.58376746952592}, 63}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           110, {21.62088042953507, -13.166405032134575`}, 192}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           110, {21.52048281147696, -13.070925961505587`}, 203}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           111, {5.690134209798229, -16.188362685323238`}, 66}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           112, {21.844089247838365`, -15.010455457004594`}, 82}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           112, {22.446436802274857`, -14.781506737651142`}, 187}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           112, {22.46405769053208, -14.67267921102272}, 190}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           113, {21.83101784493795, -5.8472091311593966`}, 73}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           113, {21.786914494236385`, -5.174963761649209}, 223}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           113, {21.923740341941002`, -5.165592675682601}, 229}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           114, {5.641947083784982, -16.421821419702347`}, 66}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           115, {21.717109829679483`, -15.263720050115909`}, 82}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           115, {22.214199888667267`, -15.451159602916693`}, 205}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           115, {22.38215999742881, -15.340630410672022`}, 214}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           116, {8.2095185717745, -17.88189482744886}, 69}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           117, {4.22639141046622, -17.17265387230397}, 62}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           118, {21.8087732399664, -16.27839961859731}, 89}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           118, {22.64229404676334, -16.414351685102464`}, 219}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           118, {22.618396434363845`, -16.529334226778424`}, 242}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           119, {3.5701502709988677`, -13.980491779609782`}, 83}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           120, {21.060604293591336`, -4.338199741011037}, 57}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           120, {20.970269482169247`, -3.5384285700484956`}, 164}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           120, {21.086246238096845`, -3.52173547312241}, 184}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           121, {1.775532398805203, -15.22533156698604}, 95}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           122, {3.0177447226282297`, -13.276998805470967`}, 81}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           123, {19.93450986896083, -15.200786922968819`}, 65}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           123, {20.1876114208324, -15.531420661273035`}, 170}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           123, {20.416024714282766`, -15.449777471306264`}, 179}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           124, {19.728080686490877`, -15.28602755885704}, 65}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           124, {19.92605390347558, -15.887730917831613`}, 191}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           124, {20.025207279918106`, -15.808653531167483`}, 200}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           125, {21.2055867651741, -4.483057531298453}, 57}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           125, {21.43192444876274, -3.6999794018745242`}, 178}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           125, {21.545066486399733`, -3.7509003840219504`}, 194}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           126, {5.135737656849992, -2.267551565655527}, 39}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           126, {4.410052375241915, -1.7642194798983235`}, 243}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           126, {4.4981318328726045`, -1.682493675140843}, 244}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           127, {2.3960077572331264`, -11.386194205953755`}, 97}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           128, {9.61116195089923, -2.5020142593011907`}, 42}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           128, {9.828572078426166, -1.7549623229053266`}, 193}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           128, {9.96775368679931, -1.7938885859272973`}, 196}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           129, {4.273859284736119, -17.295833910310336`}, 62}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           130, {1.8438971556675925`, -15.322057109266607`}, 95}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           131, {3.1960443083278425`, -13.503039650760579`}, 81}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           132, {7.803311028891288, -1.7936070073968442`}, 52}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           132, {7.25086220572464, -1.3465470352547246`}, 207}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           132, {7.282224337167349, -1.2022810696112247`}, 236}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           133, {6.905366040992443, -18.578335755175132`}, 68}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           134, {21.300530678839216`, -6.218794892784885}, 56}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           134, {21.84490129164684, -6.400950106392683}, 210}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           134, {21.741498503220317`, -6.461541112836287}, 217}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           135, {1.0095612263116858`, -13.913540922879308`}, 94}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           136, {21.598638843361766`, -5.891839541424677}, 56}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           136, {22.184351647986333`, -5.431420094975861}, 201}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           136, {22.125363011442495`, -5.313535797715665}, 253}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           137, {8.005876734185609, -1.7597441381419703`}, 52}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           137, {7.634160766803814, -1.0090670668672053`}, 177}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           137, {7.751392563342288, -0.9812999468535238}, 180}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           138, {1.0309702788226744`, -13.404667933090977`}, 96}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           139, {17.491550773879865`, -18.281450445918477`}, 92}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           139, {17.48522488218834, -18.973377904141863`}, 185}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           139, {17.605349184052137`, -18.990389641927244`}, 199}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           140, {17.49688281237246, -18.64908957965816}, 108}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           140, {17.97857618712958, -19.23714132590366}, 224}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           140, {17.853466700003665`, -19.366551069837787`}, 237}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           141, {7.010628974375097, -18.609719068184273`}, 68}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           142, {19.08679868827313, -3.62615389544757}, 59}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           142, {18.72780489006882, -2.960588646784671}, 186}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           142, {18.834396232557413`, -2.9433181951003764`}, 195}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           143, {0.9756838269308601, -13.50786640184491}, 96}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           144, {17.950515767147067`, -18.306840280349626`}, 92}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           144, {18.61281678981321, -18.525596081094434`}, 168}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           144, {18.63117146637139, -18.649399149894286`}, 181}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           145, {14.99374747955204, -17.085420114746363`}, 74}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           145, {14.568803431514308`, -17.471803915666445`}, 257}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           145, {14.513086934626108`, -17.34894705614146}, 259}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           146, {21.613012403881747`, -16.36783053273195}, 89}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           146, {22.230218052329104`, -16.90759945772146}, 230}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           146, {22.309009237243014`, -16.81979465102326}, 234}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           147, {19.305829195585716`, -3.7018652071126525`}, 59}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           147, {19.29041708618349, -2.9115334981331182`}, 227}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           147, {19.408500271926346`, -2.9256349402782678`}, 235}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           148, {2.2847430176561434`, -11.44726671111582}, 97}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           149, {15.70865214458242, -17.97530663598968}, 72}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           149, {15.96632562908986, -18.556955305470762`}, 163}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           149, {15.83005643908919, -18.577542196175376`}, 166}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           150, {1.0051492402660844`, -14.026480871932145`}, 94}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           151, {6.012057385812484, -17.322570667482548`}, 79}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           152, {17.495245908495964`, -3.940212702974873}, 91}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           153, {15.526685510506079`, -17.980948597549194`}, 72}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           153, {15.543778549471815`, -18.74683601208559}, 183}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           153, {15.447286386294914`, -18.74874368348028}, 202}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           154, {5.7670890311201966`, -17.28488293639099}, 79}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           155, {17.598216933260005`, -18.68736400450098}, 108}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           155, {18.240546283996423`, -19.259286183144727`}, 206}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           155, {18.093476089427735`, -19.370575632041067`}, 216}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           156, {4.515798744387141, -17.609023034415713`}, 78}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           157, {3.698394495211701, -14.018402018256891`}, 83}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           158, {17.61224543963881, -3.854123634151907}, 91}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           159, {15.01242984240771, -17.341370691693438`}, 74}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           159, {14.75378658687388, -17.951744567585163`}, 261}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           159, {14.893093840581303`, -17.98932155931592}, 262}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           160, {4.600856140264802, -17.689700230278216`}, 78}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           161, {4.80459138261964, -6.608504321356904}, 58}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           162, {4.856409352773266, -6.401759111161859}, 58}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           163, {15.807498901662166`, -18.595246011716867`}, 149}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           164, {21.159300815444954`, -3.558551678852581}, 120}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           165, {6.405202180558976, -18.432107857259123`}, 76}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           166, {15.685611425979141`, -18.530929952429272`}, 149}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           167, {21.44301677475545, -13.815752988783267`}, 101}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           168, {18.5392938775419, -18.66141787678895}, 144}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           169, {4.943720459444233, -7.34278395012847}, 64}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           170, {20.08629480595795, -15.50200255652041}, 123}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           171, {3.805416381696619, -5.8458709370954685`}, 67}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           172, {7.9260912784953055`, -3.9597064128039587`}, 71}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           173, {3.7702030881753075`, -5.9677471537306825`}, 67}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           174, {21.27870067554281, -13.56262485630677}, 101}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           175, {23.958535892793574`, -9.175394569290658}, 75}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           175, {24.689189427330472`, -9.296287421560018}, 252}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           175, {24.65030684693555, -9.407792267126114}, 255}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           176, {6.489860034499545, -18.516808369351082`}, 76}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           177, {7.830167978074488, -0.9539781285149356}, 137}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           178, {21.606909131801874`, -3.7904745435023774`}, 125}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           179, {20.318579476940116`, -15.571874401542402`}, 123}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           180, {7.940996284977992, -1.0012157561267698`}, 137}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           181, {18.480580768213407`, -18.77194780390877}, 144}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           182, {8.884989815908979, -4.762271887905583}, 80}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           183, {15.361429648761781`, -18.713268931130422`}, 153}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           184, {21.26254596549486, -3.613956609963433}, 120}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           185, {17.335893841551734`, -18.897340318120833`}, 139}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           186, {18.907965267290926`, -2.909311942477242}, 142}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           187, {22.40588130305457, -14.944173832184838`}, 112}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           188, {24.105176822529796`, -9.031647518852397}, 75}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           188, {24.85816399482567, -8.834502143703457}, 248}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           188, {24.88177017069462, -8.946079870597309}, 254}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           189, {7.736351149201555, -4.010383857987909}, 71}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           190, {22.484658229992892`, -14.867049763068534`}, 112}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           191, {19.765495358341592`, -15.8785633518317}, 124}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           192, {21.63808713706158, -13.33685316874734}, 110}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           193, {10.005699601235031`, -1.8248771916142674`}, 128}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           194, {21.6677398142177, -3.8986119337997693`}, 125}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           195, {19.003999839336263`, -2.9586814043626766`}, 142}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           196, {10.09460623721307, -1.9388174572854404`}, 128}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           197, {8.927452349129638, -4.605013713335624}, 80}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           198, {9.929607429381528, -2.0514876964416873`}, 100}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           199, {17.42247099473411, -18.98233233932407}, 139}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           200, {19.89223016138289, -15.87377640720197}, 124}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           201, {22.22521827608257, -5.598070242344777}, 136}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           202, {15.282641536887308`, -18.657530163728982`}, 153}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           203, {21.613960986856746`, -13.200420535130515`}, 110}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           204, {4.0876093923454935`, -5.465277301991299}, 60}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           205, {22.122155739459764`, -15.495996112463521`}, 115}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           206, {18.072050608823112`, -19.388941780638866`}, 155}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           207, {7.361577928165056, -1.238537295070833}, 132}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           208, {21.388395145962, -5.34056717301915}, 107}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           209, {23.935439082215424`, -6.0314880523440095`}, 99}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           210, {21.764693012772216`, -6.530743341321375}, 134}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           211, {18.048369039612282`, -3.80081746605249}, 93}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           212, {4.840339539768927, -7.2027188258098445`}, 64}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           213, {23.890135850824457`, -5.922080073748575}, 99}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           214, {22.322933998243336`, -15.506738145577014`}, 115}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           215, {17.958181149147496`, -3.7209947524706974`}, 93}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           216, {17.887633055397156`, -19.391211043606155`}, 155}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           217, {21.645511136277953`, -6.518130370538349}, 134}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           218, {23.79850049085751, -6.621573187909169}, 86}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           219, {22.572360706208535`, -16.60202118701131}, 118}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           220, {8.834412052843081, -3.309790965179783}, 77}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           221, {2.0740286535474555`, -11.837976813392924`}, 102}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           222, {2.0310578667975396`, -11.950384422139509`}, 102}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           223, {21.94563003410319, -5.185245223879571}, 113}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           224, {17.828927946283923`, -19.335920550295683`}, 140}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           225, {4.255032324446652, -2.6217301565546474`}, 90}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           226, {8.727997311180244, -3.223580381615563}, 77}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           227, {19.47974504090402, -2.9437617132455087`}, 147}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           228, {21.25169312965975, -5.391723519750582}, 107}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           229, {22.061308230923665`, -5.258918045409546}, 113}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           230, {22.054119236066615`, -16.986781108221955`}, 146}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           231, {24.34768551185153, -8.087262185659778}, 87}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           231, {25.010410089675585`, -7.590503938594926}, 245}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           231, {24.92885052852245, -7.513355845357328}, 246}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           232, {24.327027453361275`, -8.284609201521727}, 87}], 
           0.008582952902836073]}, 
         {RGBColor[0, 1, 0], 
          ArrowBox[BezierCurveBox[{
           232, {25.09761167115589, -7.96890149880761}, 256}], 
           0.008582952902836073]}, 
         {RGBColor[1, 0, 0], 
          ArrowBox[BezierCurveBox[{
           232, {25.124308282443742`, -8.077390777577701}, 260}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           233, {4.072378286650762, -5.650543471240379}, 60}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           234, {22.169647040911237`, -16.962884221260435`}, 146}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           235, {19.56640696676395, -3.025200033660746}, 147}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           236, {7.472448546154331, -1.1410490486083125`}, 132}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           237, {17.65142860880715, -19.36580785178683}, 140}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           238, {4.3409460927759635`, -1.9344001963162858`}, 98}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           239, {10.032798421335062`, -2.2319552940814025`}, 100}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           240, {5.235377557304959, -1.869855943886069}, 84}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           241, {5.121634449615308, -1.8657044612637632`}, 84}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           242, {22.484878962947924`, -16.68037311975622}, 118}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           243, {4.569238487855879, -1.6207018694642976`}, 126}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           244, {4.6886331266431895`, -1.6072104555790268`}, 126}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           245, {25.053408412569087`, -7.787519481772193}, 231}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           246, {25.0335623518653, -7.677020956078277}, 231}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           247, {23.929413340690402`, -6.487557496006341}, 86}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           248, {24.866602114435743`, -9.022737445843605}, 188}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           249, {8.433104275188773, -2.9083939132088554`}, 85}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           250, {8.296365720483118, -2.886718749032035}, 85}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           251, {4.250472259801463, -1.9889309213190998`}, 98}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           252, {24.62716076728665, -9.4681609971342}, 175}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           253, {22.24771648293918, -5.468184918038913}, 136}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           254, {24.819371844913775`, -9.126545645513007}, 188}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           255, {24.529683519590396`, -9.534819618665434}, 175}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           256, {25.13326020909376, -8.168332685248487}, 232}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           257, {14.480894221399296`, -17.349262491450713`}, 145}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           258, {4.312544815685645, -2.522661297145858}, 90}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           259, {14.508977330750241`, -17.21731752213814}, 145}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           260, {25.09035027082851, -8.271489700812703}, 232}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           261, {14.64873707887113, -17.823133875933582`}, 159}], 
           0.008582952902836073]}, 
         {GrayLevel[0.5], 
          ArrowBox[BezierCurveBox[{
           262, {14.738545708359101`, -17.936062841713944`}, 159}], 
           0.008582952902836073]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         {GrayLevel[0], DiskBox[1, 0.008582952902836073]}, 
         {GrayLevel[0], DiskBox[2, 0.008582952902836073]}, 
         {GrayLevel[0], DiskBox[3, 0.008582952902836073]}, 
         {GrayLevel[0], DiskBox[4, 0.008582952902836073]}, 
         {GrayLevel[0], DiskBox[5, 0.008582952902836073]}, 
         {GrayLevel[0], DiskBox[6, 0.008582952902836073]}, 
         {GrayLevel[0], DiskBox[7, 0.008582952902836073]}, 
         {GrayLevel[1], DiskBox[8, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[9, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[10, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[11, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[12, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[13, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[14, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[15, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[16, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[17, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[18, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[19, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[20, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[21, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[22, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[23, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[24, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[25, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[26, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[27, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[28, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[29, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[30, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[31, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[32, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[33, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[34, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[35, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[36, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[37, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[38, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[39, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[40, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[41, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[42, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[43, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[44, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[45, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[46, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[47, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[48, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[49, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[50, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[51, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[52, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[53, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[54, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[55, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[56, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[57, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[58, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[59, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[60, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[61, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[62, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[63, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[64, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[65, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[66, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[67, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[68, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[69, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[70, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[71, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[72, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[73, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[74, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[75, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[76, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[77, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[78, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[79, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[80, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[81, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[82, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[83, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[84, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[85, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[86, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[87, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[88, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[89, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[90, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[91, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[92, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[93, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[94, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[95, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[96, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[97, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[98, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[99, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[100, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[101, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[102, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[103, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[104, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[105, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[106, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[107, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[108, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[109, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[110, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[111, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[112, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[113, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[114, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[115, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[116, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[117, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[118, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[119, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[120, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[121, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[122, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[123, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[124, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[125, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[126, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[127, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[128, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[129, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[130, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[131, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[132, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[133, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[134, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[135, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[136, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[137, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[138, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[139, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[140, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[141, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[142, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[143, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[144, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[145, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[146, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[147, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[148, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[149, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[150, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[151, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[152, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[153, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[154, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[155, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[156, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[157, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[158, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[159, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[160, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[161, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[162, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[163, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[164, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[165, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[166, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[167, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[168, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[169, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[170, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[171, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[172, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[173, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[174, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[175, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[176, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[177, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[178, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[179, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[180, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[181, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[182, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[183, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[184, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[185, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[186, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[187, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[188, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[189, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[190, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[191, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[192, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[193, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[194, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[195, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[196, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[197, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[198, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[199, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[200, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[201, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[202, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[203, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[204, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[205, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[206, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[207, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[208, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[209, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[210, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[211, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[212, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[213, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[214, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[215, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[216, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[217, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[218, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[219, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[220, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[221, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[222, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[223, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[224, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[225, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[226, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[227, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[228, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[229, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[230, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[231, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[232, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[233, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[234, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[235, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[236, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[237, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[238, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[239, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[240, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[241, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[242, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[243, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[244, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[245, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[246, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[247, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[248, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[249, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[250, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[251, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[252, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[253, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[254, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[255, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[256, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[257, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[258, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[259, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[260, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[261, 0.008582952902836073]}, 
         {RGBColor[0.6, 0.4, 0.2], DiskBox[262, 0.008582952902836073]}}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.818737301253796*^9, 3.818737307866153*^9}, 
   3.8187375739368753`*^9, {3.8504296847133904`*^9, 3.850429687737857*^9}},
 CellLabel->
  "Out[116]=",ExpressionUUID->"c6d0ac38-542d-48c6-ba8a-138a1a055d19"]
}, Open  ]],

Cell[TextData[{
 "Fun facts:  \n\t1. Like L-systems, our parallel pointer machines can grow \
exponentially large in linear time.  (What is \[OpenCurlyDoubleQuote]time\
\[CloseCurlyDoubleQuote] for an asynchronous parallel model?  If at a given \
moment there are K rules that could apply, and we imagine them each having a \
uniform independent probability of occurring at any instant, then the next \
event will occur in expected time ",
 Cell[BoxData[
  FormBox[
   RowBox[{"O", "(", 
    RowBox[{"1", "/", "K"}], ")"}], TraditionalForm]],ExpressionUUID->
  "0a7e9da0-87dd-45d6-815f-96d451179503"],
 ".)  However, unlike L-systems, parallel pointer machines can also \
communicate quickly from any node to any other node if they set up their \
topology appropriately.   They can therefore solve exponentially-hard \
problems in linear time (admittedly, using exponential resources in terms of \
the number of active nodes).\n\t2. Stephen Wolfram and others are exploring \
very simple types of graph rewriting systems as a potential algorithmic \
foundation for fundamental physics.  "
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
   3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
   3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.818799583712069*^9, 
   3.818800068334037*^9}, {3.818800259199347*^9, 3.818800289562599*^9}, {
   3.818800435467061*^9, 3.818800534990533*^9}, {3.818800720581793*^9, 
   3.8188007318831873`*^9}, 3.818800778779703*^9, {3.8188008197557297`*^9, 
   3.8188009472894487`*^9}, {3.8188009885738688`*^9, 3.81880109855894*^9}, 
   3.818801132196699*^9, {3.818801193500161*^9, 3.8188012225570993`*^9}, {
   3.818801278416477*^9, 3.81880132884266*^9}, {3.818801375822434*^9, 
   3.818801381336132*^9}, {3.8188014186546907`*^9, 3.8188015520840387`*^9}, {
   3.818801582424788*^9, 3.818801601212912*^9}, {3.81880165380573*^9, 
   3.8188016558021183`*^9}, {3.818801701529986*^9, 3.81880171744663*^9}, {
   3.818801768747162*^9, 3.818801851616778*^9}, {3.818801881867337*^9, 
   3.818802190687976*^9}, {3.818802350616976*^9, 3.818802369782605*^9}, {
   3.81880248106854*^9, 3.818802595201623*^9}, {3.818802811410652*^9, 
   3.818802943668639*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"fb8c6d67-cf69-47bb-8276-8e4f0d85a0cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph Rewriting Grammars", "Section",
 CellChangeTimes->{{3.81821629026477*^9, 3.8182162952337313`*^9}, {
  3.818263922110901*^9, 3.818263928075458*^9}, {3.818296986461046*^9, 
  3.8182969908594646`*^9}, {3.818298062333235*^9, 3.818298065052231*^9}, {
  3.8183051291102753`*^9, 3.81830512947314*^9}, {3.8186169749388437`*^9, 
  3.81861698028465*^9}, {3.850429706666235*^9, 
  3.850429709819868*^9}},ExpressionUUID->"a6964af9-330f-4471-9156-\
b7bd2d6af3ec"],

Cell["\<\
This is based on Klavins, Ghrist, Lipsky (2006) \[OpenCurlyDoubleQuote]A \
Grammatical Approach to Self-Organizing Robotic Systems\
\[CloseCurlyDoubleQuote], although it is not identical as we allow the graph \
to grow or shrink in addition to changing vertex state and connectivity.

The state of the system will be a graph with annotations labels for the \
vertices, indicating the state of each vertex.  The set of vertices and the \
set of labels must be disjoint, which we will achieve by requiring vertices \
be integers and labels be non-integers.

The grammar rules (\[OpenCurlyDoubleQuote]reactions\[CloseCurlyDoubleQuote]) \
will consist of a pair of labeled graphs, each containing 1, 2, or 3 \
vertices.   A rule is applicable if the LHS graph appears (renamed) as a \
subgraph of the system state graph, with identical labels.  To apply the rule: 
\t(0) Edges between vertices in the LHS are removed from the system state \
graph.
\t(1) Any vertices in the LHS that are not in the RHS are removed (along with \
associated edges and labels).
\t(2) Vertices in the RHS that are not in LHS are added.
\t(3) The labels for vertices that are in both the RHS and the LHS are \
updated to match the RHS, and labels for new vertices are added.
\t(4) Edges between vertices in the RHS are added.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.8182970246123123`*^9, 
   3.818297156742662*^9}, {3.818297202392889*^9, 3.818297208745075*^9}, {
   3.818297320369563*^9, 3.8182973314317703`*^9}, 3.818298130895307*^9, {
   3.818298466237603*^9, 3.818298641566051*^9}, {3.818298711821803*^9, 
   3.818298761598586*^9}, {3.81829931085177*^9, 3.818299369913378*^9}, {
   3.818299660736018*^9, 3.818299664644788*^9}, {3.818300169682683*^9, 
   3.818300171903171*^9}, {3.818300418057708*^9, 3.818300453841301*^9}, {
   3.818305134529746*^9, 3.818305147423658*^9}, {3.818307567804254*^9, 
   3.818307676573565*^9}, {3.818307740241137*^9, 3.818307819315854*^9}, {
   3.8183079231923943`*^9, 3.81830799147547*^9}, {3.81830893769153*^9, 
   3.8183089458357058`*^9}, {3.8183091296764383`*^9, 3.818309209252121*^9}, {
   3.818351680426167*^9, 3.8183516874744787`*^9}, {3.8183519024688883`*^9, 
   3.818352032250989*^9}, {3.81835234927787*^9, 3.818352350243361*^9}, {
   3.8183534257346478`*^9, 3.8183534311061897`*^9}, {3.8183583857632427`*^9, 
   3.818358494393435*^9}, {3.818358574484343*^9, 3.818358578510365*^9}, {
   3.818359945276209*^9, 3.818359996843343*^9}, {3.818360105001196*^9, 
   3.8183601383465357`*^9}, {3.818360169884609*^9, 3.818360189417449*^9}, {
   3.818360284842045*^9, 3.818360285702683*^9}, {3.818360316037449*^9, 
   3.81836034294521*^9}, {3.818362146544087*^9, 3.818362166232604*^9}, {
   3.8183622057208138`*^9, 3.81836228753976*^9}, {3.8183623384626417`*^9, 
   3.818362434521678*^9}, {3.8183629771546907`*^9, 3.81836300569256*^9}, {
   3.8183632533663197`*^9, 3.8183632646646957`*^9}, {3.818363331472968*^9, 
   3.818363332027052*^9}, {3.8183635386417933`*^9, 3.818363562131133*^9}, 
   3.8183636151787853`*^9, {3.818366737472538*^9, 3.818366793513412*^9}, {
   3.818368581530444*^9, 3.8183686779704113`*^9}, {3.8183697088795958`*^9, 
   3.8183697511678963`*^9}, {3.818377573904648*^9, 3.818377574047463*^9}, {
   3.818379707600155*^9, 3.818379736616724*^9}, {3.81837982020041*^9, 
   3.8183798635971317`*^9}, {3.8185710961912193`*^9, 3.818571208084281*^9}, {
   3.818617042972032*^9, 3.8186170602958813`*^9}, {3.818617104642373*^9, 
   3.818617159115058*^9}, {3.818617251374486*^9, 3.818617391151514*^9}, {
   3.818617987979919*^9, 3.818618042691098*^9}, {3.818618079217152*^9, 
   3.818618128996591*^9}, {3.818618197804027*^9, 3.818618238250071*^9}, {
   3.818618391787616*^9, 3.8186183994380293`*^9}, {3.818618473115622*^9, 
   3.818618503989147*^9}, {3.818618546698607*^9, 3.818618594075626*^9}, {
   3.8186187076042423`*^9, 3.81861878120472*^9}, {3.818619777457796*^9, 
   3.818619849189004*^9}, {3.818620583589254*^9, 3.8186206805874367`*^9}, {
   3.818621135854007*^9, 3.8186211510073423`*^9}, 3.8186217605285683`*^9, {
   3.818737145559057*^9, 3.81873714583644*^9}, {3.818737177641439*^9, 
   3.818737187112365*^9}, {3.818737631339879*^9, 3.818737976900318*^9}, {
   3.8187381081424627`*^9, 3.818738488469624*^9}, {3.818738558359659*^9, 
   3.818738919414091*^9}, {3.818738954046771*^9, 3.8187390011768827`*^9}, {
   3.8188026371746483`*^9, 3.818802640400152*^9}, {3.825511312282216*^9, 
   3.8255113300049343`*^9}, {3.825512476703609*^9, 3.825512589019717*^9}, {
   3.8504295786516953`*^9, 3.85042961359429*^9}, {3.850434507088435*^9, 
   3.850434582773406*^9}, {3.850434631659547*^9, 3.850434696897358*^9}, {
   3.850434822006641*^9, 3.8504348822178926`*^9}, {3.850434917092949*^9, 
   3.850434935748258*^9}, {3.85043500597392*^9, 3.850435026346963*^9}, {
   3.850435058973477*^9, 3.850435096208191*^9}, {3.850435226038898*^9, 
   3.850435249209167*^9}, {3.850435283921845*^9, 3.8504353740266848`*^9}, {
   3.8504355533191433`*^9, 3.8504356311534643`*^9}, {3.8504374934749126`*^9, 
   3.850437510814911*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"03ae28e6-8c0f-469b-a467-6a4949dbccb2"],

Cell["\<\
If we attempt to apply a rule in a place where it is not applicable, the \
original system state graph will be returned unchanged; otherwise, the \
updated graph is returned.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
   3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
   3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.818799583712069*^9, 
   3.818800068334037*^9}, {3.818800259199347*^9, 3.818800289562599*^9}, {
   3.818800435467061*^9, 3.818800534990533*^9}, {3.818800720581793*^9, 
   3.8188007318831873`*^9}, 3.818800778779703*^9, {3.8188008197557297`*^9, 
   3.8188009472894487`*^9}, {3.8188009885738688`*^9, 3.81880109855894*^9}, 
   3.818801132196699*^9, {3.818801193500161*^9, 3.8188012225570993`*^9}, {
   3.818801278416477*^9, 3.81880132884266*^9}, {3.818801375822434*^9, 
   3.818801381336132*^9}, {3.8188014186546907`*^9, 3.8188015520840387`*^9}, {
   3.818801582424788*^9, 3.818801601212912*^9}, {3.81880165380573*^9, 
   3.8188016558021183`*^9}, {3.818801701529986*^9, 3.81880171744663*^9}, {
   3.818801768747162*^9, 3.818801851616778*^9}, {3.818801881867337*^9, 
   3.818802190687976*^9}, {3.818802350616976*^9, 3.818802369782605*^9}, {
   3.81880248106854*^9, 3.818802595201623*^9}, {3.818802811410652*^9, 
   3.818802943668639*^9}, {3.85043575862047*^9, 3.8504357987328653`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"24fc910a-3e6e-47d5-97e8-536e2854d44d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ApplyGraphRule", "[", 
   RowBox[{"G_", ",", 
    RowBox[{"Rule", "[", 
     RowBox[{"LHS_", ",", "RHS_"}], "]"}], ",", "vertices_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"sG", "=", 
       RowBox[{"Subgraph", "[", 
        RowBox[{"G", ",", "vertices"}], "]"}]}], ",", 
      RowBox[{"mapping", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Rule", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"VertexList", "[", "LHS", "]"}], ",", "vertices"}], 
          "}"}]}], "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"VertexCount", "[", "LHS", "]"}], "!=", 
        RowBox[{"VertexCount", "[", "sG", "]"}]}], " ", "||", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"vertices", "/.", 
          RowBox[{"AnnotationValue", "[", 
           RowBox[{"G", ",", "VertexLabels"}], "]"}]}], ")"}], "=!=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"VertexList", "[", "LHS", "]"}], "/.", 
          RowBox[{"AnnotationValue", "[", 
           RowBox[{"LHS", ",", "VertexLabels"}], "]"}]}], ")"}]}], "||", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Sort", "/@", 
          RowBox[{"EdgeList", "[", "sG", "]"}]}], ")"}], "=!=", 
        RowBox[{"(", 
         RowBox[{"Sort", "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"EdgeList", "[", "LHS", "]"}], "/.", "mapping"}], ")"}]}],
          ")"}]}]}], ",", "\[IndentingNewLine]", "G", ",", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"not", " ", "applicable"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nG", "=", 
        RowBox[{"EdgeDelete", "[", 
         RowBox[{"G", ",", 
          RowBox[{
           RowBox[{"EdgeList", "[", "LHS", "]"}], "/.", "mapping"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"nG", "=", 
        RowBox[{"VertexDelete", "[", 
         RowBox[{"nG", ",", 
          RowBox[{
           RowBox[{"Complement", "[", 
            RowBox[{
             RowBox[{"VertexList", "[", "LHS", "]"}], ",", 
             RowBox[{"VertexList", "[", "RHS", "]"}]}], "]"}], "/.", 
           "mapping"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"newvertices", "=", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"VertexList", "[", "RHS", "]"}], ",", 
          RowBox[{"VertexList", "[", "LHS", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"newmapping", "=", 
        RowBox[{"mapping", "~", "Join", "~", 
         RowBox[{"MapThread", "[", 
          RowBox[{"Rule", ",", 
           RowBox[{"{", 
            RowBox[{"newvertices", ",", 
             RowBox[{
              RowBox[{"Max", "[", 
               RowBox[{"VertexList", "[", "G", "]"}], "]"}], "+", 
              RowBox[{"Range", "[", 
               RowBox[{"Length", "[", "newvertices", "]"}], "]"}]}]}], 
            "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"nG", "=", 
        RowBox[{"VertexAdd", "[", 
         RowBox[{"nG", ",", 
          RowBox[{"newvertices", "/.", "newmapping"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"nG", "=", 
        RowBox[{"Fold", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Annotate", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"#1", ",", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
             RowBox[{"VertexLabels", "->", 
              RowBox[{"#2", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "&"}], ",", "nG", 
          ",", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"VertexList", "[", "RHS", "]"}], "/.", "newmapping"}], 
             ",", 
             RowBox[{
              RowBox[{"VertexList", "[", "RHS", "]"}], "/.", 
              RowBox[{"AnnotationValue", "[", 
               RowBox[{"RHS", ",", "VertexLabels"}], "]"}]}]}], "}"}], 
           "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"nG", "=", 
        RowBox[{"EdgeAdd", "[", 
         RowBox[{"nG", ",", 
          RowBox[{
           RowBox[{"EdgeList", "[", "RHS", "]"}], "/.", "newmapping"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "nG"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.850435657638461*^9, 3.850435716354775*^9}, {
  3.850435808642482*^9, 3.850435960568186*^9}, {3.850436009984105*^9, 
  3.850436107213172*^9}, {3.8504361953583384`*^9, 3.8504362713946867`*^9}, {
  3.850436316180336*^9, 3.850436348912655*^9}, {3.85043644828808*^9, 
  3.850436591572261*^9}, {3.8504368466831207`*^9, 3.850437064218396*^9}, {
  3.850437399851836*^9, 3.850437437965292*^9}, {3.850437519978856*^9, 
  3.8504375480181828`*^9}, {3.850438563775733*^9, 3.850438569917095*^9}, {
  3.850441001535911*^9, 3.850441018771002*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"d7fc11bf-49b8-4318-bf23-0cf493e1a0fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"These", " ", "rules", " ", "link", " ", "up", " ", 
    RowBox[{"a", "'"}], "s", " ", "into", " ", "chains", " ", "and", " ", 
    RowBox[{"cycles", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Phi1", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "a"}], ",", 
           RowBox[{"2", "->", "a"}]}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "b"}], ",", 
           RowBox[{"2", "->", "b"}]}], "}"}]}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "a"}], ",", 
           RowBox[{"2", "->", "b"}]}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "b"}], ",", 
           RowBox[{"2", "->", "c"}]}], "}"}]}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "b"}], ",", 
           RowBox[{"2", "->", "b"}]}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "c"}], ",", 
           RowBox[{"2", "->", "c"}]}], "}"}]}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "}"}]}]}]], "Input",
 CellChangeTimes->{{3.85043514071703*^9, 3.850435149576483*^9}, {
  3.85043821559023*^9, 3.8504383732947474`*^9}, {3.850441123840045*^9, 
  3.850441147044876*^9}},ExpressionUUID->"61a3aef5-9565-4a56-86f6-\
89174534f764"],

Cell[BoxData[
 RowBox[{"Phi1graph", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"Range", "[", "9", "]"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"VertexLabels", "->", 
     RowBox[{"MapThread", "[", 
      RowBox[{"Rule", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Range", "[", "9", "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{"a", ",", "9"}], "]"}]}], "}"}]}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.850438412075404*^9, 3.850438461369636*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"2ed29953-7355-4a5b-869d-e1c2a0425906"],

Cell[BoxData[
 RowBox[{"ApplyGraphRule", "[", 
  RowBox[{"Phi1graph", ",", 
   RowBox[{"Phi1", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.850438471123157*^9, 3.8504384999334784`*^9}, 
   3.850438531647891*^9, {3.850438590019712*^9, 3.850438608267378*^9}},
 CellLabel->
  "In[166]:=",ExpressionUUID->"11f4c44d-1c6d-454d-9660-17431d48c1e6"],

Cell["\<\
Our super-inefficient simulator will choose triples at random and try to \
apply random rules to them.  We are too lazy to write a function that \
determines when there are no more applicable rules, so we\[CloseCurlyQuote]ll \
just do it for a while...\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
   3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
   3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.818799583712069*^9, 
   3.818800068334037*^9}, {3.818800259199347*^9, 3.818800289562599*^9}, {
   3.818800435467061*^9, 3.818800534990533*^9}, {3.818800720581793*^9, 
   3.8188007318831873`*^9}, 3.818800778779703*^9, {3.8188008197557297`*^9, 
   3.8188009472894487`*^9}, {3.8188009885738688`*^9, 3.81880109855894*^9}, 
   3.818801132196699*^9, {3.818801193500161*^9, 3.8188012225570993`*^9}, {
   3.818801278416477*^9, 3.81880132884266*^9}, {3.818801375822434*^9, 
   3.818801381336132*^9}, {3.8188014186546907`*^9, 3.8188015520840387`*^9}, {
   3.818801582424788*^9, 3.818801601212912*^9}, {3.81880165380573*^9, 
   3.8188016558021183`*^9}, {3.818801701529986*^9, 3.81880171744663*^9}, {
   3.818801768747162*^9, 3.818801851616778*^9}, {3.818801881867337*^9, 
   3.818802190687976*^9}, {3.818802350616976*^9, 3.818802369782605*^9}, {
   3.81880248106854*^9, 3.818802595201623*^9}, {3.818802811410652*^9, 
   3.818802943668639*^9}, {3.85043575862047*^9, 3.8504357987328653`*^9}, {
   3.8504386322709*^9, 3.850438655583107*^9}, {3.850438740746456*^9, 
   3.8504387607019873`*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"9014362b-b860-48af-be98-5acfd980729a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GraphGrammarSteps", "[", 
   RowBox[{"G_", ",", "rules_", ",", "steps_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"n", "=", 
       RowBox[{"VertexCount", "[", "G", "]"}]}], ",", 
      RowBox[{"state", "=", "G"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"rule", "=", 
           RowBox[{"RandomChoice", "[", "rules", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"state", "=", 
          RowBox[{"ApplyGraphRule", "[", 
           RowBox[{"state", ",", "rule", ",", 
            RowBox[{"RandomSample", "[", 
             RowBox[{
              RowBox[{"VertexList", "[", "state", "]"}], ",", 
              RowBox[{"VertexCount", "[", 
               RowBox[{"First", "[", "rule", "]"}], "]"}]}], "]"}]}], 
           "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", "steps"}], "]"}], 
     ";", "\[IndentingNewLine]", "state"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.850438696091529*^9, 3.850438711621914*^9}, {
  3.85043876570758*^9, 3.850438970966552*^9}, {3.850439012948792*^9, 
  3.850439015987536*^9}, {3.850439055871731*^9, 3.850439079762919*^9}, {
  3.850439113173418*^9, 3.850439130614635*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"76076ebb-cd0f-42c2-91a8-353af7cb2f36"],

Cell[BoxData[
 RowBox[{"GraphGrammarSteps", "[", 
  RowBox[{"Phi1graph", ",", "Phi1", ",", "100"}], "]"}]], "Input",
 CellChangeTimes->{{3.8504389812791967`*^9, 3.850438992569146*^9}, 
   3.850439060429605*^9, {3.8504391340895643`*^9, 3.850439139256072*^9}},
 CellLabel->
  "In[210]:=",ExpressionUUID->"8b3df604-77e9-4da6-b191-e7fcdcd56a2e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", 
    "h"}], "]"}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "These", " ", "rules", " ", "create", " ", "a", " ", "unidirectional", 
    " ", "\"\<walker\>\"", " ", "on", " ", "a", " ", 
    RowBox[{"chain", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Phi3", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "a"}], ",", 
           RowBox[{"2", "->", "c"}]}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "d"}], ",", 
           RowBox[{"2", "->", "e"}]}], "}"}]}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
          RowBox[{"2", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "e"}], ",", 
           RowBox[{"2", "->", "b"}], ",", 
           RowBox[{"3", "->", "g"}]}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
          RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
          RowBox[{"1", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "c"}], ",", 
           RowBox[{"2", "->", "b"}], ",", 
           RowBox[{"3", "->", "h"}]}], "}"}]}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "b"}], ",", 
           RowBox[{"2", "->", "h"}]}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "f"}], ",", 
           RowBox[{"2", "->", "b"}]}], "}"}]}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "d"}], ",", 
           RowBox[{"2", "->", "f"}]}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "g"}], ",", 
           RowBox[{"2", "->", "a"}]}], "}"}]}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Phi3", "//", "MatrixForm"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"WARNING", ":", " ", 
    RowBox[{"The", " ", "graphs", " ", 
     RowBox[{"aren", "'"}], "t", " ", "always", " ", "displayed", " ", "with",
      " ", "the", " ", "expected", " ", "order", " ", "of", " ", "vertices", 
     " ", "so", " ", "the", " ", "correspondence", " ", "should", " ", "be", 
     " ", "determined", " ", "from", " ", "the", " ", "text"}]}], " ", 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.85043514071703*^9, 3.850435149576483*^9}, {
  3.85043821559023*^9, 3.8504383732947474`*^9}, {3.8504396840582037`*^9, 
  3.8504397408213987`*^9}, {3.85043977455543*^9, 3.8504399503856707`*^9}, {
  3.850440029204372*^9, 3.850440091587852*^9}, {3.850441174110713*^9, 
  3.850441202503817*^9}},ExpressionUUID->"26cce683-f671-4df7-a7d4-\
0e6ce0d2506b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Phi3graph", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"i", "\[UndirectedEdge]", 
        RowBox[{"i", "+", "1"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "8"}], "}"}]}], "]"}], "~", "Join", "~", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[UndirectedEdge]", "10"}], ",", 
       RowBox[{"3", "\[UndirectedEdge]", "10"}]}], "}"}]}], ",", 
    RowBox[{"VertexLabels", "->", 
     RowBox[{"MapThread", "[", 
      RowBox[{"Rule", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Range", "[", "10", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "g", ",", "a", ",", "b", ",", "g", ",", "g", ",", "g", ",", "g", 
           ",", "g", ",", "g", ",", "c"}], "}"}]}], "}"}]}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.850440144537405*^9, 3.8504403253107243`*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"ad2b4a45-b955-4729-a732-28989da5ec62"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {
      Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {
       2, 10}, {3, 10}}}, {
      VertexLabels -> {
        6 -> $CellContext`g, 3 -> $CellContext`b, 5 -> $CellContext`g, 
         8 -> $CellContext`g, 7 -> $CellContext`g, 10 -> $CellContext`c, 
         9 -> $CellContext`g, 4 -> $CellContext`g, 2 -> $CellContext`a, 
         1 -> $CellContext`g}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGDgAmImKEYHFU9qgow/v7Y3tr2XffT/CXt0vg9rwvKMsn/2
mr2H7FNvXcWQb9n7z2Le7c/2u1b1z+C0foahvs98h4b7VQ6HstfOhyQSrmDI
o+tHVy9+IFL3qYagA/tdputtiZcx+PdOPlticFbUIVLj0N+N0y5h8M00PlYc
spFyKKus+pD97CIGn+/+F8P7fnIOp/5wfK72x+SXPity+3VVwaHY/eGna7cu
2AMANAOcFA==
         "], 0.0595756047014578]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.0595756047014578], 
         InsetBox["g", 
          Offset[{2, 2}, {0.0595756047014578, 0.0595756047014578}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8734375582781828, 0.19530551688192474}, 
          0.0595756047014578], 
         InsetBox["a", 
          Offset[{2, 2}, {0.9330131629796407, 0.25488112158338255}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.903908399399671, 0.34145480372008535}, 
          0.0595756047014578], 
         InsetBox["b", 
          Offset[{2, 2}, {1.9634840041011288, 0.40103040842154314}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.104139631387574, 0.3183652779695686}, 0.0595756047014578],
          InsetBox["g", 
          Offset[{2, 2}, {3.163715236089032, 0.3779408826710264}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.28993674145024, 0.3028275584906201}, 0.0595756047014578], 
         InsetBox["g", 
          Offset[{2, 2}, {4.349512346151697, 0.3624031631920779}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.450380875192847, 0.2904477098569536}, 0.0595756047014578],
          InsetBox["g", 
          Offset[{2, 2}, {5.509956479894305, 0.3500233145584114}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{6.559335603446064, 0.27968882068844125}, 
          0.0595756047014578], 
         InsetBox["g", 
          Offset[{2, 2}, {6.618911208147521, 0.33926442538989904}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{7.577023296900519, 0.2704763291730613}, 0.0595756047014578],
          InsetBox["g", 
          Offset[{2, 2}, {7.636598901601976, 0.3300519338745191}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{8.417925073171526, 0.2633569118380514}, 0.0595756047014578],
          InsetBox["g", 
          Offset[{2, 2}, {8.477500677872984, 0.32293251653950916}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.241117689740208, 0.6947067241393008}, 0.0595756047014578],
          InsetBox["c", 
          Offset[{2, 2}, {1.3006932944416658, 0.7542823288407586}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.850440312011148*^9, 3.850440326558633*^9}, 
   3.850440462246895*^9, 3.8504405452214413`*^9, 3.8504410366360407`*^9, 
   3.850441258603438*^9},
 CellLabel->
  "Out[213]=",ExpressionUUID->"1e5343b9-e8ce-4595-a080-921429bb41c0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", "Phi3graph", "]"}]], "Input",
 CellChangeTimes->{{3.850440348620224*^9, 3.850440375117763*^9}},
 CellLabel->
  "In[199]:=",ExpressionUUID->"85db93ce-8a89-46c7-b659-6e81a10b8d30"],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`Phi3graph, StandardForm],
  ImageSizeCache->{360., {22., 27.}}]], "Output",
 CellChangeTimes->{{3.8504403632474737`*^9, 3.850440376004197*^9}},
 CellLabel->
  "Out[199]=",ExpressionUUID->"30193eb3-8b53-4d39-a08f-52f8470e7935"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Phi3graph", "=", 
    RowBox[{"GraphGrammarSteps", "[", 
     RowBox[{"Phi3graph", ",", "Phi3", ",", "100"}], "]"}]}], ",", "100"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.850440367367694*^9, 3.8504404596395807`*^9}, {
  3.850440538182678*^9, 3.850440541463867*^9}, {3.8504405727080393`*^9, 
  3.850440588785615*^9}, {3.850441256533445*^9, 3.850441263482588*^9}},
 CellLabel->
  "In[214]:=",ExpressionUUID->"4976d082-4ed7-4939-8b34-33ded457cc5e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"These", " ", "rules", " ", "create", " ", "an", " ", "ever"}], 
    "-", 
    RowBox[{"growing", " ", "binary", " ", 
     RowBox[{"tree", "."}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PhiT", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{"1", "->", "a"}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "\[UndirectedEdge]", "2"}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "b"}], ",", 
           RowBox[{"2", "->", "b"}]}], "}"}]}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{"1", "->", "b"}], "}"}]}]}], "]"}], "->", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
          RowBox[{"1", "\[UndirectedEdge]", "3"}]}], "}"}], ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "->", "c"}], ",", 
           RowBox[{"2", "->", "b"}], ",", 
           RowBox[{"3", "->", "b"}]}], "}"}]}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"PhiT", "//", "MatrixForm", " "}]}], "Input",
 CellChangeTimes->{{3.850441683187645*^9, 3.850441690259358*^9}, {
  3.8504417931012983`*^9, 3.850441950023971*^9}},
 CellLabel->
  "In[217]:=",ExpressionUUID->"53337dbb-fb7f-4819-b50f-0417fbf988a6"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            Graph[{1}, {}, {VertexLabels -> {1 -> $CellContext`a}}]]}, 
           TagBox[GraphicsGroupBox[{{}, 
              {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
               DiskBox[{0., 0.}, 0.004014598540145964], 
               InsetBox["a", 
                Offset[{2, 2}, {0.004014598540145964, 0.004014598540145964}], 
                ImageScaled[{0, 0}],
                BaseStyle->"Graphics"]}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FormatType->TraditionalForm,
         FrameTicks->None,
         PlotRangePadding->0.1], "\[Rule]", 
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{1, 2}, {Null, {{1, 2}}}, {
             VertexLabels -> {2 -> $CellContext`b, 1 -> $CellContext`b}}]]}, 
           TagBox[GraphicsGroupBox[{
              {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
               {Arrowheads[0.], 
                ArrowBox[{{1., 0.}, {-1., 0.}}, 0.02261146496815286]}}, 
              {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
               0.7]}], {DiskBox[{1., 0.}, 0.02261146496815286], 
                InsetBox["b", 
                 Offset[{2, 2}, {1.0226114649681528, 0.02261146496815286}], 
                 ImageScaled[{0, 0}],
                 BaseStyle->"Graphics"]}, {
                DiskBox[{-1., 0.}, 0.02261146496815286], 
                InsetBox["b", 
                 Offset[{2, 2}, {-0.9773885350318472, 0.02261146496815286}], 
                 ImageScaled[{0, 0}],
                 BaseStyle->"Graphics"]}}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FormatType->TraditionalForm,
         FrameTicks->None]}]},
      {
       RowBox[{
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            Graph[{1}, {}, {VertexLabels -> {1 -> $CellContext`b}}]]}, 
           TagBox[GraphicsGroupBox[{{}, 
              {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
               DiskBox[{0., 0.}, 0.004014598540145964], 
               InsetBox["b", 
                Offset[{2, 2}, {0.004014598540145964, 0.004014598540145964}], 
                ImageScaled[{0, 0}],
                BaseStyle->"Graphics"]}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FormatType->TraditionalForm,
         FrameTicks->None,
         PlotRangePadding->0.1], "\[Rule]", 
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{1, 2, 3}, {Null, {{1, 2}, {1, 3}}}, {
             VertexLabels -> {
               3 -> $CellContext`b, 2 -> $CellContext`b, 
                1 -> $CellContext`c}}]]}, 
           TagBox[GraphicsGroupBox[{
              {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
               ArrowBox[{{{1., 2.4492935982947064`*^-16}, {0., 
                3.6739403974420594`*^-16}}, {{1., 2.4492935982947064`*^-16}, {
                2., 0.}}}, 0.02261146496815286]}, 
              {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
               0.7]}], {
                DiskBox[{1., 2.4492935982947064*^-16}, 0.02261146496815286], 
                InsetBox["c", 
                 Offset[{2, 2}, {1.0226114649681528, 0.022611464968153108}], 
                 ImageScaled[{0, 0}],
                 BaseStyle->"Graphics"]}, {
                DiskBox[{0., 3.6739403974420594*^-16}, 0.02261146496815286], 
                InsetBox["b", 
                 Offset[{2, 2}, {0.02261146496815286, 0.02261146496815323}], 
                 ImageScaled[{0, 0}],
                 BaseStyle->"Graphics"]}, {
                DiskBox[{2., 0.}, 0.02261146496815286], 
                InsetBox["b", 
                 Offset[{2, 2}, {2.022611464968153, 0.02261146496815286}], 
                 ImageScaled[{0, 0}],
                 BaseStyle->"Graphics"]}}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FormatType->TraditionalForm,
         FrameTicks->None]}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.850441690818139*^9, 3.8504419507447653`*^9},
 CellLabel->
  "Out[219]//MatrixForm=",ExpressionUUID->"7a682414-9c71-44bb-ac9e-\
4ea8c309a55e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"PhiTgraph", "=", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"VertexLabels", "->", 
      RowBox[{"{", 
       RowBox[{"1", "->", "a"}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8504419733294697`*^9, 3.850441991441222*^9}},
 CellLabel->
  "In[224]:=",ExpressionUUID->"33dcb75e-d6f7-4fd0-a9fb-f7c457ee8cba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", "PhiTgraph", "]"}]], "Input",
 CellChangeTimes->{{3.850441965463458*^9, 3.850441967005445*^9}},
 CellLabel->
  "In[221]:=",ExpressionUUID->"1d4075f6-7185-4b6a-b7cc-425a8fd07fc6"],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`PhiTgraph, StandardForm],
  ImageSizeCache->{206., {72., 77.}}]], "Output",
 CellChangeTimes->{3.85044199437009*^9},
 CellLabel->
  "Out[221]=",ExpressionUUID->"8a8ba128-b84b-4fd0-bce1-f0f529009ec6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"PhiTgraph", "=", 
    RowBox[{"GraphGrammarSteps", "[", 
     RowBox[{"PhiTgraph", ",", "PhiT", ",", "1"}], "]"}]}], ",", "100"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.850442006865484*^9, 3.850442052945826*^9}},
 CellLabel->
  "In[225]:=",ExpressionUUID->"cdce6cb9-9d03-40c8-8119-76e649ff0734"],

Cell[TextData[{
 "Challenge:  Can you design a set of graph grammar rule, with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"O", "(", "k", ")"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "77f58524-907e-4d1d-95d4-8c00ad9c6178"],
 " rules and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"O", "(", "k", ")"}], " "}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "97e37642-d865-42a9-aabe-22fda78dcb01"],
 "label types, that grows into square grid of size ",
 Cell[BoxData[
  FormBox[
   RowBox[{"O", "(", 
    SuperscriptBox["2", "k"], ")"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "488a26ac-2902-4808-b3ef-551b10b85385"],
 " when started with a single node?"
}], "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
   3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
   3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.818799583712069*^9, 
   3.818800068334037*^9}, {3.818800259199347*^9, 3.818800289562599*^9}, {
   3.818800435467061*^9, 3.818800534990533*^9}, {3.818800720581793*^9, 
   3.8188007318831873`*^9}, 3.818800778779703*^9, {3.8188008197557297`*^9, 
   3.8188009472894487`*^9}, {3.8188009885738688`*^9, 3.81880109855894*^9}, 
   3.818801132196699*^9, {3.818801193500161*^9, 3.8188012225570993`*^9}, {
   3.818801278416477*^9, 3.81880132884266*^9}, {3.818801375822434*^9, 
   3.818801381336132*^9}, {3.8188014186546907`*^9, 3.8188015520840387`*^9}, {
   3.818801582424788*^9, 3.818801601212912*^9}, {3.81880165380573*^9, 
   3.8188016558021183`*^9}, {3.818801701529986*^9, 3.81880171744663*^9}, {
   3.818801768747162*^9, 3.818801851616778*^9}, {3.818801881867337*^9, 
   3.818802190687976*^9}, {3.818802350616976*^9, 3.818802369782605*^9}, {
   3.81880248106854*^9, 3.818802595201623*^9}, {3.818802811410652*^9, 
   3.818802943668639*^9}, {3.85043575862047*^9, 3.8504357987328653`*^9}, {
   3.8504386322709*^9, 3.850438655583107*^9}, {3.850438740746456*^9, 
   3.8504387607019873`*^9}, {3.850470986286248*^9, 3.850471118965436*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"e94d9271-1909-4cd7-956a-6c1c952d1976"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gr", "=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"N", "=", "16"}], "}"}], ",", 
    RowBox[{"Graph", "[", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Sort", "/@", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"i", ">", "1"}], ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}], "\[UndirectedEdge]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"i", "-", "1"}], ",", "j"}], "}"}]}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"j", ">", "1"}], ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}], "\[UndirectedEdge]", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"j", "-", "1"}]}], "}"}]}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"i", "<", "N"}], ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}], "\[UndirectedEdge]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"i", "+", "1"}], ",", "j"}], "}"}]}], ",", 
               RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"j", "<", "N"}], ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}], "\[UndirectedEdge]", 
                RowBox[{"{", 
                 RowBox[{"i", ",", 
                  RowBox[{"j", "+", "1"}]}], "}"}]}], ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "N"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", "N"}], "}"}]}], "]"}], "]"}], "]"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"AnnotationRules", "->", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], "->", 
           RowBox[{"{", 
            RowBox[{"\"\<color\>\"", "->", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{
                  RowBox[{"i", "+", "j"}], ",", "2"}], "]"}], "==", "0"}], 
               ",", "Red", ",", "Blue"}], "]"}]}], "}"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "N"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", "N"}], "}"}]}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.850432376707891*^9, 3.850432430257625*^9}, {
   3.850432463450741*^9, 3.850432655994108*^9}, {3.8504327042266703`*^9, 
   3.850432705237775*^9}, {3.850432748472374*^9, 3.850432779873*^9}, {
   3.850432811453187*^9, 3.850432844319309*^9}, {3.850432883838059*^9, 
   3.850432973687323*^9}, 3.850433030257041*^9, {3.850471076669894*^9, 
   3.850471076829854*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"dbb16663-b533-46c2-8055-85e3a2ee02c1"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[CompressedData["
1:eJwVkcl1BSAMAz94391CWkoJaSD930I4wMHPQhp9/fx+/9zPO+fz+X/POfee
A+/CC4cuHr505PLRK8euHr924vrJG6dunr515vbZO3fhrQIAAgGDgIKBQ0BC
QcPA4pNFQERCRkFFQ8fAxMLGwaX3JQEhETEJKRk5BSUVNQ0tPzsMjEzMLKxs
7BycXNw8vPKsCggKCYuIiolLSEpJy8jqi6GgqKSsoqqmrqGppa2jay+igaGR
sYmpmbmFpZW1ja2/+A6OTs4urm7uHp5e3j6+8dAEBAYFh4SGhUdERkXHxObD
lpCYlJySmpaekZmVnZNbD2lBYVFxSWlZeUVlVXVNbT/cDY1NzS2tbe0dnV3d
Pb3zqhgYHBoeGR0bn5icmp6Z3VfTvhr2odyHY1+kfbb2Se8b/wGjHxKs
      "], {
      Null, CompressedData["
1:eJw911WUFlQYhtEfBREREQEREOlO6QbpBoduGLpmkG6QbpBukO7u7u5uRrq7
U1lrL6/2c3e+9/IkDA4NCvkiEAiEhQsEPvsf//ulDs8I+itG1F8zkv6GkfW3
jKK/Y1T9PaPpHxhdx2BM/SNj6Z8YW8dhXP0z4+lfGF8nsDUCE+qITKQjMbGO
zCQ6CpPqqEymozG5js4UOiZT6lhMpWMztY7LNDoe0+r4TKcTML3OYGsi/qoT
M6NOwkw6KTPrZMyikzOrTsFsOiWz61TMoVMzp07DXDotc+t0zKPTM6/OwHw6
v60Z+ZvOxAI6MwvqLCyks7KwzsYiOjuL6hwspnOyuM7FEjo3S+o8LKXzsrTO
xzI6P8vqcrYW4O+6IIN0IZbXhVlBF2FFXZSVdDFW1sVZRZdgVV2S1XQpVtel
WUOXYU1dlrV0OdbWdWwNYl1dnsG6AuvpiqyvK7GBrsyGugob6apsrKuxia7O
proGm+mabK5rsYWuzRBdh6G6pa3B/EPXYytdn611A7bRDdlWN2I73ZjtdRN2
0E3ZUTdjJ92cnXULdtEh7KpD2U23ZHfdw9ZW/FO3Zk/dhr10W/bW7dhHt2df
3YH9dEf21504QHfmQN2Fg3RXDtbdOER351Ddg8P0cFt78i/diyN0b47UfThK
9+Vo3Y9jdH+O1QM4Tg/keD2IE/RgTtRDOEkP5WQ9jFP0cE7V02wdwb/1SE7X
ozhDj+ZMPYaz9FjO1uM4R4/nXD2B8/REzteTuEBP5kI9hYv0VC7W07hEL7V1
OpfpGVyuZ3KFnsWVejZX6TlcredyjZ7HtXo+1+kFXK8XcoNexI16MTfpJdys
l3KL3mrrcm7TK7hdr+QOvYo79Wru0mu4W6/lHr2Oe/V67tMbuF9v5AG9iQf1
Zh7SW3hYb+URfdTW7Tymd/C43skTehdP6t08pffwtN7LM3ofz+r9PKcP8Lw+
yAv6EC/qw7ykj/CyPsorOszW4/xHn+BVfZLX9Cle16d5Q5/hTX2Wt/Q53tbn
eUdf4F19kff0Jd7Xl/lAX+FDHcZH+rGtV/lEX+NTfZ3P9A0+1zf5Qt/iS32b
r/QdvtZ3+Ubf41t9n+/0A77XD/lBP+JH/Zif9OfP5xP7ntr1zJ7ndrxw/0t3
v3Lva3e+cd9bd71zz3t3fPD+R+9+8u6/6FXiIA==
       "]}, {
      AnnotationRules -> {{10, 13} -> {"color" -> RGBColor[0, 0, 1]}, {5, 
          7} -> {"color" -> RGBColor[1, 0, 0]}, {3, 1} -> {
          "color" -> RGBColor[1, 0, 0]}, {12, 8} -> {
          "color" -> RGBColor[1, 0, 0]}, {6, 15} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 14} -> {
          "color" -> RGBColor[0, 0, 1]}, {1, 9} -> {
          "color" -> RGBColor[1, 0, 0]}, {3, 10} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 8} -> {
          "color" -> RGBColor[1, 0, 0]}, {1, 14} -> {
          "color" -> RGBColor[0, 0, 1]}, {13, 4} -> {
          "color" -> RGBColor[0, 0, 1]}, {13, 16} -> {
          "color" -> RGBColor[0, 0, 1]}, {7, 11} -> {
          "color" -> RGBColor[1, 0, 0]}, {9, 11} -> {
          "color" -> RGBColor[1, 0, 0]}, {8, 15} -> {
          "color" -> RGBColor[0, 0, 1]}, {10, 10} -> {
          "color" -> RGBColor[1, 0, 0]}, {15, 1} -> {
          "color" -> RGBColor[1, 0, 0]}, {13, 14} -> {
          "color" -> RGBColor[0, 0, 1]}, {14, 6} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 12} -> {
          "color" -> RGBColor[0, 0, 1]}, {2, 11} -> {
          "color" -> RGBColor[0, 0, 1]}, {14, 4} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 13} -> {
          "color" -> RGBColor[1, 0, 0]}, {4, 11} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 12} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 16} -> {
          "color" -> RGBColor[1, 0, 0]}, {10, 8} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 10} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 5} -> {
          "color" -> RGBColor[1, 0, 0]}, {9, 8} -> {
          "color" -> RGBColor[0, 0, 1]}, {2, 8} -> {
          "color" -> RGBColor[1, 0, 0]}, {13, 11} -> {
          "color" -> RGBColor[1, 0, 0]}, {4, 14} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 5} -> {
          "color" -> RGBColor[0, 0, 1]}, {16, 9} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 6} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 7} -> {
          "color" -> RGBColor[0, 0, 1]}, {10, 4} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 8} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 6} -> {
          "color" -> RGBColor[0, 0, 1]}, {1, 2} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 16} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 5} -> {
          "color" -> RGBColor[0, 0, 1]}, {12, 3} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 5} -> {
          "color" -> RGBColor[0, 0, 1]}, {13, 3} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 3} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 1} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 2} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 13} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 14} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 16} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 15} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 1} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 13} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 7} -> {
          "color" -> RGBColor[1, 0, 0]}, {8, 16} -> {
          "color" -> RGBColor[1, 0, 0]}, {10, 9} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 2} -> {
          "color" -> RGBColor[1, 0, 0]}, {12, 6} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 12} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 12} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 7} -> {
          "color" -> RGBColor[1, 0, 0]}, {9, 3} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 16} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 5} -> {
          "color" -> RGBColor[1, 0, 0]}, {8, 11} -> {
          "color" -> RGBColor[0, 0, 1]}, {11, 11} -> {
          "color" -> RGBColor[1, 0, 0]}, {4, 10} -> {
          "color" -> RGBColor[1, 0, 0]}, {6, 2} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 7} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 10} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 8} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 14} -> {
          "color" -> RGBColor[0, 0, 1]}, {11, 6} -> {
          "color" -> RGBColor[0, 0, 1]}, {7, 4} -> {
          "color" -> RGBColor[0, 0, 1]}, {10, 16} -> {
          "color" -> RGBColor[1, 0, 0]}, {10, 15} -> {
          "color" -> RGBColor[0, 0, 1]}, {13, 12} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 2} -> {
          "color" -> RGBColor[1, 0, 0]}, {4, 7} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 9} -> {
          "color" -> RGBColor[0, 0, 1]}, {10, 12} -> {
          "color" -> RGBColor[1, 0, 0]}, {1, 10} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 13} -> {
          "color" -> RGBColor[1, 0, 0]}, {8, 14} -> {
          "color" -> RGBColor[1, 0, 0]}, {6, 3} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 4} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 9} -> {
          "color" -> RGBColor[1, 0, 0]}, {3, 2} -> {
          "color" -> RGBColor[0, 0, 1]}, {2, 1} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 4} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 7} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 1} -> {
          "color" -> RGBColor[0, 0, 1]}, {16, 5} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 3} -> {
          "color" -> RGBColor[0, 0, 1]}, {2, 10} -> {
          "color" -> RGBColor[1, 0, 0]}, {3, 7} -> {
          "color" -> RGBColor[1, 0, 0]}, {10, 5} -> {
          "color" -> RGBColor[0, 0, 1]}, {1, 13} -> {
          "color" -> RGBColor[1, 0, 0]}, {3, 12} -> {
          "color" -> RGBColor[0, 0, 1]}, {11, 9} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 16} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 13} -> {
          "color" -> RGBColor[1, 0, 0]}, {13, 1} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 8} -> {
          "color" -> RGBColor[0, 0, 1]}, {16, 4} -> {
          "color" -> RGBColor[1, 0, 0]}, {12, 5} -> {
          "color" -> RGBColor[0, 0, 1]}, {5, 16} -> {
          "color" -> RGBColor[0, 0, 1]}, {14, 9} -> {
          "color" -> RGBColor[0, 0, 1]}, {2, 3} -> {
          "color" -> RGBColor[0, 0, 1]}, {12, 14} -> {
          "color" -> RGBColor[1, 0, 0]}, {13, 2} -> {
          "color" -> RGBColor[0, 0, 1]}, {12, 9} -> {
          "color" -> RGBColor[0, 0, 1]}, {16, 2} -> {
          "color" -> RGBColor[1, 0, 0]}, {12, 11} -> {
          "color" -> RGBColor[0, 0, 1]}, {1, 7} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 1} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 15} -> {
          "color" -> RGBColor[0, 0, 1]}, {5, 3} -> {
          "color" -> RGBColor[1, 0, 0]}, {1, 5} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 15} -> {
          "color" -> RGBColor[1, 0, 0]}, {10, 2} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 2} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 4} -> {
          "color" -> RGBColor[0, 0, 1]}, {7, 3} -> {
          "color" -> RGBColor[1, 0, 0]}, {13, 8} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 9} -> {
          "color" -> RGBColor[1, 0, 0]}, {9, 10} -> {
          "color" -> RGBColor[0, 0, 1]}, {10, 11} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 7} -> {
          "color" -> RGBColor[0, 0, 1]}, {1, 12} -> {
          "color" -> RGBColor[0, 0, 1]}, {13, 7} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 6} -> {
          "color" -> RGBColor[1, 0, 0]}, {12, 2} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 8} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 16} -> {
          "color" -> RGBColor[0, 0, 1]}, {7, 7} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 12} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 13} -> {
          "color" -> RGBColor[1, 0, 0]}, {8, 13} -> {
          "color" -> RGBColor[0, 0, 1]}, {7, 6} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 15} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 14} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 1} -> {
          "color" -> RGBColor[1, 0, 0]}, {13, 10} -> {
          "color" -> RGBColor[0, 0, 1]}, {16, 12} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 9} -> {
          "color" -> RGBColor[0, 0, 1]}, {1, 1} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 16} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 13} -> {
          "color" -> RGBColor[0, 0, 1]}, {13, 9} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 9} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 2} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 3} -> {
          "color" -> RGBColor[0, 0, 1]}, {9, 1} -> {
          "color" -> RGBColor[1, 0, 0]}, {3, 4} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 12} -> {
          "color" -> RGBColor[1, 0, 0]}, {15, 6} -> {
          "color" -> RGBColor[0, 0, 1]}, {7, 2} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 6} -> {
          "color" -> RGBColor[1, 0, 0]}, {8, 9} -> {
          "color" -> RGBColor[0, 0, 1]}, {10, 3} -> {
          "color" -> RGBColor[0, 0, 1]}, {11, 5} -> {
          "color" -> RGBColor[1, 0, 0]}, {1, 8} -> {
          "color" -> RGBColor[0, 0, 1]}, {5, 2} -> {
          "color" -> RGBColor[0, 0, 1]}, {13, 15} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 2} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 1} -> {
          "color" -> RGBColor[1, 0, 0]}, {15, 4} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 10} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 7} -> {
          "color" -> RGBColor[1, 0, 0]}, {4, 6} -> {
          "color" -> RGBColor[1, 0, 0]}, {6, 13} -> {
          "color" -> RGBColor[0, 0, 1]}, {5, 5} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 6} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 11} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 6} -> {
          "color" -> RGBColor[0, 0, 1]}, {13, 13} -> {
          "color" -> RGBColor[1, 0, 0]}, {9, 9} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 13} -> {
          "color" -> RGBColor[0, 0, 1]}, {12, 13} -> {
          "color" -> RGBColor[0, 0, 1]}, {7, 14} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 3} -> {
          "color" -> RGBColor[1, 0, 0]}, {10, 1} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 5} -> {
          "color" -> RGBColor[0, 0, 1]}, {2, 7} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 14} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 12} -> {
          "color" -> RGBColor[1, 0, 0]}, {1, 15} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 15} -> {
          "color" -> RGBColor[1, 0, 0]}, {12, 1} -> {
          "color" -> RGBColor[0, 0, 1]}, {5, 4} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 6} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 15} -> {
          "color" -> RGBColor[0, 0, 1]}, {14, 8} -> {
          "color" -> RGBColor[1, 0, 0]}, {12, 16} -> {
          "color" -> RGBColor[1, 0, 0]}, {15, 12} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 14} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 16} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 13} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 15} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 13} -> {
          "color" -> RGBColor[0, 0, 1]}, {2, 4} -> {
          "color" -> RGBColor[1, 0, 0]}, {1, 4} -> {
          "color" -> RGBColor[0, 0, 1]}, {4, 4} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 15} -> {
          "color" -> RGBColor[0, 0, 1]}, {14, 12} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 10} -> {
          "color" -> RGBColor[1, 0, 0]}, {9, 14} -> {
          "color" -> RGBColor[0, 0, 1]}, {12, 10} -> {
          "color" -> RGBColor[1, 0, 0]}, {10, 14} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 14} -> {
          "color" -> RGBColor[0, 0, 1]}, {12, 12} -> {
          "color" -> RGBColor[1, 0, 0]}, {13, 5} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 10} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 5} -> {
          "color" -> RGBColor[1, 0, 0]}, {2, 5} -> {
          "color" -> RGBColor[0, 0, 1]}, {10, 6} -> {
          "color" -> RGBColor[1, 0, 0]}, {11, 4} -> {
          "color" -> RGBColor[0, 0, 1]}, {11, 3} -> {
          "color" -> RGBColor[1, 0, 0]}, {6, 9} -> {
          "color" -> RGBColor[0, 0, 1]}, {16, 8} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 15} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 14} -> {
          "color" -> RGBColor[1, 0, 0]}, {13, 6} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 12} -> {
          "color" -> RGBColor[1, 0, 0]}, {12, 4} -> {
          "color" -> RGBColor[1, 0, 0]}, {4, 16} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 10} -> {
          "color" -> RGBColor[1, 0, 0]}, {5, 10} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 2} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 8} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 8} -> {
          "color" -> RGBColor[0, 0, 1]}, {6, 10} -> {
          "color" -> RGBColor[1, 0, 0]}, {6, 1} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 16} -> {
          "color" -> RGBColor[0, 0, 1]}, {8, 3} -> {
          "color" -> RGBColor[0, 0, 1]}, {12, 7} -> {
          "color" -> RGBColor[0, 0, 1]}, {12, 15} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 11} -> {
          "color" -> RGBColor[1, 0, 0]}, {6, 11} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 9} -> {
          "color" -> RGBColor[1, 0, 0]}, {7, 5} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 1} -> {
          "color" -> RGBColor[0, 0, 1]}, {1, 3} -> {
          "color" -> RGBColor[1, 0, 0]}, {8, 8} -> {
          "color" -> RGBColor[1, 0, 0]}, {16, 11} -> {
          "color" -> RGBColor[0, 0, 1]}, {1, 16} -> {
          "color" -> RGBColor[0, 0, 1]}, {15, 3} -> {
          "color" -> RGBColor[1, 0, 0]}, {1, 6} -> {
          "color" -> RGBColor[0, 0, 1]}, {3, 11} -> {
          "color" -> RGBColor[1, 0, 0]}, {15, 15} -> {
          "color" -> RGBColor[1, 0, 0]}, {1, 11} -> {
          "color" -> RGBColor[1, 0, 0]}, {14, 11} -> {
          "color" -> RGBColor[0, 0, 1]}, {10, 7} -> {
          "color" -> RGBColor[0, 0, 1]}}}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJwtl3s0FOr3xofcchdiXGcaY8bMNKOSpHgfpYSEoqQidCi5VCK3pMgt3cmp
3EvklkJIUTqVI0qlIpRQJDkSRVS/+a313f/s9a5nrXetZ717f/Z+6Z6B6/8S
pQhDhEL5/6xPfkbPEjdEj+GL6xHr+kl5daFz7GxDGIUs6WSuHyNx+pJbv9/j
QzH2daCtZC95kEVdlCvU2xsb586m/SKc9aftxhv4aHbdZp44PEr2DPnY0P4I
kHL3yXr1djGE+kSGedbycXnTzZCIvGni8omaaTcpwCulK28CJWTxdmNXocc1
PooNyueprRGDekUM22hMgIGrx/ZKDClhKid+bLyQD9e2K7WMVBm8FYRtvTss
wO9z96OMxOeiWN9S5lw+H/Irj+VuqVPC4Gnd0dweAb6MBOdpmGkg1tFa0ieH
j4pL6QFFH1Shq0Koqq0CVG6kukuE6yBp1qawnnN8LAhp31XL0oB9eF/JsVoB
HKr0pU650NEe7TJxMI6PV6J+T6Z26yCFLlVfnCMAr/LD6dXeDCT8rnT9s4eP
RJ9PZYec6Zix722qixUgZO/u3brbmJDsDNSR2MTHUxOLVZY+DLwa3WiV7C2A
146QYxf5LEzvLC20NeWjNi+jIM6DiXZjyaaldgJ0tewp1X/KhsnlCJP7mnxI
0Pb17l7GgjFloql+oQCWUUodIiYcrJCcXfZdhA8X3R+7d31gQ5F3tWr7XAEC
/JL8N9lxMbCttFTk03yI/Mo6N9+ZA97ZLbbnns7HlUuS+p/DuYg7VGBvOHs+
yjhXrrKN3pL0EA97d/H5KNB0bKt+M0IiszU/Hp7kIZ0/NvBV4id53Pcx0HWU
h3lThr/fXJiF7W4O1PZhHsp+inhoyMsgm3r2cOgQD9LiR4ub45Vw5mCldVEf
D2NvC/wYtar4sHi0fX8HD9lHDBsHpDWgo76r4VcjD8y4/CD1bTpINrxEFZTz
IBNsvqLJiY4ze2lnPc/zIN/+sHudPwOelq/P34rioSdxlcg9fyZs+KTzjgcP
o6bTvpusWYifHVC8zJaH50ouO35/ZqPQwdmaLOGhov3I+pTNHIScCXA3ofNg
EPXeMjeGC/acs2wvSS4Mk6wXWYS9Jr4++kHdfzgwWbR/9Wj+Z/IkZ7g96hsH
CG492Z87SWI0Lj59McSBebiU+X/fRPH7X+1MDHCg69SpqxsuDeNBxxrTPg4a
wvKSp2yUoDhqVl7fyUH0og13vyapInYVNUyjlYOsJZrqbwao2B/2u8GxnoM0
TtIbgZ0OqouikrcVctDDUtMI3kBH/+iMpP0ZDkpYf+fw9zFwumZhVXAYBwZn
j7j8DmUigit6It6dgzVbTtUmbWZh+dt5ah5rObjxw0IpWtQAk9lptODlHESG
daTIBAhzcrnkfS4HCQXuZk1nucj+lc7a1MaGYc9XyybOKzJy7aHugUY2Elqu
aE6mDxKtnIZHDXVslIXeUVmq9oPELYj0W1nJxuWm5eWJVqI4fkntRdI1No6Y
rzOO+zAbav0rjt0qYGPOKr1MDTklJF6WWquTxUZ4+cCJa1tU8fls4XTzGTaC
apb6kEdUTB+1a584zAZnNLGIZqKDOYP1lMAANlqeRDZkONDBLr7wyttFeF9I
3IziAQZQn+FvspKNKKcjdayjTHQvNrXo57GRstj3T2kgCwXVf25PabLh1LV9
X4CBAZbffqwtrcBG8X3y7HomB9I5ixKSZ7HRbOCZUXedCxnG/aOHD+oDjrSX
P3VfkeFT9199DNSHyc6PL+Zv+khi2Q1eWj76kLL2MbPvniBXlMqDONv00aof
dSOxTAQPX1uvO7hBH4dOXQiY5T4bKTEBI6o2+rhk+Hah00tFODVMbj1tpo+0
a4u/fuWrwtrg2PF6Q33kPD1HP5FHRe6fQXyi6WN4cVRkFU0HJ+44XBBR0Ier
yl8rVG3ocCkYfGMxw4REIytmcTADAyXNec2fmHCfWhFlHMfEzbxqCfEOJtxc
67LzQljQ19iZ8KCJiY0hD9KdTQ2wYePeBeL3mAi5M3bc8rbw3bWV9jrWMBHU
IW7R28aF011z3z8yeshWme8ae6qV+NGOSveI6GFyQztvn0I/KY503js+yYDD
Ll7W/Ofj5HXB0iWeIwwUuLcvkV4sgoGmaqOzvQwInIJDfUalMOL7V9pgGwPi
dhtLjxYoIvRE0e9DDxlIvfuqoGe2KpKYC05+qmJg6+oVc6wSqLCXPvVW9ioD
sX5t3rYyOritGJgxfJ6Bg/sivzxbSUdwo2LJmSQG4keoDO39DFi55/7YG8nA
r/MWE9+TmfBrjLcwDmQgK/Lgl5MxLLx0tqv328FAGWXRxAMbA1AZsy52bWVA
cu28WoUWDj4Ee8u928RAXelpVv4XLto3amZmJ9NBs3H6FSr4l3xPtDihk0BH
a17Qq6tBvUSPqvk6O4qOrv3+2h2a4+Rkn12q6D46Th3VCRZ5T4FT6rH16V50
lPrdO74rVwpjq2tfHhD27dhg9VBfjCIuht20shf6mBmTl8z8pIJdLkzW3EV0
nNuixoYfFZZ90a8TmHRICwyNmePasJDOPcmn0pE6mDr5chkdj6fNuiXk6Cie
KCmN2cPAi53LUrtF6chOf5/bKPSf/jjNJ2aKBnneQE250L9RiEA0eowG5q2n
xgcsDFDUdqiOM0IDr+mY+8oqDmZeRuVPfKahzePYWrdOLtwuOPR3ztVB9t3r
l8MoDwlj4blkUzUdSLknTlRffk9okbeD31F00MVMCvUo+kbajWVr0KuNundz
3KSKKNAfr/KeX6+NQ+2PbBT8peBzRL+t9II25jY8rXT0VUTUPyHmvGBtNCY2
Gb9/poKqbVL+4U7aoJgbZtx2osIvWnKVn5k2yqturv/aow24uyl+Z2nDzDjQ
eWIhHRNXkhxtVLWxeoxz+4dwfopN9X6ok9CG+rLho46xTMRWBHza/UcLFZal
MVaRLHiOG6ppTWuh58urYDcYQE0nJvHQjBZovuNYWiPkZMtSu/+Euobt0Wv2
rVwkuVk4yqpTcfdkmMW9Z43khKra7lV6VIRmzVdIr3hPth91iPKRo6KZtvUC
M+UbSZ03kSwzpA510YW0kbMU3O6NL1p0Tx1Mrc6NK+ylwNd7WTp2Th3Rrk1f
610UMSYdFmwaoA6T3T+WbK5TgVv0idfSNuqQ3my5k0eoWB163OidkTpO+skH
m7Voo2Kn95x6pjrW+bTFNLHp0CqYUGmhqsOisstbchsD6pbpukYq6tjrNZpj
GCbkQkMVWTBXHe/6LAdu+LOQ6Bv82EZLHcHFVfnHeQbQWPBIqURPHf2p4UsN
04X1X+i0eA5XHWKyj4IulHLhnUe9kWWkgmz23NzNQa3k8LL+lKU2KgDL/Krc
7l5SEp2bdnGRCvZfo/0d8eAb2Rrd7yAqq4IjHQOD8VkUOGwJyPHsVkZZXHl4
t4MU/j538FFIoTIeXo9ga65XhOIaAX1OtDJq6gJXeVSooLjASMFkizJqGz7E
Ty6kQiQisE1ytTJ6m9nGSre04TzS0KawXBneNv7rRrToeCPSW9FlrAzr3Ijv
EesYMLV9TTUX6hJbx1NbvJnQ0/mxp9NKGdXxvXHtLiwEyJ8fat+oDFlJfoye
ogHWt2UFw0cZtj2/b++I42B08d+Z3/Yrg2+U2Gx+nouE9plfOioKgJL1f9HB
LWR5VI2+8hIFDEq/SV/I6iMJG0quc5SFZ/mvnBnJcaITGGnlVyOPdK1nuYxa
CjIvpQiO2MrDreRBTYenFBSL1QuLu+Swdd+a9IMbFGHab8TlHZKDb9CTbUol
KqCcMur811gO+x+//P6MSYVLyBrPahk57Mj39pDP18aT5uH3TtOyCN9dXExR
FHLi0pfO/lly2Ci7LGPKnIGA55EXjuvIYeiSQUTuBiZEP3HerHaQg9ij79yK
VSys+Mf444IYOSFvChWMf7Ox38Aw7eJNObjrvM+bt5eDikdB1uw+OXiuXCpy
7QwX4T0VRmr2EhgVVOXRNFrJZH2h06w4CcB67a7qF71kz7jLI0dbCfSr/Hl/
R3+c6Gnm21d8EIeJR80j1jMKWjuu3XziJw6WVSTcgqTgOVF04+KEGG5Gb4h+
vlERy/89Od1/Wgy6+d1FTgUqaN6eycmwEkO30g7vbmHfRTVzMv01xXBFwtsw
OUUb6bJWq7PlxbDduM2pV8i5vz/qnpgyEMOA1UeDzwIGirny9+dsEkNlwDPn
iVVM+EYkcKUviKG6Q41pYMJCe6db5K0+MZh2yJpyx9nw9vdVujlfHJPPk523
+nAwskXGZGqHODR2T3jsi+eiVT59zQrmL3KX5mXvurCWGLZGHCil/yKtQ55p
LS/ek62XvCVHkmdIZFPJaKryOIkdjn1WXDZNyigztxgvhPVvasbrrvxJbgeF
Hz0SIQUpb96T1bemiF/61V2MzYoYzbbqwugk+bHofLlHvgr+mdO2Is1pkvxX
eU5NXpmKwUuirPsik0Rz+Ynnx2O1sSb/fHbpxA/yr12jXY+Q69vl1K4lGk+S
jLYgrUd6DKRUzhk1K5ok/VPVb3SXMqG4N3PxT7sp8vzssO8DHgvZZfZfJWR+
ktJR+bfjw2xkhy2/p/zsJ9k8VvM8Xug/nc5hi7lOk6EHgXuZUVxs36G5J7Ll
P0L5X5RNDAeUDo2Qxsu2IZk3e8j2Gx2NzcFfCNt9yXWv6W9E3aCNo33zM4nq
HMd4NwUmx0pVU0o+kch7a+8+OSyFhA9nyIvaAfL8kOQxiS3C+f9NpuqX9kdy
em3Kx3ih/zLnj8n83/1k55iZ82whV3eOH7HU9eknY1/y3RaFaqN1g33Owx39
JJF6dk/VKA3thy+VXhnpJ6JTDyLUNIR7yIHQcsHIB1LvEOP/k8fEznyzJWrW
A4SYZbfk6LAglde1zHJ8kLgaJITYvmPDRdx9LWkcIvtCKqW0hPt/gdEo6w5j
mHDS5sbOC+NCUcw2asj7FaFYJDy+P+8C2f5rkmmS/IK0+9K6X3q9J62i5vZa
js9IpGtXiRV7nNC8hoy/UJuJ92crX90hCmj7LnJSZ/1DpmVX+QwnSIEi91fa
sH8N6X0tgwyh/+gbCn0JGlfJphkNZm+usP833VrPTztDfulmuGeIU0EZPZxq
F7+ZtGWFi5r6C+fi/2LXPR1xr0EaKF4ndfpdz5DPXus5zxUYoHz+tOpWSj65
Lcly9qExEc3Ut+YcuklkVB7qzZNnAe+W39vu0ECaD4T/NSX8P1L+ukIb4TaR
GypeSpw1HJzyyXyQbNJKpn2z7uyy5eL/ANwc1ZE=
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
         ArrowBox[CompressedData["
1:eJw911WUlWUYhuGtGJhgd9Ad0g3SHUM3Dl0zSDdIN0h3d0s3SDdINyPd3S1r
Xb9H1732c/B/75qjiRUeGRbxZigUinojFHrtf/xvNP0W3/ZbYCzbO3zXFhjb
Fp3v2QLj2N7nB7bAuLYP+ZEtMJ7tY8awBca3xeQntsAEtk/5mS0woe1zfmEL
TGT7kl/ZAhPbvuY3tsAktm/5nS0wqe17/mALTGb7kT/ZApPbfvZbYAqd0t8w
Nn/RcZhKx2VqHY9pdHym1QmYTidkep2IGXRiZtRJmEknZWadjFl0cmbVKZhN
p2R2ncOtqfirTs2cOg1z6bTMrdMxj07PvDoD8+mMzK8zsYDOzII6CwvprCys
s7GIzs6iOgeL6eJuzckSOhfDdG6W1HlYSudlaZ2PZXR+ltUFWE4XZHldiBV0
YVbURVhJF2VlXYxVdHFW1dXcGsbfdEmG61Ksrkuzhi7Dmrosa+lyrK3Ls46u
wLq6IuvpSqyvK7OBrsKGuiojdDVG6kZuDefvujob6xpsomuyqa7FZro2m+s6
bKHrsqWux1a6PlvrBmyjG7KtjmA7Hcn2uhE76I5ubcw/dBN20k3ZWTdjF92c
XXULdtMt2V23Yg/dmj11G/bSbdlbt2Mf3Z59dQf20x3ZXw9wayf+qTtzoO7C
QborB+tuHKK7c6juwWG6J4frXhyhe3Ok7sNRui9H634co/tzrB7AcXq8Wwdy
gh7EiXowJ+khnKyHcooexql6OKfpEZyuR3KGHsWZejRn6TGcrcdyjh7HuXo8
5+n5bp3Iv/QkLtCTuVBP4SI9lYv1NC7R07lUz+AyPZPL9Syu0LO5Us/hKj2X
q/U8rtHzuVavc+sC/q0Xcr1exA16MTfqJdykl3KzXsYtejm36hXcpldyu17F
HXo1d+o13KXXcrdexz16r1vX8x+9gfv0Ru7Xm3hAb+ZBvYWH9FYe1tt4RG/n
Ub2Dx/ROHte7eELv5km9h6f0Xp7WUW7dx3/1fp7RB3hWH+Q5fYjn9WFe0Ed4
UR/lJX2Ml/VxXtEneFWf5DV9itf1ad7QUbypb7n1DG/rs7yjz/GuPs97+gLv
64t8oC/xob7MR/oKH+urfKKv8am+zmf6Bp/rm3yhb/Glfv3P52333XHXXffc
c8d973/g3Q+995F3Pva+J9711Hueecdz33/huy999xWPTeIg
          "], 
          0.0827451475462607]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.0827451475462607], DiskBox[2, 0.0827451475462607], 
         DiskBox[3, 0.0827451475462607], DiskBox[4, 0.0827451475462607], 
         DiskBox[5, 0.0827451475462607], DiskBox[6, 0.0827451475462607], 
         DiskBox[7, 0.0827451475462607], DiskBox[8, 0.0827451475462607], 
         DiskBox[9, 0.0827451475462607], DiskBox[10, 0.0827451475462607], 
         DiskBox[11, 0.0827451475462607], DiskBox[12, 0.0827451475462607], 
         DiskBox[13, 0.0827451475462607], DiskBox[14, 0.0827451475462607], 
         DiskBox[15, 0.0827451475462607], DiskBox[16, 0.0827451475462607], 
         DiskBox[17, 0.0827451475462607], DiskBox[18, 0.0827451475462607], 
         DiskBox[19, 0.0827451475462607], DiskBox[20, 0.0827451475462607], 
         DiskBox[21, 0.0827451475462607], DiskBox[22, 0.0827451475462607], 
         DiskBox[23, 0.0827451475462607], DiskBox[24, 0.0827451475462607], 
         DiskBox[25, 0.0827451475462607], DiskBox[26, 0.0827451475462607], 
         DiskBox[27, 0.0827451475462607], DiskBox[28, 0.0827451475462607], 
         DiskBox[29, 0.0827451475462607], DiskBox[30, 0.0827451475462607], 
         DiskBox[31, 0.0827451475462607], DiskBox[32, 0.0827451475462607], 
         DiskBox[33, 0.0827451475462607], DiskBox[34, 0.0827451475462607], 
         DiskBox[35, 0.0827451475462607], DiskBox[36, 0.0827451475462607], 
         DiskBox[37, 0.0827451475462607], DiskBox[38, 0.0827451475462607], 
         DiskBox[39, 0.0827451475462607], DiskBox[40, 0.0827451475462607], 
         DiskBox[41, 0.0827451475462607], DiskBox[42, 0.0827451475462607], 
         DiskBox[43, 0.0827451475462607], DiskBox[44, 0.0827451475462607], 
         DiskBox[45, 0.0827451475462607], DiskBox[46, 0.0827451475462607], 
         DiskBox[47, 0.0827451475462607], DiskBox[48, 0.0827451475462607], 
         DiskBox[49, 0.0827451475462607], DiskBox[50, 0.0827451475462607], 
         DiskBox[51, 0.0827451475462607], DiskBox[52, 0.0827451475462607], 
         DiskBox[53, 0.0827451475462607], DiskBox[54, 0.0827451475462607], 
         DiskBox[55, 0.0827451475462607], DiskBox[56, 0.0827451475462607], 
         DiskBox[57, 0.0827451475462607], DiskBox[58, 0.0827451475462607], 
         DiskBox[59, 0.0827451475462607], DiskBox[60, 0.0827451475462607], 
         DiskBox[61, 0.0827451475462607], DiskBox[62, 0.0827451475462607], 
         DiskBox[63, 0.0827451475462607], DiskBox[64, 0.0827451475462607], 
         DiskBox[65, 0.0827451475462607], DiskBox[66, 0.0827451475462607], 
         DiskBox[67, 0.0827451475462607], DiskBox[68, 0.0827451475462607], 
         DiskBox[69, 0.0827451475462607], DiskBox[70, 0.0827451475462607], 
         DiskBox[71, 0.0827451475462607], DiskBox[72, 0.0827451475462607], 
         DiskBox[73, 0.0827451475462607], DiskBox[74, 0.0827451475462607], 
         DiskBox[75, 0.0827451475462607], DiskBox[76, 0.0827451475462607], 
         DiskBox[77, 0.0827451475462607], DiskBox[78, 0.0827451475462607], 
         DiskBox[79, 0.0827451475462607], DiskBox[80, 0.0827451475462607], 
         DiskBox[81, 0.0827451475462607], DiskBox[82, 0.0827451475462607], 
         DiskBox[83, 0.0827451475462607], DiskBox[84, 0.0827451475462607], 
         DiskBox[85, 0.0827451475462607], DiskBox[86, 0.0827451475462607], 
         DiskBox[87, 0.0827451475462607], DiskBox[88, 0.0827451475462607], 
         DiskBox[89, 0.0827451475462607], DiskBox[90, 0.0827451475462607], 
         DiskBox[91, 0.0827451475462607], DiskBox[92, 0.0827451475462607], 
         DiskBox[93, 0.0827451475462607], DiskBox[94, 0.0827451475462607], 
         DiskBox[95, 0.0827451475462607], DiskBox[96, 0.0827451475462607], 
         DiskBox[97, 0.0827451475462607], DiskBox[98, 0.0827451475462607], 
         DiskBox[99, 0.0827451475462607], DiskBox[100, 0.0827451475462607], 
         DiskBox[101, 0.0827451475462607], DiskBox[102, 0.0827451475462607], 
         DiskBox[103, 0.0827451475462607], DiskBox[104, 0.0827451475462607], 
         DiskBox[105, 0.0827451475462607], DiskBox[106, 0.0827451475462607], 
         DiskBox[107, 0.0827451475462607], DiskBox[108, 0.0827451475462607], 
         DiskBox[109, 0.0827451475462607], DiskBox[110, 0.0827451475462607], 
         DiskBox[111, 0.0827451475462607], DiskBox[112, 0.0827451475462607], 
         DiskBox[113, 0.0827451475462607], DiskBox[114, 0.0827451475462607], 
         DiskBox[115, 0.0827451475462607], DiskBox[116, 0.0827451475462607], 
         DiskBox[117, 0.0827451475462607], DiskBox[118, 0.0827451475462607], 
         DiskBox[119, 0.0827451475462607], DiskBox[120, 0.0827451475462607], 
         DiskBox[121, 0.0827451475462607], DiskBox[122, 0.0827451475462607], 
         DiskBox[123, 0.0827451475462607], DiskBox[124, 0.0827451475462607], 
         DiskBox[125, 0.0827451475462607], DiskBox[126, 0.0827451475462607], 
         DiskBox[127, 0.0827451475462607], DiskBox[128, 0.0827451475462607], 
         DiskBox[129, 0.0827451475462607], DiskBox[130, 0.0827451475462607], 
         DiskBox[131, 0.0827451475462607], DiskBox[132, 0.0827451475462607], 
         DiskBox[133, 0.0827451475462607], DiskBox[134, 0.0827451475462607], 
         DiskBox[135, 0.0827451475462607], DiskBox[136, 0.0827451475462607], 
         DiskBox[137, 0.0827451475462607], DiskBox[138, 0.0827451475462607], 
         DiskBox[139, 0.0827451475462607], DiskBox[140, 0.0827451475462607], 
         DiskBox[141, 0.0827451475462607], DiskBox[142, 0.0827451475462607], 
         DiskBox[143, 0.0827451475462607], DiskBox[144, 0.0827451475462607], 
         DiskBox[145, 0.0827451475462607], DiskBox[146, 0.0827451475462607], 
         DiskBox[147, 0.0827451475462607], DiskBox[148, 0.0827451475462607], 
         DiskBox[149, 0.0827451475462607], DiskBox[150, 0.0827451475462607], 
         DiskBox[151, 0.0827451475462607], DiskBox[152, 0.0827451475462607], 
         DiskBox[153, 0.0827451475462607], DiskBox[154, 0.0827451475462607], 
         DiskBox[155, 0.0827451475462607], DiskBox[156, 0.0827451475462607], 
         DiskBox[157, 0.0827451475462607], DiskBox[158, 0.0827451475462607], 
         DiskBox[159, 0.0827451475462607], DiskBox[160, 0.0827451475462607], 
         DiskBox[161, 0.0827451475462607], DiskBox[162, 0.0827451475462607], 
         DiskBox[163, 0.0827451475462607], DiskBox[164, 0.0827451475462607], 
         DiskBox[165, 0.0827451475462607], DiskBox[166, 0.0827451475462607], 
         DiskBox[167, 0.0827451475462607], DiskBox[168, 0.0827451475462607], 
         DiskBox[169, 0.0827451475462607], DiskBox[170, 0.0827451475462607], 
         DiskBox[171, 0.0827451475462607], DiskBox[172, 0.0827451475462607], 
         DiskBox[173, 0.0827451475462607], DiskBox[174, 0.0827451475462607], 
         DiskBox[175, 0.0827451475462607], DiskBox[176, 0.0827451475462607], 
         DiskBox[177, 0.0827451475462607], DiskBox[178, 0.0827451475462607], 
         DiskBox[179, 0.0827451475462607], DiskBox[180, 0.0827451475462607], 
         DiskBox[181, 0.0827451475462607], DiskBox[182, 0.0827451475462607], 
         DiskBox[183, 0.0827451475462607], DiskBox[184, 0.0827451475462607], 
         DiskBox[185, 0.0827451475462607], DiskBox[186, 0.0827451475462607], 
         DiskBox[187, 0.0827451475462607], DiskBox[188, 0.0827451475462607], 
         DiskBox[189, 0.0827451475462607], DiskBox[190, 0.0827451475462607], 
         DiskBox[191, 0.0827451475462607], DiskBox[192, 0.0827451475462607], 
         DiskBox[193, 0.0827451475462607], DiskBox[194, 0.0827451475462607], 
         DiskBox[195, 0.0827451475462607], DiskBox[196, 0.0827451475462607], 
         DiskBox[197, 0.0827451475462607], DiskBox[198, 0.0827451475462607], 
         DiskBox[199, 0.0827451475462607], DiskBox[200, 0.0827451475462607], 
         DiskBox[201, 0.0827451475462607], DiskBox[202, 0.0827451475462607], 
         DiskBox[203, 0.0827451475462607], DiskBox[204, 0.0827451475462607], 
         DiskBox[205, 0.0827451475462607], DiskBox[206, 0.0827451475462607], 
         DiskBox[207, 0.0827451475462607], DiskBox[208, 0.0827451475462607], 
         DiskBox[209, 0.0827451475462607], DiskBox[210, 0.0827451475462607], 
         DiskBox[211, 0.0827451475462607], DiskBox[212, 0.0827451475462607], 
         DiskBox[213, 0.0827451475462607], DiskBox[214, 0.0827451475462607], 
         DiskBox[215, 0.0827451475462607], DiskBox[216, 0.0827451475462607], 
         DiskBox[217, 0.0827451475462607], DiskBox[218, 0.0827451475462607], 
         DiskBox[219, 0.0827451475462607], DiskBox[220, 0.0827451475462607], 
         DiskBox[221, 0.0827451475462607], DiskBox[222, 0.0827451475462607], 
         DiskBox[223, 0.0827451475462607], DiskBox[224, 0.0827451475462607], 
         DiskBox[225, 0.0827451475462607], DiskBox[226, 0.0827451475462607], 
         DiskBox[227, 0.0827451475462607], DiskBox[228, 0.0827451475462607], 
         DiskBox[229, 0.0827451475462607], DiskBox[230, 0.0827451475462607], 
         DiskBox[231, 0.0827451475462607], DiskBox[232, 0.0827451475462607], 
         DiskBox[233, 0.0827451475462607], DiskBox[234, 0.0827451475462607], 
         DiskBox[235, 0.0827451475462607], DiskBox[236, 0.0827451475462607], 
         DiskBox[237, 0.0827451475462607], DiskBox[238, 0.0827451475462607], 
         DiskBox[239, 0.0827451475462607], DiskBox[240, 0.0827451475462607], 
         DiskBox[241, 0.0827451475462607], DiskBox[242, 0.0827451475462607], 
         DiskBox[243, 0.0827451475462607], DiskBox[244, 0.0827451475462607], 
         DiskBox[245, 0.0827451475462607], DiskBox[246, 0.0827451475462607], 
         DiskBox[247, 0.0827451475462607], DiskBox[248, 0.0827451475462607], 
         DiskBox[249, 0.0827451475462607], DiskBox[250, 0.0827451475462607], 
         DiskBox[251, 0.0827451475462607], DiskBox[252, 0.0827451475462607], 
         DiskBox[253, 0.0827451475462607], DiskBox[254, 0.0827451475462607], 
         DiskBox[255, 0.0827451475462607], 
         DiskBox[256, 0.0827451475462607]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.85043265728697*^9, 3.850432706003593*^9, {3.850432783523921*^9, 
   3.8504328127442493`*^9}, 3.850432845037463*^9, 3.850432975005518*^9, 
   3.850433031382947*^9, 3.8504710778979*^9},
 CellLabel->
  "Out[226]=",ExpressionUUID->"5727c9fc-6138-471b-86fe-c10e3cbee413"]
}, Open  ]],

Cell["\<\
Fun facts:  
\t1. Starting with an initial linear graph, this graph grammar model can \
simulate Turing machines directly.  
\t2. Starting with an initial lattice graph, this graph grammar model can \
simulate cellular automata using a synchronization mechanism.  And by growing \
the graph as needed, it can simulate an infinite cellular automaton running \
from a finite initial condition.
\t3. With a suitable notion of parallel time (i.e. events happen at a fixed \
rate per node), this model can grow exponentially large graphs in linear time.\
\>", "Text",
 CellChangeTimes->{{3.8182163004062233`*^9, 3.818216324675933*^9}, {
   3.818216399775941*^9, 3.818216412086306*^9}, {3.818217589800467*^9, 
   3.818217749680848*^9}, {3.81821860584719*^9, 3.81821867021262*^9}, {
   3.818291087740992*^9, 3.818291202953177*^9}, {3.818291239339157*^9, 
   3.8182913912743073`*^9}, {3.818291432913884*^9, 3.818291640185392*^9}, {
   3.818291863011408*^9, 3.818291897620373*^9}, {3.818798807141083*^9, 
   3.818798811027849*^9}, {3.818798855025195*^9, 3.818799033621908*^9}, {
   3.8187990644167767`*^9, 3.8187992404723177`*^9}, {3.818799583712069*^9, 
   3.818800068334037*^9}, {3.818800259199347*^9, 3.818800289562599*^9}, {
   3.818800435467061*^9, 3.818800534990533*^9}, {3.818800720581793*^9, 
   3.8188007318831873`*^9}, 3.818800778779703*^9, {3.8188008197557297`*^9, 
   3.8188009472894487`*^9}, {3.8188009885738688`*^9, 3.81880109855894*^9}, 
   3.818801132196699*^9, {3.818801193500161*^9, 3.8188012225570993`*^9}, {
   3.818801278416477*^9, 3.81880132884266*^9}, {3.818801375822434*^9, 
   3.818801381336132*^9}, {3.8188014186546907`*^9, 3.8188015520840387`*^9}, {
   3.818801582424788*^9, 3.818801601212912*^9}, {3.81880165380573*^9, 
   3.8188016558021183`*^9}, {3.85047129630751*^9, 3.850471552145969*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"cda0d37f-8fd7-483b-bb11-39bb61b7ce22"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 988},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 216, 4, 96, "Title",ExpressionUUID->"c437c838-c597-456c-bc81-a62a98581f24"],
Cell[799, 28, 1321, 21, 94, "Text",ExpressionUUID->"d7433995-cfe2-43c2-9e34-730a14762c61"],
Cell[CellGroupData[{
Cell[2145, 53, 516, 8, 67, "Section",ExpressionUUID->"2c3d6281-37c1-4d0b-8df4-92b02e31e27a"],
Cell[2664, 63, 2670, 40, 160, "Text",ExpressionUUID->"5e6f642a-d172-4816-96c1-454c77d985cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5371, 108, 491, 7, 67, "Section",ExpressionUUID->"39382485-c85e-4003-9192-da3c21294f26"],
Cell[5865, 117, 5545, 79, 974, "Text",ExpressionUUID->"62772f6f-62c1-4810-ae8e-c8960d9ef14b"],
Cell[11413, 198, 3130, 48, 336, "Text",ExpressionUUID->"c4c8a92d-6ed1-4442-8e7d-5d06553765db"],
Cell[14546, 248, 2751, 39, 138, "Text",ExpressionUUID->"683eb8db-3a61-414f-8097-2ee77ed6a517"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17334, 292, 217, 4, 67, "Section",ExpressionUUID->"28ae2634-02c0-4120-8065-8ec0e98cd7da"],
Cell[17554, 298, 1676, 29, 204, "Text",ExpressionUUID->"5bd5e971-99c8-40ea-984d-77a48c7f20d4"],
Cell[19233, 329, 277109, 4555, 607, "Input",ExpressionUUID->"643537fc-8483-45cf-a315-6f4331605ba5"],
Cell[296345, 4886, 1244, 22, 48, "Input",ExpressionUUID->"c2270c6d-7e03-4185-ae87-e5955c91fdf6"],
Cell[CellGroupData[{
Cell[297614, 4912, 933, 19, 28, "Input",ExpressionUUID->"b71ef4af-2ae1-463e-84a2-34073c7c1f9c"],
Cell[298550, 4933, 327, 9, 32, "Output",ExpressionUUID->"1118c5d9-53cb-45fa-8f99-f6f27202c82f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298914, 4947, 951, 26, 48, "Input",ExpressionUUID->"38c6c54e-7971-45df-9cfa-275cea426404"],
Cell[299868, 4975, 711, 20, 32, "Output",ExpressionUUID->"add0f4d4-27e2-4ef5-9da0-5cb7703a7afd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[300616, 5000, 498, 12, 28, "Input",ExpressionUUID->"8b42d75a-21b2-49fc-b81a-495b6dc3362a"],
Cell[301117, 5014, 356, 10, 32, "Output",ExpressionUUID->"407d04c7-3275-4925-89ea-6539cb04c05d"]
}, Open  ]],
Cell[301488, 5027, 622, 13, 116, "Text",ExpressionUUID->"8b3bbe9f-f36d-48e8-af0d-e48f7ee44c9a"],
Cell[302113, 5042, 1339, 30, 85, "Input",ExpressionUUID->"5672da39-e7ea-45d8-9169-10a2f5d4a8c5",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[303477, 5076, 288, 4, 28, "Input",ExpressionUUID->"20e4a4fb-2a34-4f3e-b6aa-f42c57cf8ce7"],
Cell[303768, 5082, 300, 6, 32, "Output",ExpressionUUID->"801c8cff-d0c6-4480-8c37-155c4d96dd8d"]
}, Open  ]],
Cell[304083, 5091, 978, 15, 116, "Text",ExpressionUUID->"0e0422af-6261-4b80-a69f-af31005b0f40"],
Cell[305064, 5108, 857, 22, 44, "Input",ExpressionUUID->"cc4fcc25-6282-49b5-b756-b2d4e1755917",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[305946, 5134, 523, 11, 28, "Input",ExpressionUUID->"e6545c3a-79be-4e68-910e-0e36629d85e8"],
Cell[306472, 5147, 154, 2, 32, "Output",ExpressionUUID->"31398af8-68f3-410e-bd5b-dc78521222bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[306663, 5154, 403, 9, 28, "Input",ExpressionUUID->"d52220e8-2d42-49de-b9dd-d331201e4078"],
Cell[307069, 5165, 153, 2, 32, "Output",ExpressionUUID->"8137903a-e34b-424f-b482-eea71d478037"]
}, Open  ]],
Cell[307237, 5170, 1091, 17, 72, "Text",ExpressionUUID->"4c9f5425-4393-4d62-86eb-c776125c63c1"],
Cell[CellGroupData[{
Cell[308353, 5191, 688, 19, 28, "Input",ExpressionUUID->"c164e7a2-11f8-4cd0-9a53-1c1fd72a7b4a"],
Cell[309044, 5212, 1038, 32, 79, "Output",ExpressionUUID->"9e5824bf-aef5-41aa-99e6-d9c4fdb0ba60"]
}, Open  ]],
Cell[310097, 5247, 782, 20, 83, "Input",ExpressionUUID->"5ba282f3-eebf-4e55-bc8a-f535b3aa0536",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[310904, 5271, 667, 18, 28, "Input",ExpressionUUID->"10d8853f-b6c8-454d-8133-01de58c7d6a7"],
Cell[311574, 5291, 1063, 32, 79, "Output",ExpressionUUID->"df1fead5-1ada-482a-8f67-63ec167e02c0"]
}, Open  ]],
Cell[312652, 5326, 1784, 28, 204, "Text",ExpressionUUID->"cf397821-ce11-47af-8741-626a36bf04e6"],
Cell[314439, 5356, 5088, 105, 235, "Input",ExpressionUUID->"5aaebc64-ea2b-4fe5-857e-ac20156d59ed",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[319552, 5465, 178, 2, 28, "Input",ExpressionUUID->"6695e91c-c953-427e-a76c-a4281a7d5d7b"],
Cell[319733, 5469, 329, 9, 32, "Output",ExpressionUUID->"165b2b06-25da-4d87-9fcc-947879b083f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[320099, 5483, 570, 12, 28, "Input",ExpressionUUID->"a440b7f7-d39d-4029-bd04-a4758ad1c192"],
Cell[320672, 5497, 402, 9, 32, "Output",ExpressionUUID->"83e45f64-d8f8-4535-90a9-3dd7522ded26"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321111, 5511, 633, 16, 28, "Input",ExpressionUUID->"bb5cb0d5-2a05-4078-be6d-a82c1df9c718"],
Cell[321747, 5529, 1281, 37, 96, "Output",ExpressionUUID->"df1c8cd0-de34-48fa-a68b-b91cf38d72c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323065, 5571, 466, 12, 28, "Input",ExpressionUUID->"5d4236c3-b937-4a61-a50a-e8f7e2377ca5"],
Cell[323534, 5585, 1387, 44, 52, "Output",ExpressionUUID->"8c873b4d-12ec-4a61-8622-01844b8ad051"]
}, Open  ]],
Cell[CellGroupData[{
Cell[324958, 5634, 702, 19, 28, "Input",ExpressionUUID->"f57d1988-adbb-437f-a1ee-ebc70b8a0d1d"],
Cell[325663, 5655, 10843, 316, 249, "Output",ExpressionUUID->"b37ce9b7-132d-41ff-90d4-7393cb24fdd3"]
}, Open  ]],
Cell[336521, 5974, 1627, 24, 138, "Text",ExpressionUUID->"b00784f8-1e9a-4cf1-9917-30647e7cfa38"],
Cell[338151, 6000, 4316, 86, 197, "Input",ExpressionUUID->"8de874bf-4a28-4cfd-8abc-06c130adc944",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[342492, 6090, 767, 15, 28, "Input",ExpressionUUID->"851e69df-c873-4156-85a7-9a143fa25e69"],
Cell[343262, 6107, 261, 6, 32, "Output",ExpressionUUID->"27e88562-6f0e-4b64-8e63-7b65c40bcfec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[343560, 6118, 737, 15, 28, "Input",ExpressionUUID->"713d9099-ed9c-43ce-b1f5-e47a6847e5cb"],
Cell[344300, 6135, 205, 4, 32, "Output",ExpressionUUID->"71f133b6-1c2d-40f5-abd2-049072ee9743"]
}, Open  ]],
Cell[CellGroupData[{
Cell[344542, 6144, 1555, 41, 67, "Input",ExpressionUUID->"455df06a-b7a2-48b8-a731-6f1ab2ae35c7"],
Cell[346100, 6187, 853, 26, 181, "Output",ExpressionUUID->"38279e1d-959d-4f36-b42c-18623251db1a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[346990, 6218, 871, 21, 48, "Input",ExpressionUUID->"5fd0f1b2-b075-4c6b-ab68-63c95e8a5415"],
Cell[347864, 6241, 158, 2, 32, "Output",ExpressionUUID->"dcff07a4-a9d2-463b-b43b-bda78939bbcb"]
}, Open  ]],
Cell[348037, 6246, 2088, 33, 160, "Text",ExpressionUUID->"c0020903-8e6d-4533-b00c-a9dc277f627a"],
Cell[350128, 6281, 1462, 22, 138, "Text",ExpressionUUID->"c67ebf2e-d742-4071-82db-c38bf33501f8"],
Cell[351593, 6305, 167462, 2756, 460, "Input",ExpressionUUID->"9af9d55c-a955-4ba1-a3ba-3f6f21056b1d"],
Cell[519058, 9063, 267, 5, 28, "Input",ExpressionUUID->"036d0f87-57e6-4ae7-8840-50a7a756f8e6"],
Cell[519328, 9070, 1269, 31, 48, "Input",ExpressionUUID->"722baf60-443d-4008-9495-884d47830db8"],
Cell[CellGroupData[{
Cell[520622, 9105, 295, 6, 28, "Input",ExpressionUUID->"f5779e56-f81f-406c-b170-1cf9a247f0d8"],
Cell[520920, 9113, 577, 14, 32, "Output",ExpressionUUID->"6fc3d5ad-480d-4775-bd9b-3b00a9c3c42d"]
}, Open  ]],
Cell[521512, 9130, 1350, 31, 48, "Input",ExpressionUUID->"8ad18798-cbfe-40d5-95cb-b7006156314d"],
Cell[CellGroupData[{
Cell[522887, 9165, 610, 9, 28, "Input",ExpressionUUID->"5b074532-88ad-450f-9569-48e67e505dc1"],
Cell[523500, 9176, 2630, 72, 109, "Output",ExpressionUUID->"87e65de3-6fa8-4298-ae9d-8dedf5c07afb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[526167, 9253, 397, 6, 28, "Input",ExpressionUUID->"5fd8d3e4-fc22-4f4a-a885-38590f3988f9"],
Cell[526567, 9261, 1031, 23, 52, "Output",ExpressionUUID->"01886b2b-b030-4a96-9032-338c729b0163"]
}, Open  ]],
Cell[CellGroupData[{
Cell[527635, 9289, 2685, 64, 105, "Input",ExpressionUUID->"bac91c7e-61e2-41ff-afca-5630ae5eb044"],
Cell[530323, 9355, 666, 18, 32, "Output",ExpressionUUID->"d7ce15a9-484c-4f66-8dcd-cb05b16e0c54"]
}, Open  ]],
Cell[531004, 9376, 3068, 75, 162, "Input",ExpressionUUID->"0cb1f78c-8298-4983-9266-2da67dba8328"],
Cell[CellGroupData[{
Cell[534097, 9455, 341, 6, 28, "Input",ExpressionUUID->"f15b533b-b017-4cd2-b98a-51bf9f31e5a7"],
Cell[534441, 9463, 152, 2, 32, "Output",ExpressionUUID->"49c82139-a15f-4bf2-b723-8f0e7225df05"]
}, Open  ]],
Cell[CellGroupData[{
Cell[534630, 9470, 558, 12, 28, "Input",ExpressionUUID->"bd0a9932-e4d1-4938-b25e-088ef1f34ba9"],
Cell[535191, 9484, 327, 7, 32, "Output",ExpressionUUID->"a817af89-50e2-4c74-a874-58c9bf8cc76e"]
}, Open  ]],
Cell[535533, 9494, 1785, 30, 184, "Text",ExpressionUUID->"555a464f-7918-48b4-95c8-b671f3e848b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[537355, 9529, 210, 4, 67, "Section",ExpressionUUID->"c08464d4-e8c1-49b0-8226-73bdd4916409"],
Cell[537568, 9535, 2663, 57, 204, "Text",ExpressionUUID->"2860f2fe-53a9-449f-b6c3-2cc701cf1a86"],
Cell[540234, 9594, 9142, 154, 155, "Input",ExpressionUUID->"96af6569-8259-4b34-862d-f3fb6009f3e1"],
Cell[549379, 9750, 4951, 130, 295, "Input",ExpressionUUID->"a33c8d4d-f8cf-45a3-a911-3c173a49a62e"],
Cell[554333, 9882, 1021, 16, 74, "Text",ExpressionUUID->"b99da1a8-b11e-4b25-9966-88779968e5f3"],
Cell[555357, 9900, 3995, 100, 299, "Input",ExpressionUUID->"50a13ee7-c513-4549-8a17-9be5f5e7bda0",
 InitializationCell->True],
Cell[559355, 10002, 745, 17, 30, "Input",ExpressionUUID->"5f3243c3-1027-4ba1-bcad-12a957cfc6ad"],
Cell[560103, 10021, 11512, 306, 430, "Input",ExpressionUUID->"9de4e2b0-6066-4411-9129-7c14afd9e5b0"],
Cell[571618, 10329, 601, 16, 30, "Input",ExpressionUUID->"e5dd760c-7ddc-4084-aec7-1bd74a6ce102"],
Cell[572222, 10347, 2905, 74, 136, "Input",ExpressionUUID->"dd0d3953-7bbd-426e-9437-15270699bc62"],
Cell[575130, 10423, 506, 8, 30, "Input",ExpressionUUID->"ed37277d-c0a7-4c8b-9d90-c1d8ecdf6a3b"],
Cell[575639, 10433, 1303, 21, 143, "Text",ExpressionUUID->"eab7232f-b152-4217-8040-a64ec4714d7b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[576979, 10459, 409, 6, 67, "Section",ExpressionUUID->"1dc772ab-e0f3-4802-abaf-91d88fc81b7e"],
Cell[577391, 10467, 4168, 72, 557, "Text",ExpressionUUID->"cbd168ce-354a-436c-b9d6-6236578df99c"],
Cell[581562, 10541, 3425, 76, 409, "Input",ExpressionUUID->"cb84e309-3b7b-4e31-be90-f80211ff9478"],
Cell[584990, 10619, 10027, 234, 614, "Input",ExpressionUUID->"43e1b254-785a-4b22-89e7-c170420e0091",
 InitializationCell->True],
Cell[595020, 10855, 634, 11, 30, "Input",ExpressionUUID->"90422872-5b45-4de6-83b0-cf9952d961c4"],
Cell[595657, 10868, 1791, 49, 94, "Input",ExpressionUUID->"aaf3e53c-f279-402b-9de1-bc715152641d"],
Cell[597451, 10919, 261, 4, 30, "Input",ExpressionUUID->"b624d179-0770-44d7-8401-200177ec7961"],
Cell[597715, 10925, 965, 22, 178, "Input",ExpressionUUID->"9e0e2c1c-0768-421d-aa14-1a8e8e17f252"],
Cell[598683, 10949, 292, 6, 30, "Input",ExpressionUUID->"e75cf10d-dd31-4730-9f2b-48eb68dd85b3"],
Cell[598978, 10957, 244, 5, 30, "Input",ExpressionUUID->"5c2c145a-f96c-4d4d-abe1-6d0a996cd95a"],
Cell[599225, 10964, 6237, 158, 472, "Input",ExpressionUUID->"7fe72962-2f11-4548-a9c0-e31e27076b6d"],
Cell[605465, 11124, 509, 11, 30, "Input",ExpressionUUID->"02a66422-92b0-45d2-83f6-3f55b2175d48"],
Cell[605977, 11137, 2576, 57, 368, "Input",ExpressionUUID->"5b30fe14-6ccf-4011-90cf-94830e9a9f2d"],
Cell[608556, 11196, 687, 15, 30, "Input",ExpressionUUID->"36828ff0-660f-469a-8026-478b76a18ce7"],
Cell[609246, 11213, 775, 17, 30, "Input",ExpressionUUID->"8edcfc06-1122-4006-ac75-d96dcde170a2"],
Cell[610024, 11232, 3022, 58, 216, "Text",ExpressionUUID->"1e49226a-8a60-403c-a7ba-64413080fab2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[613083, 11295, 266, 4, 67, "Section",ExpressionUUID->"ea404c81-aa19-4696-a7b0-32f84ddd8476"],
Cell[613352, 11301, 1288, 20, 97, "Text",ExpressionUUID->"82f58b79-7736-4896-9c68-624256734cf4"],
Cell[614643, 11323, 1109, 28, 52, "Input",ExpressionUUID->"68b5909d-c7e1-46a0-a8c8-eb63eb5b93b6"],
Cell[615755, 11353, 837, 14, 51, "Text",ExpressionUUID->"922bb4d4-8a1a-4da1-a238-c69941cc4cf0"],
Cell[616595, 11369, 735, 19, 46, "Input",ExpressionUUID->"c4e04aa0-69e2-4753-a786-cab5a7e89ee0",
 InitializationCell->True],
Cell[617333, 11390, 593, 13, 30, "Input",ExpressionUUID->"6acefbaa-ab4e-495f-acb7-949f27a85270"],
Cell[617929, 11405, 3186, 53, 373, "Text",ExpressionUUID->"99fc5c60-11fc-482e-9517-189aece49323"],
Cell[621118, 11460, 2090, 36, 115, "Input",ExpressionUUID->"30e5203b-9f87-4bdb-bfe1-42547c86d3e3"],
Cell[623211, 11498, 461, 10, 30, "Input",ExpressionUUID->"a736da74-d452-4d36-a65e-0171672f31de"],
Cell[623675, 11510, 1576, 26, 143, "Text",ExpressionUUID->"3edd7d4f-4e04-48af-81f1-a43573c28561"],
Cell[625254, 11538, 5760, 143, 262, "Input",ExpressionUUID->"0bae2b11-afb8-4b43-b0ad-2af056530de0"],
Cell[631017, 11683, 511, 14, 30, "Input",ExpressionUUID->"5afe567d-9a16-4deb-9abc-39ea37fe9f7e"],
Cell[631531, 11699, 628, 14, 30, "Input",ExpressionUUID->"fa8b811a-9fca-4996-96b1-09f8b9a01945"],
Cell[632162, 11715, 2692, 41, 189, "Text",ExpressionUUID->"3ed13573-237b-4409-a7a0-89c58fbe40b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[634891, 11761, 309, 5, 67, "Section",ExpressionUUID->"f3059770-15d5-4ae7-b46b-25be227bb3a9"],
Cell[635203, 11768, 2325, 35, 212, "Text",ExpressionUUID->"1ef53310-ed89-49b1-9f67-1e371228a0c0"],
Cell[637531, 11805, 1411, 38, 68, "Input",ExpressionUUID->"47d63260-2b78-4f00-b4d2-bf3e915671a2",
 InitializationCell->True],
Cell[638945, 11845, 1789, 26, 97, "Text",ExpressionUUID->"daad54e2-6054-45c5-a3ae-f480527461e3"],
Cell[640737, 11873, 1209, 31, 52, "Input",ExpressionUUID->"ec6a72f1-1b4e-4e39-936b-232604e17cd8"],
Cell[641949, 11906, 512, 12, 30, "Input",ExpressionUUID->"d5ade7e3-f1d7-4156-87b1-5de2a87b629d"],
Cell[642464, 11920, 1054, 24, 52, "Input",ExpressionUUID->"f6f8684d-8e38-4a82-8de4-b79806415ef0"],
Cell[643521, 11946, 468, 12, 30, "Input",ExpressionUUID->"9232da6c-5de2-4a4d-adae-c0aea24333bd"],
Cell[643992, 11960, 847, 21, 30, "Input",ExpressionUUID->"fd35ae85-13de-4790-9e69-907fade4c93d"],
Cell[644842, 11983, 353, 10, 30, "Input",ExpressionUUID->"77dc2ceb-ce6a-4a64-8e86-2ed568601d6b"],
Cell[645198, 11995, 1769, 26, 74, "Text",ExpressionUUID->"436d439a-4f5d-4534-87a9-93506a7ad229"],
Cell[646970, 12023, 1271, 33, 30, "Input",ExpressionUUID->"1a8f75a0-a25c-4249-85de-0fed68f91c4c"],
Cell[648244, 12058, 501, 13, 30, "Input",ExpressionUUID->"3e87779c-4076-4667-af0b-4f5d156256fe"],
Cell[648748, 12073, 435, 9, 30, "Input",ExpressionUUID->"ed0c67ec-2546-40a7-945d-34ff856da7c0"],
Cell[649186, 12084, 1987, 29, 74, "Text",ExpressionUUID->"beedadf8-698d-4baf-a35e-cb7cd59a3e16"],
Cell[651176, 12115, 1386, 37, 52, "Input",ExpressionUUID->"7e9f9605-6164-4130-99a2-94040a3cc8ee"],
Cell[652565, 12154, 4551, 86, 283, "Input",ExpressionUUID->"6c6c770e-32af-46f4-a4da-c9f1c528c077"],
Cell[657119, 12242, 880, 20, 30, "Input",ExpressionUUID->"90fc29e6-7fa7-4552-8987-cb6011a58705"],
Cell[658002, 12264, 2651, 38, 97, "Text",ExpressionUUID->"faf65560-6c49-4983-bbd4-7ab8174fd2a5"],
Cell[660656, 12304, 3202, 79, 178, "Input",ExpressionUUID->"7af0d414-ddc2-4997-8959-c1bc0fb2f6cf"],
Cell[663861, 12385, 900, 25, 52, "Input",ExpressionUUID->"d458afbc-d6ce-4d05-98ab-d3a90046f421"],
Cell[664764, 12412, 320, 8, 30, "Input",ExpressionUUID->"119ffe52-5248-49b6-adef-5c7428bf0f7f"],
Cell[665087, 12422, 424, 9, 30, "Input",ExpressionUUID->"60e3c376-f856-4fd3-a316-d3206801fd71"],
Cell[665514, 12433, 2525, 37, 166, "Text",ExpressionUUID->"0459b062-e406-4efa-a79d-f3709d3464d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[668076, 12475, 424, 6, 67, "Section",ExpressionUUID->"96c30bda-91f1-4a49-a2af-acf92079d964"],
Cell[668503, 12483, 654, 11, 97, "Text",ExpressionUUID->"c0692fc7-9b94-44c2-831b-168f9e3adf9a"],
Cell[669160, 12496, 7787, 109, 511, "Text",ExpressionUUID->"f2993662-88d3-4f6f-bbdf-8b734978beeb"],
Cell[676950, 12607, 5831, 147, 430, "Input",ExpressionUUID->"82b71aee-d9a0-4e62-af30-25395bf50647"],
Cell[682784, 12756, 5053, 125, 299, "Input",ExpressionUUID->"b3a344cd-abc3-4d74-ac72-92151183ec44",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[687862, 12885, 459, 8, 30, "Input",ExpressionUUID->"8ed61a4c-f4b5-4035-b5da-73fd313d3b6e"],
Cell[688324, 12895, 6919, 128, 118, "Output",ExpressionUUID->"7f36484d-ec78-45f9-ab5c-e9a1f5fb6976"]
}, Open  ]],
Cell[CellGroupData[{
Cell[695280, 13028, 465, 8, 30, "Input",ExpressionUUID->"c79dd464-170b-4b1a-b746-788f3ae05287"],
Cell[695748, 13038, 9637, 182, 122, "Output",ExpressionUUID->"02c8e8fe-9fad-40f7-9480-17d15e694499"]
}, Open  ]],
Cell[CellGroupData[{
Cell[705422, 13225, 760, 13, 30, "Input",ExpressionUUID->"de9f79b6-3b41-4a2b-a537-b317d33a8e16"],
Cell[706185, 13240, 7623, 148, 118, "Output",ExpressionUUID->"afdf9a8f-fe42-4d19-9ce7-adfa11c0b11b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[713845, 13393, 320, 6, 30, "Input",ExpressionUUID->"5e356287-ca2a-41c4-9fed-0936f6e421b2"],
Cell[714168, 13401, 1598, 33, 43, "Output",ExpressionUUID->"37a18911-22fc-4138-8488-d75779221184"]
}, Open  ]],
Cell[715781, 13437, 10693, 249, 740, "Input",ExpressionUUID->"e0e494d3-034f-4ffc-9397-a85432f6904d",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[726499, 13690, 278, 6, 30, "Input",ExpressionUUID->"0fdddead-957d-4111-8886-94aac3139424"],
Cell[726780, 13698, 317, 7, 34, "Output",ExpressionUUID->"2854c383-fc41-47bc-8906-d198a786b255"]
}, Open  ]],
Cell[CellGroupData[{
Cell[727134, 13710, 482, 10, 30, "Input",ExpressionUUID->"bccc57e8-85a1-4833-bafe-b89160a610b7"],
Cell[727619, 13722, 2450, 51, 50, "Output",ExpressionUUID->"2cb189a5-7552-4148-b9ca-b3f426e6be56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[730106, 13778, 633, 12, 30, "Input",ExpressionUUID->"b7d4f4b8-fed5-4e60-a5aa-922f74273dcf"],
Cell[730742, 13792, 3035, 61, 50, "Output",ExpressionUUID->"8abe70b3-9e2f-45b0-8fd1-c24756d56dc7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[733814, 13858, 633, 12, 30, "Input",ExpressionUUID->"a63429b2-8240-4938-a4cf-a77d51456b76"],
Cell[734450, 13872, 2168, 44, 449, "Output",ExpressionUUID->"69429638-361a-4024-84d6-e84d0cbab6b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[736655, 13921, 584, 12, 73, "Input",ExpressionUUID->"27366e7c-8fea-4a30-b9d3-a9944f6f29d0"],
Cell[737242, 13935, 16104, 321, 254, "Output",ExpressionUUID->"218a7ffa-c918-4715-a051-40f4e7d34eb6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[753383, 14261, 1825, 47, 115, "Input",ExpressionUUID->"ba894f29-5606-42d2-8b9c-570e786cf3a0"],
Cell[755211, 14310, 318983, 5826, 316, "Output",ExpressionUUID->"c6d0ac38-542d-48c6-ba8a-138a1a055d19"]
}, Open  ]],
Cell[1074209, 20139, 2689, 42, 166, "Text",ExpressionUUID->"fb8c6d67-cf69-47bb-8276-8e4f0d85a0cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1076935, 20186, 462, 7, 67, "Section",ExpressionUUID->"a6964af9-330f-4471-9156-b7bd2d6af3ec"],
Cell[1077400, 20195, 5517, 81, 327, "Text",ExpressionUUID->"03ae28e6-8c0f-469b-a467-6a4949dbccb2"],
Cell[1082920, 20278, 1834, 27, 51, "Text",ExpressionUUID->"24fc910a-3e6e-47d5-97e8-536e2854d44d"],
Cell[1084757, 20307, 5248, 130, 341, "Input",ExpressionUUID->"d7fc11bf-49b8-4318-bf23-0cf493e1a0fc",
 InitializationCell->True],
Cell[1090008, 20439, 2948, 83, 136, "Input",ExpressionUUID->"61a3aef5-9565-4a56-86f6-89174534f764"],
Cell[1092959, 20524, 602, 17, 30, "Input",ExpressionUUID->"2ed29953-7355-4a5b-869d-e1c2a0425906"],
Cell[1093564, 20543, 437, 10, 30, "Input",ExpressionUUID->"11f4c44d-1c6d-454d-9660-17431d48c1e6"],
Cell[1094004, 20555, 2012, 30, 74, "Text",ExpressionUUID->"9014362b-b860-48af-be98-5acfd980729a"],
Cell[1096019, 20587, 1521, 36, 173, "Input",ExpressionUUID->"76076ebb-cd0f-42c2-91a8-353af7cb2f36",
 InitializationCell->True],
Cell[1097543, 20625, 341, 6, 30, "Input",ExpressionUUID->"8b3df604-77e9-4da6-b191-e7fcdcd56a2e"],
Cell[1097887, 20633, 4933, 132, 199, "Input",ExpressionUUID->"26cce683-f671-4df7-a7d4-0e6ce0d2506b"],
Cell[CellGroupData[{
Cell[1102845, 20769, 1063, 29, 30, "Input",ExpressionUUID->"ad2b4a45-b955-4729-a732-28989da5ec62"],
Cell[1103911, 20800, 3941, 85, 73, "Output",ExpressionUUID->"1e5343b9-e8ce-4595-a080-921429bb41c0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1107889, 20890, 217, 4, 30, "Input",ExpressionUUID->"85db93ce-8a89-46c7-b659-6e81a10b8d30"],
Cell[1108109, 20896, 273, 5, 66, "Output",ExpressionUUID->"30193eb3-8b53-4d39-a08f-52f8470e7935"]
}, Open  ]],
Cell[1108397, 20904, 507, 11, 30, "Input",ExpressionUUID->"4976d082-4ed7-4939-8b34-33ded457cc5e"],
Cell[CellGroupData[{
Cell[1108929, 20919, 2208, 62, 136, "Input",ExpressionUUID->"53337dbb-fb7f-4819-b50f-0417fbf988a6"],
Cell[1111140, 20983, 5591, 126, 396, "Output",ExpressionUUID->"7a682414-9c71-44bb-ac9e-4ea8c309a55e"]
}, Open  ]],
Cell[1116746, 21112, 435, 12, 30, "Input",ExpressionUUID->"33dcb75e-d6f7-4fd0-a9fb-f7c457ee8cba"],
Cell[CellGroupData[{
Cell[1117206, 21128, 217, 4, 30, "Input",ExpressionUUID->"1d4075f6-7185-4b6a-b7cc-425a8fd07fc6"],
Cell[1117426, 21134, 246, 5, 166, "Output",ExpressionUUID->"8a8ba128-b84b-4fd0-bce1-f0f529009ec6"]
}, Open  ]],
Cell[1117687, 21142, 357, 9, 30, "Input",ExpressionUUID->"cdce6cb9-9d03-40c8-8119-76e649ff0734"],
Cell[1118047, 21153, 2532, 47, 53, "Text",ExpressionUUID->"e94d9271-1909-4cd7-956a-6c1c952d1976"],
Cell[CellGroupData[{
Cell[1120604, 21204, 3603, 89, 178, "Input",ExpressionUUID->"dbb16663-b533-46c2-8055-85e3a2ee02c1"],
Cell[1124210, 21295, 32912, 546, 332, "Output",ExpressionUUID->"5727c9fc-6138-471b-86fe-c10e3cbee413"]
}, Open  ]],
Cell[1157137, 21844, 1916, 29, 143, "Text",ExpressionUUID->"cda0d37f-8fd7-483b-bb11-39bb61b7ce22"]
}, Open  ]]
}, Open  ]]
}
]
*)

